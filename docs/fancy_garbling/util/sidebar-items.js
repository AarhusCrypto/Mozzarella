initSidebarItems({"constant":[["NPRIMES","Number of primes supported by our library."],["PRIMES","Primes used in fancy garbling."]],"fn":[["as_base_q_u128","Convert `x` into base `q`."],["base_q_add_eq","Add two base q numbers together. Add a base q number into the first one."],["crt_factor","Compute the CRT representation of `x` with respect to the factorization of `q`."],["crt_inv_factor","Compute the value `x` given a composite CRT modulus provided by `xs`."],["factor","Factor using the primes in the global `PRIMES` array. Fancy garbling only supports composites with small prime factors."],["from_base_q","Convert little-endian base `q` digits into `u128`."],["from_mixed_radix","Convert little-endian mixed radix digits into u128."],["modulus_with_nprimes","Primes skipping the modulus 2, which allows certain gadgets. Generate a CRT modulus with n primes."],["modulus_with_width","Generate a CRT modulus that support at least n-bit integers, using the built-in PRIMES."],["output_tweak","Compute the output tweak for a garbled gate where i is the gate id and k is the value."],["tweak",""],["tweak2",""],["u128_from_bits","Convert into a u128 from the \"bits\" as u16. Assumes each \"bit\" is 0 or 1."],["u128_to_bits","Get the bits of a u128 encoded in 128 u16s, which is convenient for the rest of the library, which uses u16 as the base digit type in Wire."]],"trait":[["RngExt","Extra Rng functionality, useful for `fancy-garbling`."]]});