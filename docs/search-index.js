var N=null,E="",T="t",U="u",searchIndex={};
var R=["encrypt","block","usize","result","block512","ristrettopoint","channel","error","scuttlebutt","A marker trait denoting that the given scheme is…","to_owned","clone_into","try_from","try_into","borrow_mut","into_bits","from_cast","from_bits","type_id","to_string","initialize","borrow","typeid","scuttlebutt::cointoss","scuttlebutt::commitment","ordering","default","partial_cmp","formatter","bitxor_assign","Block512","ShaCommitment","Commitment"];

searchIndex["scuttlebutt"]={"doc":"The `scuttlebutt` multi-party computation utilities…","i":[[3,"Aes128",R[8],"AES-128, encryption only.",N,N],[3,"Aes256",E,"AES-256, encryption only.",N,N],[3,"Block",E,"A 128-bit chunk.",N,N],[12,"0",E,E,0,N],[3,R[30],E,"A 512-bit value.",N,N],[3,"Channel",E,"A wrapper struct for a reader and writer for managing I/O.…",N,N],[3,"AesHash",E,"AES-based correlation-robust hash function.",N,N],[3,"AesRng",E,"Implementation of a random number generator based on…",N,N],[11,"new",E,"Create a new `Aes128` object, using `key` as the AES key.",1,[[[R[1]]],["self"]]],[11,R[0],E,"Encrypt a block, outputting the ciphertext.",1,[[["self"],[R[1]]],[R[1]]]],[11,"encrypt4",E,"Encrypt four blocks at a time, outputting the ciphertexts.",1,[[["self"]]]],[11,"encrypt8",E,"Encrypt eight blocks at a time, outputting the ciphertexts.",1,[[["self"]]]],[11,"new",E,"Make a new `Aes256` object with key `key`.",2,[[],["self"]]],[11,R[0],E,"Encrypt block `m`.",2,[[["self"],[R[1]]],[R[1]]]],[11,"as_ptr",E,"Convert into a pointer.",0,[[["self"]]]],[11,"as_mut_ptr",E,"Convert into a mutable pointer.",0,[[["self"]]]],[11,"clmul",E,"Carryless multiplication.",0,[[]]],[11,"hash_pt",E,"Hash an elliptic curve point `pt` and tweak `tweak`.",0,[[[R[2]],[R[5]]],["self"]]],[11,"color_bit",E,"Return the \"color\" bit (when viewing `Block` as a wire…",0,[[["self"]],["bool"]]],[11,"set_color_bit",E,"Set the \"color\" bit (when viewing `Block` as a wire label).",0,[[["self"]],[R[1]]]],[11,"flip",E,"Flip all bits.",0,[[["self"]],["self"]]],[11,"prefix",E,"Return the first `n` bytes, where `n` must be `<= 64`.",3,[[["self"],[R[2]]]]],[11,"prefix_mut",E,"Return the first `n` bytes as mutable, where `n` must be…",3,[[["self"],[R[2]]]]],[11,"new",E,"Make a new `Channel` from a `reader` and a `writer`.",4,[[["w"],["r"]],["self"]]],[11,"write_usize",E,"Write a `usize` to the channel.",4,[[["self"],[R[2]]],[R[3]]]],[11,"read_usize",E,"Read a `usize` from the channel.",4,[[["self"]],[[R[2]],[R[3],[R[2]]]]]],[11,"write_bool",E,"Write a `bool` to the channel.",4,[[["self"],["bool"]],[[R[2]],[R[3],[R[2]]]]]],[11,"read_bool",E,"Read a `bool` from the channel.",4,[[["self"]],[[R[3],["bool"]],["bool"]]]],[11,"write_block",E,"Write a `Block` to the channel.",4,[[["self"],[R[1]]],[[R[2]],[R[3],[R[2]]]]]],[11,"read_block",E,"Read a `Block` from the channel.",4,[[["self"]],[[R[3],[R[1]]],[R[1]]]]],[11,"write_block512",E,"Write a `Block512` to the channel.",4,[[["self"],[R[4]]],[[R[2]],[R[3],[R[2]]]]]],[11,"read_block512",E,"Read a `Block512` from the channel.",4,[[["self"]],[[R[3],[R[4]]],[R[4]]]]],[11,"write_bytes",E,"Write a slice of `u8`s to the channel.",4,[[["self"]],[[R[2]],[R[3],[R[2]]]]]],[11,"read_bytes_inplace",E,"Read a slice of `u8`s from the channel.",4,[[["self"]],[R[3]]]],[11,"write_pt",E,"Write a `RistrettoPoint` to the channel.",4,[[["self"],[R[5]]],[[R[2]],[R[3],[R[2]]]]]],[11,"read_pt",E,"Read a `RistrettoPoint` from the channel.",4,[[["self"]],[[R[3],[R[5]]],[R[5]]]]],[11,"flush",E,"Flush the channel.",4,[[["self"]],[R[3]]]],[0,"cointoss",E,"Implementation of a simple two-party coin tossing protocol…",N,N],[4,"Error",R[23],"Errors produced by the coin tossing protocol.",N,N],[13,"IoError",E,"An I/O error occurred.",5,N],[13,"CommitmentCheckFailed",E,"The commitment check failed.",5,N],[5,"send",E,"Coin tossing sender.",N,[[[R[6]]],[["vec",[R[1]]],[R[7]],[R[3],["vec",R[7]]]]]],[5,"receive",E,"Coin tossing receiver.",N,[[[R[6]]],[["vec",[R[1]]],[R[7]],[R[3],["vec",R[7]]]]]],[0,"commitment",R[8],"A trait defining a Commitment Scheme and an implementation…",N,N],[3,R[31],R[24],"A commitment in the random oracle model using SHA256.",N,N],[12,"seed",E,"The seed used to initialize the commitment.",6,N],[8,R[32],E,"Generic commitment scheme.",N,N],[16,"Seed",E,"The type used to initialize a commitment.",7,N],[16,"Output",E,"The output type of the commitment.",7,N],[10,"new",E,"A new commitment initialized with `seed`.",7,[[],["self"]]],[10,"input",E,"A method to add data to the commitment.",7,[[["self"]]]],[10,"finish",E,"Complete the commitment.",7,[[]]],[10,"check",E,"Check if two commitments are equal.",7,[[],["bool"]]],[11,"new",R[8],"Initialize the hash function using `key`.",8,[[[R[1]]],["self"]]],[11,"cr_hash",E,"Correlation-robust hash function for 128-bit inputs (cf.…",8,[[["self"],[R[1]]],[R[1]]]],[11,"ccr_hash",E,"Circular correlation-robust hash function (cf.…",8,[[["self"],[R[1]]],[R[1]]]],[11,"tccr_hash",E,"Tweakable circular correlation robust hash function (cf.…",8,[[["self"],[R[1]]],[R[1]]]],[11,"new",E,"Create a new random number generator using a random seed…",9,[[],["self"]]],[11,"fork",E,"Create a new RNG using a random seed from this one.",9,[[["self"]],["self"]]],[0,"utils",E,"Useful utility functions.",N,N],[5,"xor","scuttlebutt::utils","XOR two byte arrays, outputting the result.",N,[[],[["u8"],["vec",["u8"]]]]],[5,"xor_n",E,"XOR two byte arrays up to `n` bytes, outputting the result.",N,[[[R[2]]],[["u8"],["vec",["u8"]]]]],[5,"xor_inplace",E,"XOR two byte arrays in place.",N,[[]]],[5,"xor_inplace_n",E,"XOR two byte arrays up to `n` bytes in place.",N,[[[R[2]]]]],[5,"and",E,"AND two byte arrays, outputting the result.",N,[[],[["u8"],["vec",["u8"]]]]],[5,"and_inplace",E,"AND two byte arrays in place.",N,[[]]],[17,"FIXED_KEY_AES128",R[8],"Fixed-key AES-128.",N,N],[17,"AES_HASH",E,"`AesHash` with a fixed key.",N,N],[8,"SemiHonest",E,R[9],N,N],[8,"Malicious",E,R[9],N,N],[11,"from",E,E,1,[[[T]],[T]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[3]]]],[11,R[13],E,E,1,[[],[R[3]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[21],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[22]]]],[11,R[15],E,E,1,[[],[U]]],[11,R[16],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[17],E,E,1,[[[T]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[3]]]],[11,R[13],E,E,2,[[],[R[3]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[21],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[22]]]],[11,R[15],E,E,2,[[],[U]]],[11,R[16],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[17],E,E,2,[[[T]],[T]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[[T],["self"]]]],[11,R[19],E,E,0,[[["self"]],["string"]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[3]]]],[11,R[13],E,E,0,[[],[R[3]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[21],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[22]]]],[11,R[15],E,E,0,[[],[U]]],[11,R[16],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[17],E,E,0,[[[T]],[T]]],[11,"clear",E,E,0,[[["self"]]]],[11,R[20],E,E,0,[[]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[10],E,E,3,[[["self"]],[T]]],[11,R[11],E,E,3,[[[T],["self"]]]],[11,R[19],E,E,3,[[["self"]],["string"]]],[11,"into",E,E,3,[[],[U]]],[11,R[12],E,E,3,[[[U]],[R[3]]]],[11,R[13],E,E,3,[[],[R[3]]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[21],E,E,3,[[["self"]],[T]]],[11,R[18],E,E,3,[[["self"]],[R[22]]]],[11,R[15],E,E,3,[[],[U]]],[11,R[16],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[17],E,E,3,[[[T]],[T]]],[11,"clear",E,E,3,[[["self"]]]],[11,R[20],E,E,3,[[]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[10],E,E,4,[[["self"]],[T]]],[11,R[11],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[12],E,E,4,[[[U]],[R[3]]]],[11,R[13],E,E,4,[[],[R[3]]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[21],E,E,4,[[["self"]],[T]]],[11,R[18],E,E,4,[[["self"]],[R[22]]]],[11,R[15],E,E,4,[[],[U]]],[11,R[16],E,E,4,[[[T]],[T]]],[11,"cast",E,E,4,[[],[U]]],[11,R[17],E,E,4,[[[T]],[T]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[12],E,E,8,[[[U]],[R[3]]]],[11,R[13],E,E,8,[[],[R[3]]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[21],E,E,8,[[["self"]],[T]]],[11,R[18],E,E,8,[[["self"]],[R[22]]]],[11,R[15],E,E,8,[[],[U]]],[11,R[16],E,E,8,[[[T]],[T]]],[11,"cast",E,E,8,[[],[U]]],[11,R[17],E,E,8,[[[T]],[T]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[10],E,E,9,[[["self"]],[T]]],[11,R[11],E,E,9,[[[T],["self"]]]],[11,"into",E,E,9,[[],[U]]],[11,R[12],E,E,9,[[[U]],[R[3]]]],[11,R[13],E,E,9,[[],[R[3]]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[21],E,E,9,[[["self"]],[T]]],[11,R[18],E,E,9,[[["self"]],[R[22]]]],[11,R[15],E,E,9,[[],[U]]],[11,R[16],E,E,9,[[[T]],[T]]],[11,"cast",E,E,9,[[],[U]]],[11,R[17],E,E,9,[[[T]],[T]]],[11,"clear",E,E,9,[[["self"]]]],[11,R[20],E,E,9,[[]]],[11,"from_entropy",E,E,9,[[],["r"]]],[11,"from",R[23],E,5,[[[T]],[T]]],[11,R[19],E,E,5,[[["self"]],["string"]]],[11,"into",E,E,5,[[],[U]]],[11,R[12],E,E,5,[[[U]],[R[3]]]],[11,R[13],E,E,5,[[],[R[3]]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[21],E,E,5,[[["self"]],[T]]],[11,R[18],E,E,5,[[["self"]],[R[22]]]],[11,R[15],E,E,5,[[],[U]]],[11,R[16],E,E,5,[[[T]],[T]]],[11,"cast",E,E,5,[[],[U]]],[11,R[17],E,E,5,[[[T]],[T]]],[11,"from",R[24],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[12],E,E,6,[[[U]],[R[3]]]],[11,R[13],E,E,6,[[],[R[3]]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[21],E,E,6,[[["self"]],[T]]],[11,R[18],E,E,6,[[["self"]],[R[22]]]],[11,R[15],E,E,6,[[],[U]]],[11,R[16],E,E,6,[[[T]],[T]]],[11,"cast",E,E,6,[[],[U]]],[11,R[17],E,E,6,[[[T]],[T]]],[11,"new",E,E,6,[[],["self"]]],[11,"input",E,E,6,[[["self"]]]],[11,"finish",E,E,6,[[]]],[11,"check",E,E,6,[[],["bool"]]],[11,"eq",R[8],E,0,[[["self"],[R[1]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[4]]],["bool"]]],[11,"as_ref",E,E,0,[[["self"]]]],[11,"as_ref",E,E,3,[[["self"]]]],[11,"from",E,E,0,[[["u128"]],["self"]]],[11,"from",E,E,0,[[["__m128i"]],["self"]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,3,[[],[R[4]]]],[11,"from",E,E,3,[[],[R[4]]]],[11,"from",E,E,3,[[],[R[4]]]],[11,"from",E,E,3,[[["__m512i"]],[R[4]]]],[11,"from",R[23],E,5,[[[R[7]]],["self"]]],[11,"clone",R[8],E,1,[[["self"]],["aes128"]]],[11,"clone",E,E,2,[[["self"]],["aes256"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"clone",E,E,3,[[["self"]],[R[4]]]],[11,"clone",E,E,4,[[["self"]],[R[6]]]],[11,"clone",E,E,9,[[["self"]],["aesrng"]]],[11,"cmp",E,E,0,[[["self"]],[R[25]]]],[11,"cmp",E,E,3,[[["self"]],[R[25]]]],[11,R[26],E,E,0,[[],["self"]]],[11,R[26],E,E,3,[[],["self"]]],[11,R[26],E,E,9,[[],["self"]]],[11,R[27],E,E,0,[[["self"]],[[R[25]],["option",[R[25]]]]]],[11,R[27],E,E,3,[[["self"]],[[R[25]],["option",[R[25]]]]]],[11,"as_mut",E,E,0,[[["self"]]]],[11,"as_mut",E,E,3,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[3]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[3]]]],[11,"fmt",R[23],E,5,[[["self"],[R[28]]],[R[3]]]],[11,"fmt",R[8],E,9,[[["self"],[R[28]]],[R[3]]]],[11,"fmt",E,E,0,[[["self"],[R[28]]],[R[3]]]],[11,"fmt",E,E,3,[[["self"],[R[28]]],[R[3]]]],[11,"fmt",R[23],E,5,[[["self"],[R[28]]],[R[3]]]],[11,R[12],R[8],E,3,[[],[R[3]]]],[11,"bitxor",E,E,0,[[],["self"]]],[11,"bitxor",E,E,3,[[],["self"]]],[11,R[29],E,E,0,[[["self"]]]],[11,R[29],E,E,3,[[["self"]]]],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"hash",E,E,3,[[["self"],["h"]]]],[11,"next_u32",E,E,9,[[["self"]],["u32"]]],[11,"next_u64",E,E,9,[[["self"]],["u64"]]],[11,"fill_bytes",E,E,9,[[["self"]]]],[11,"try_fill_bytes",E,E,9,[[["self"]],[[R[7]],[R[3],[R[7]]]]]],[11,"from_seed",E,E,9,[[],["self"]]],[11,"from_rng",E,E,9,[[["rngcore"]],[[R[7]],[R[3],[R[7]]]]]],[11,"serialize",E,E,0,[[["self"],["serializer"]],[R[3]]]],[11,"deserialize",E,E,0,[[["deserializer"]],[R[3]]]]],"p":[[3,"Block"],[3,"Aes128"],[3,"Aes256"],[3,R[30]],[3,"Channel"],[4,"Error"],[3,R[31]],[8,R[32]],[3,"AesHash"],[3,"AesRng"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);