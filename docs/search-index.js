var N=null,E="",T="t",U="u",searchIndex={};
var R=["encrypt","block","result","error","usize","refcell","scuttlebutt","kilobits","Return the count in kilobits.","block512","ristrettopoint","A marker trait denoting that the given scheme is…","to_owned","clone_into","try_from","try_into","borrow_mut","into_bits","from_cast","from_bits","type_id","to_string","initialize","borrow","typeid","scuttlebutt::cointoss","scuttlebutt::commitment","write_bytes","read_bytes","ordering","default","partial_cmp","formatter","bitxor_assign","write_bool","Write a `bool` to the channel.","read_bool","Read a `bool` from the channel.","write_usize","Write a `usize` to the channel.","read_usize","Read a `usize` from the channel.","write_block","Write a `Block` to the channel.","read_block","Read a `Block` from the channel.","write_block512","Write a `Block512` to the channel.","read_block512","Read a `Block512` from the channel.","write_pt","Write a `RistrettoPoint` to the channel.","Read a `RistrettoPoint` from the channel.","Block512","TrackChannel","TrackReader","TrackWriter","ShaCommitment","Commitment","AbstractChannel"];

searchIndex["scuttlebutt"]={"doc":"The `scuttlebutt` multi-party computation utilities…","i":[[3,"Aes128",R[6],"AES-128, encryption only.",N,N],[3,"Aes256",E,"AES-256, encryption only.",N,N],[3,"Block",E,"A 128-bit chunk.",N,N],[12,"0",E,E,0,N],[3,R[53],E,"A 512-bit value.",N,N],[3,"Channel",E,"A standard read/write channel.",N,N],[3,R[54],E,"A channel for tracking the number of bits read/written.",N,N],[3,R[55],E,"An object for tracking the number of bits read from a…",N,N],[3,R[56],E,"An object for tracking the number of bits written to a…",N,N],[3,"AesHash",E,"AES-based correlation-robust hash function.",N,N],[3,"AesRng",E,"Implementation of a random number generator based on…",N,N],[11,"new",E,"Create a new `Aes128` object, using `key` as the AES key.",1,[[[R[1]]],["self"]]],[11,R[0],E,"Encrypt a block, outputting the ciphertext.",1,[[["self"],[R[1]]],[R[1]]]],[11,"encrypt4",E,"Encrypt four blocks at a time, outputting the ciphertexts.",1,[[["self"]]]],[11,"encrypt8",E,"Encrypt eight blocks at a time, outputting the ciphertexts.",1,[[["self"]]]],[11,"new",E,"Make a new `Aes256` object with key `key`.",2,[[],["self"]]],[11,R[0],E,"Encrypt block `m`.",2,[[["self"],[R[1]]],[R[1]]]],[11,"as_ptr",E,"Convert into a pointer.",0,[[["self"]]]],[11,"as_mut_ptr",E,"Convert into a mutable pointer.",0,[[["self"]]]],[11,"clmul",E,"Carryless multiplication.",0,[[]]],[11,"hash_pt",E,"Hash an elliptic curve point `pt` and tweak `tweak`.",0,[[[R[4]],[R[10]]],["self"]]],[11,"write",E,"Write a block to `stream`.",0,[[[T],["self"]],[[R[3]],[R[4]],[R[2],[R[4],R[3]]]]]],[11,"read",E,"Read a block from `stream`.",0,[[[T]],[[R[2],[R[1],R[3]]],[R[3]],[R[1]]]]],[11,"color_bit",E,"Return the \"color\" bit (when viewing `Block` as a wire…",0,[[["self"]],["bool"]]],[11,"set_color_bit",E,"Set the \"color\" bit (when viewing `Block` as a wire label).",0,[[["self"]],[R[1]]]],[11,"flip",E,"Flip all bits.",0,[[["self"]],["self"]]],[11,"prefix",E,"Return the first `n` bytes, where `n` must be `<= 64`.",3,[[["self"],[R[4]]]]],[11,"prefix_mut",E,"Return the first `n` bytes as mutable, where `n` must be…",3,[[["self"],[R[4]]]]],[11,"new",E,"Make a new `Channel` from a `reader` and a `writer`.",4,[[["w"],["r"]],["self"]]],[11,"reader",E,"Return a reader object wrapped in `Rc<RefCell>`.",4,[[],[[R[5]],["rc",[R[5]]]]]],[11,"writer",E,"Return a writer object wrapped in `Rc<RefCell>`.",4,[[],[["rc",[R[5]]],[R[5]]]]],[11,"new",E,"Make a new `TrackChannel` from a `reader` and a `writer`.",5,[[["w"],["r"]],["self"]]],[11,"clear",E,"Clear the number of bits read/written.",5,[[["self"]]]],[11,"write_kilobits",E,"Return the number of kilobits written to the channel.",5,[[["self"]],["f64"]]],[11,"read_kilobits",E,"Return the number of kilobits read from the channel.",5,[[["self"]],["f64"]]],[0,"cointoss",E,"Implementation of a simple two-party coin tossing protocol…",N,N],[4,"Error",R[25],"Errors produced by the coin tossing protocol.",N,N],[13,"IoError",E,"An I/O error occurred.",6,N],[13,"CommitmentCheckFailed",E,"The commitment check failed.",6,N],[5,"send",E,"Coin tossing sender.",N,[[["c"]],[[R[2],["vec",R[3]]],[R[3]],["vec",[R[1]]]]]],[5,"receive",E,"Coin tossing receiver.",N,[[["c"]],[[R[2],["vec",R[3]]],[R[3]],["vec",[R[1]]]]]],[11,"new",R[6],"Make a new `TrackReader` from an inner `Read` object.",7,[[["r"]],["self"]]],[11,"clear",E,"Clear the count of bits read.",7,[[["self"]]]],[11,"count",E,"Return the count of bits read.",7,[[["self"]],[R[4]]]],[11,R[7],E,R[8],7,[[["self"]],["f64"]]],[11,"new",E,"Make a new `TrackWriter` from an inner `Write` object.",8,[[["w"]],["self"]]],[11,"clear",E,"Clear the count of bits written.",8,[[["self"]]]],[11,"count",E,"Return the count of bits written.",8,[[["self"]],[R[4]]]],[11,R[7],E,R[8],8,[[["self"]],["f64"]]],[0,"commitment",E,"A trait defining a Commitment Scheme and an implementation…",N,N],[3,R[57],R[26],"A commitment in the random oracle model using SHA256.",N,N],[12,"seed",E,"The seed used to initialize the commitment.",9,N],[8,R[58],E,"Generic commitment scheme.",N,N],[16,"Seed",E,"The type used to initialize a commitment.",10,N],[16,"Output",E,"The output type of the commitment.",10,N],[10,"new",E,"A new commitment initialized with `seed`.",10,[[],["self"]]],[10,"input",E,"A method to add data to the commitment.",10,[[["self"]]]],[10,"finish",E,"Complete the commitment.",10,[[]]],[10,"check",E,"Check if two commitments are equal.",10,[[],["bool"]]],[11,"new",R[6],"Initialize the hash function using `key`.",11,[[[R[1]]],["self"]]],[11,"cr_hash",E,"Correlation-robust hash function for 128-bit inputs (cf.…",11,[[["self"],[R[1]]],[R[1]]]],[11,"ccr_hash",E,"Circular correlation-robust hash function (cf.…",11,[[["self"],[R[1]]],[R[1]]]],[11,"tccr_hash",E,"Tweakable circular correlation robust hash function (cf.…",11,[[["self"],[R[1]]],[R[1]]]],[11,"new",E,"Create a new random number generator using a random seed…",12,[[],["self"]]],[11,"fork",E,"Create a new RNG using a random seed from this one.",12,[[["self"]],["self"]]],[0,"utils",E,"Useful utility functions.",N,N],[5,"xor","scuttlebutt::utils","XOR two byte arrays, outputting the result.",N,[[],[["u8"],["vec",["u8"]]]]],[5,"xor_n",E,"XOR two byte arrays up to `n` bytes, outputting the result.",N,[[[R[4]]],[["u8"],["vec",["u8"]]]]],[5,"xor_inplace",E,"XOR two byte arrays in place.",N,[[]]],[5,"xor_inplace_n",E,"XOR two byte arrays up to `n` bytes in place.",N,[[[R[4]]]]],[5,"and",E,"AND two byte arrays, outputting the result.",N,[[],[["u8"],["vec",["u8"]]]]],[5,"and_inplace",E,"AND two byte arrays in place.",N,[[]]],[17,"FIXED_KEY_AES128",R[6],"Fixed-key AES-128.",N,N],[17,"AES_HASH",E,"`AesHash` with a fixed key.",N,N],[8,R[59],E,"A trait for managing I/O. `AbstractChannel`s are clonable,…",N,N],[10,R[28],E,"Read a slice of `u8`s from the channel.",13,[[["self"]],[R[2]]]],[10,R[27],E,"Write a slice of `u8`s to the channel.",13,[[["self"]],[R[2]]]],[10,"flush",E,"Flush the channel.",13,[[["self"]],[R[2]]]],[10,"clone",E,"Clone the channel.",13,[[["self"]],["self"]]],[11,R[34],E,R[35],13,[[["self"],["bool"]],[R[2]]]],[11,R[36],E,R[37],13,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[38],E,R[39],13,[[["self"],[R[4]]],[R[2]]]],[11,R[40],E,R[41],13,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,R[42],E,R[43],13,[[["self"],[R[1]]],[R[2]]]],[11,R[44],E,R[45],13,[[["self"]],[[R[2],[R[1]]],[R[1]]]]],[11,R[46],E,R[47],13,[[["self"],[R[9]]],[R[2]]]],[11,R[48],E,R[49],13,[[["self"]],[[R[9]],[R[2],[R[9]]]]]],[11,R[50],E,R[51],13,[[["self"],[R[10]]],[R[2]]]],[11,"read_pt",E,R[52],13,[[["self"]],[[R[2],[R[10]]],[R[10]]]]],[8,"SemiHonest",E,R[11],N,N],[8,"Malicious",E,R[11],N,N],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[14],E,E,1,[[[U]],[R[2]]]],[11,R[15],E,E,1,[[],[R[2]]]],[11,R[16],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[20],E,E,1,[[["self"]],[R[24]]]],[11,R[17],E,E,1,[[],[U]]],[11,R[18],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[19],E,E,1,[[[T]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[14],E,E,2,[[[U]],[R[2]]]],[11,R[15],E,E,2,[[],[R[2]]]],[11,R[16],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[20],E,E,2,[[["self"]],[R[24]]]],[11,R[17],E,E,2,[[],[U]]],[11,R[18],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[19],E,E,2,[[[T]],[T]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[[T],["self"]]]],[11,R[21],E,E,0,[[["self"]],["string"]]],[11,"into",E,E,0,[[],[U]]],[11,R[14],E,E,0,[[[U]],[R[2]]]],[11,R[15],E,E,0,[[],[R[2]]]],[11,R[16],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[20],E,E,0,[[["self"]],[R[24]]]],[11,R[17],E,E,0,[[],[U]]],[11,R[18],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[19],E,E,0,[[[T]],[T]]],[11,"clear",E,E,0,[[["self"]]]],[11,R[22],E,E,0,[[]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[[T],["self"]]]],[11,R[21],E,E,3,[[["self"]],["string"]]],[11,"into",E,E,3,[[],[U]]],[11,R[14],E,E,3,[[[U]],[R[2]]]],[11,R[15],E,E,3,[[],[R[2]]]],[11,R[16],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[20],E,E,3,[[["self"]],[R[24]]]],[11,R[17],E,E,3,[[],[U]]],[11,R[18],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[19],E,E,3,[[[T]],[T]]],[11,"clear",E,E,3,[[["self"]]]],[11,R[22],E,E,3,[[]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[14],E,E,4,[[[U]],[R[2]]]],[11,R[15],E,E,4,[[],[R[2]]]],[11,R[16],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[20],E,E,4,[[["self"]],[R[24]]]],[11,R[17],E,E,4,[[],[U]]],[11,R[18],E,E,4,[[[T]],[T]]],[11,"cast",E,E,4,[[],[U]]],[11,R[19],E,E,4,[[[T]],[T]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[14],E,E,5,[[[U]],[R[2]]]],[11,R[15],E,E,5,[[],[R[2]]]],[11,R[16],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[20],E,E,5,[[["self"]],[R[24]]]],[11,R[17],E,E,5,[[],[U]]],[11,R[18],E,E,5,[[[T]],[T]]],[11,"cast",E,E,5,[[],[U]]],[11,R[19],E,E,5,[[[T]],[T]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[14],E,E,7,[[[U]],[R[2]]]],[11,R[15],E,E,7,[[],[R[2]]]],[11,R[16],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[20],E,E,7,[[["self"]],[R[24]]]],[11,R[17],E,E,7,[[],[U]]],[11,R[18],E,E,7,[[[T]],[T]]],[11,"cast",E,E,7,[[],[U]]],[11,R[19],E,E,7,[[[T]],[T]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[14],E,E,8,[[[U]],[R[2]]]],[11,R[15],E,E,8,[[],[R[2]]]],[11,R[16],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[20],E,E,8,[[["self"]],[R[24]]]],[11,R[17],E,E,8,[[],[U]]],[11,R[18],E,E,8,[[[T]],[T]]],[11,"cast",E,E,8,[[],[U]]],[11,R[19],E,E,8,[[[T]],[T]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[14],E,E,11,[[[U]],[R[2]]]],[11,R[15],E,E,11,[[],[R[2]]]],[11,R[16],E,E,11,[[["self"]],[T]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[20],E,E,11,[[["self"]],[R[24]]]],[11,R[17],E,E,11,[[],[U]]],[11,R[18],E,E,11,[[[T]],[T]]],[11,"cast",E,E,11,[[],[U]]],[11,R[19],E,E,11,[[[T]],[T]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[12],E,E,12,[[["self"]],[T]]],[11,R[13],E,E,12,[[[T],["self"]]]],[11,"into",E,E,12,[[],[U]]],[11,R[14],E,E,12,[[[U]],[R[2]]]],[11,R[15],E,E,12,[[],[R[2]]]],[11,R[16],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[20],E,E,12,[[["self"]],[R[24]]]],[11,R[17],E,E,12,[[],[U]]],[11,R[18],E,E,12,[[[T]],[T]]],[11,"cast",E,E,12,[[],[U]]],[11,R[19],E,E,12,[[[T]],[T]]],[11,"clear",E,E,12,[[["self"]]]],[11,R[22],E,E,12,[[]]],[11,"from_entropy",E,E,12,[[],["r"]]],[11,"from",R[25],E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[["self"]],["string"]]],[11,"into",E,E,6,[[],[U]]],[11,R[14],E,E,6,[[[U]],[R[2]]]],[11,R[15],E,E,6,[[],[R[2]]]],[11,R[16],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[20],E,E,6,[[["self"]],[R[24]]]],[11,R[17],E,E,6,[[],[U]]],[11,R[18],E,E,6,[[[T]],[T]]],[11,"cast",E,E,6,[[],[U]]],[11,R[19],E,E,6,[[[T]],[T]]],[11,"from",R[26],E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[14],E,E,9,[[[U]],[R[2]]]],[11,R[15],E,E,9,[[],[R[2]]]],[11,R[16],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[20],E,E,9,[[["self"]],[R[24]]]],[11,R[17],E,E,9,[[],[U]]],[11,R[18],E,E,9,[[[T]],[T]]],[11,"cast",E,E,9,[[],[U]]],[11,R[19],E,E,9,[[[T]],[T]]],[11,R[27],R[6],E,4,[[["self"]],[R[2]]]],[11,R[28],E,E,4,[[["self"]],[R[2]]]],[11,"flush",E,E,4,[[["self"]],[R[2]]]],[11,"clone",E,E,4,[[["self"]],["self"]]],[11,R[27],E,E,5,[[["self"]],[R[2]]]],[11,R[28],E,E,5,[[["self"]],[R[2]]]],[11,"flush",E,E,5,[[["self"]],[R[2]]]],[11,"clone",E,E,5,[[["self"]],["self"]]],[11,"new",R[26],E,9,[[],["self"]]],[11,"input",E,E,9,[[["self"]]]],[11,"finish",E,E,9,[[]]],[11,"check",E,E,9,[[],["bool"]]],[11,"eq",R[6],E,0,[[[R[1]],["self"]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[9]]],["bool"]]],[11,"as_ref",E,E,0,[[["self"]]]],[11,"as_ref",E,E,3,[[["self"]]]],[11,"from",E,E,0,[[["u128"]],["self"]]],[11,"from",E,E,0,[[["__m128i"]],["self"]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,3,[[],[R[9]]]],[11,"from",E,E,3,[[],[R[9]]]],[11,"from",E,E,3,[[],[R[9]]]],[11,"from",E,E,3,[[["__m512i"]],[R[9]]]],[11,"from",R[25],E,6,[[[R[3]]],["self"]]],[11,"clone",R[6],E,1,[[["self"]],["aes128"]]],[11,"clone",E,E,2,[[["self"]],["aes256"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"clone",E,E,3,[[["self"]],[R[9]]]],[11,"clone",E,E,12,[[["self"]],["aesrng"]]],[11,"cmp",E,E,0,[[["self"]],[R[29]]]],[11,"cmp",E,E,3,[[["self"]],[R[29]]]],[11,R[30],E,E,0,[[],["self"]]],[11,R[30],E,E,3,[[],["self"]]],[11,R[30],E,E,12,[[],["self"]]],[11,R[31],E,E,0,[[["self"]],[[R[29]],["option",[R[29]]]]]],[11,R[31],E,E,3,[[["self"]],[[R[29]],["option",[R[29]]]]]],[11,"as_mut",E,E,0,[[["self"]]]],[11,"as_mut",E,E,3,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[32]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[32]]],[R[2]]]],[11,"fmt",R[25],E,6,[[["self"],[R[32]]],[R[2]]]],[11,"fmt",R[6],E,12,[[["self"],[R[32]]],[R[2]]]],[11,"fmt",E,E,0,[[["self"],[R[32]]],[R[2]]]],[11,"fmt",E,E,3,[[["self"],[R[32]]],[R[2]]]],[11,"fmt",R[25],E,6,[[["self"],[R[32]]],[R[2]]]],[11,R[14],R[6],E,3,[[],[R[2]]]],[11,"bitxor",E,E,0,[[],["self"]]],[11,"bitxor",E,E,3,[[],["self"]]],[11,R[33],E,E,0,[[["self"]]]],[11,R[33],E,E,3,[[["self"]]]],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"hash",E,E,3,[[["self"],["h"]]]],[11,"read",E,E,7,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"write",E,E,8,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,"flush",E,E,8,[[["self"]],[R[2]]]],[11,"next_u32",E,E,12,[[["self"]],["u32"]]],[11,"next_u64",E,E,12,[[["self"]],["u64"]]],[11,"fill_bytes",E,E,12,[[["self"]]]],[11,"try_fill_bytes",E,E,12,[[["self"]],[[R[3]],[R[2],[R[3]]]]]],[11,"from_seed",E,E,12,[[],["self"]]],[11,"from_rng",E,E,12,[[["rngcore"]],[[R[3]],[R[2],[R[3]]]]]],[11,"serialize",E,E,0,[[["serializer"],["self"]],[R[2]]]],[11,"deserialize",E,E,0,[[["deserializer"]],[R[2]]]],[11,R[34],E,R[35],13,[[["self"],["bool"]],[R[2]]]],[11,R[36],E,R[37],13,[[["self"]],[[R[2],["bool"]],["bool"]]]],[11,R[38],E,R[39],13,[[["self"],[R[4]]],[R[2]]]],[11,R[40],E,R[41],13,[[["self"]],[[R[4]],[R[2],[R[4]]]]]],[11,R[42],E,R[43],13,[[["self"],[R[1]]],[R[2]]]],[11,R[44],E,R[45],13,[[["self"]],[[R[2],[R[1]]],[R[1]]]]],[11,R[46],E,R[47],13,[[["self"],[R[9]]],[R[2]]]],[11,R[48],E,R[49],13,[[["self"]],[[R[9]],[R[2],[R[9]]]]]],[11,R[50],E,R[51],13,[[["self"],[R[10]]],[R[2]]]],[11,"read_pt",E,R[52],13,[[["self"]],[[R[2],[R[10]]],[R[10]]]]]],"p":[[3,"Block"],[3,"Aes128"],[3,"Aes256"],[3,R[53]],[3,"Channel"],[3,R[54]],[4,"Error"],[3,R[55]],[3,R[56]],[3,R[57]],[8,R[58]],[3,"AesHash"],[3,"AesRng"],[8,R[59]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);