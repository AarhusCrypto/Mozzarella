var N=null,E="",T="t",U="u",searchIndex={};
var R=["fancy_garbling","fancy_garbling::Message","The zero wire-label.","The offset wire-label.","fancy_garbling::Wire","circuit","result","dummyerror","informererror","usize","fancy_garbling::error","fancy_garbling::error::FancyError","FancyError","NotEnoughGarblerInputs","Not enough garbler inputs provided.","NotEnoughEvaluatorInputs","Not enough evaluator inputs provided.","A fancy error has occurred.","CommunicationError","A communication error has occurred.","refcell","informer","print_info","num_garbler_inputs","num_evaluator_inputs","fancy_garbling::circuit","garblererror","evaluatorerror","bundle","option","binarybundle","crtbundle","Returns 1 if `x < y`.","Returns 1 if `x >= y`.","Compute the maximum bundle in `xs`.","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","to_string","fancy_garbling::dummy","string","fancy_garbling::informer","fancy_garbling::static","modulus","garbler_input","circuitref","evaluator_input","constant","dummyval","output","informerval","garbledcircuit","message","fancyerror","senderror","circuitparsererror","formatter","serialize","deserialize","garbler_input_bundle","Crate an input bundle for the garbler using moduli `ps`…","evaluator_input_bundle","Crate an input bundle for the evaluator using moduli `ps`.","constant_bundle","Creates a bundle of constant wires using moduli `ps`.","garbler_input_bundles","Create `n` garbler input bundles, using moduli `ps` and…","evaluator_input_bundles","Create `n` evaluator input bundles, using moduli `ps`.","output_bundle","Output the wires that make up a bundle.","output_bundles","Output a slice of bundles.","add_bundles","Add two wire bundles pairwise, zipping addition.","sub_bundles","Subtract two wire bundles, residue by residue.","mul_bundles","Multiply each wire in `x` with each wire in `y`, pairwise.","mixed_radix_addition","Mixed radix addition.","mixed_radix_addition_msb_only","Mixed radix addition only returning the MSB.","multiplex","If b=0 then return x, else return y.","Shift residues, replacing them with zeros in the modulus…","eq_bundles","Compute `x == y`. Returns a wire encoding the result mod 2.","bin_garbler_input_bundle","Create an input bundle for the garbler using `nbits` base…","bin_evaluator_input_bundle","Create an input bundle for the evaluator using n base 2…","bin_garbler_input_bundles","Create `n` garbler input bundles, each with `nbits` bits…","bin_evaluator_input_bundles","Create `n` evaluator input bundles, each with `nbits` bits.","bin_constant_bundle","Create a constant bundle using base 2 inputs.","Xor the bits of two bundles together pairwise.","And the bits of two bundles together pairwise.","bin_addition","Binary addition. Returns the result and the carry.","bin_addition_no_carry","Binary addition. Avoids creating extra gates for the final…","bin_multiplication_lower_half","Binary multiplication.","bin_twos_complement","Compute the twos complement of the input bundle (which…","bin_subtraction","Subtract two binary bundles. Returns the result and…","bin_multiplex_constant_bits","If `x=0` return `c1` as a bundle of constant bits, else…","Write the constant in binary and that gives you the shift…","Compute the absolute value of a binary bundle.","crt_garbler_input_bundle","Create an input bundle for the garbler using composite CRT…","crt_evaluator_input_bundle","Create an input bundle for the evaluator using composite…","crt_constant_bundle","Creates a bundle of constant wires for the CRT…","crt_garbler_input_bundles","Create `n` garbler input bundles, under composite CRT…","crt_evaluator_input_bundles","Create `n` evaluator input bundles, under composite CRT…","crt_outputs","Output a slice of CRT bundles.","Add two CRT bundles.","Subtract two CRT bundles.","Multiplies each wire in `x` by the corresponding residue…","Multiply `x` with `y`.","Exponentiate `x` by the constant `c`.","Compute the remainder with respect to modulus `p`.","crt_fractional_mixed_radix","Helper function for advanced gadgets, returns the MSB of…","Compute `max(x,0)`.","Return 0 if `x` is positive and 1 if `x` is negative.","Return `if x >= 0 then 1 else -1`, where `-1` is…","garbler_inputs","Create `n` garbler inputs with the moduli `qs` and…","evaluator_inputs","Create `n` evaluator inputs with the moduli `qs`.","Sum up a slice of wires.","Xor is just addition, with the requirement that `x` and…","Negate by xoring `x` with `1`.","And is just multiplication, with the requirement that `x`…","Or uses Demorgan's Rule implemented with multiplication…","Returns 1 if all wires equal 1.","Returns 1 if any wire equals 1.","mod_change","Change the modulus of `x` to `to_modulus` using a…","Binary adder. Returns the result and the carry.","If `b = 0` returns `x` else `y`.","mux_constant_bits","If `x = 0` returns the constant `b1` else return `b2`.…","Output a slice of wires.","CircuitBuilder","DummyError","EvaluatorError","GarblerError","CircuitBuilderError","InformerError","CircuitParserError","BinaryBundle","CrtBundle","Evaluator","GarbledCircuit","GarbledWriter","StaticEvaluator","BundleGadgets","BinaryGadgets","CrtGadgets","HasModulus","CircuitRef","InformerVal"];

searchIndex[R[0]]={"doc":"`fancy-garbling` provides boolean and arithmetic garbling…","i":[[3,"Bundle",R[0],"A collection of wires, useful for the garbled gadgets…",N,N],[3,R[167],E,"Bundle which is explicitly binary representation.",N,N],[3,R[168],E,"Bundle which is explicitly CRT-representation.",N,N],[3,R[169],E,"Streaming evaluator using a callback to receive…",N,N],[3,"Garbler",E,"Streams garbled circuit ciphertexts through a callback.…",N,N],[4,"Message",E,"The outputs that can be emitted by a Garbler and consumed…",N,N],[13,"UnencodedGarblerInput",E,"The zero wire and delta offset for one of the garbler's…",0,N],[12,"zero",R[1],R[2],0,N],[12,"delta",E,R[3],0,N],[13,"UnencodedEvaluatorInput",R[0],"The zero wire and delta offset for one of the evaluator's…",0,N],[12,"zero",R[1],R[2],0,N],[12,"delta",E,R[3],0,N],[4,"Wire",R[0],"The essential wire-label type used by garbled circuits.",N,N],[13,"Mod2",E,"`Mod2` gates are simple 128-bit values.",1,N],[12,"val",R[4],"A 128-bit value.",1,N],[13,"ModN",R[0],"`ModN` gates contain the modulus, provided by `q`, and a…",1,N],[12,"q",R[4],"The modulus of this wire-label.",1,N],[12,"ds",E,"A list of `mod-q` digits.",1,N],[0,R[5],R[0],"DSL for creating circuits compatible with fancy-garbling…",N,N],[3,R[177],R[25],"The index and modulus of a gate in a circuit.",N,N],[3,"Circuit",E,"Static representation of the type of computation supported…",N,N],[3,R[160],E,"CircuitBuilder is used to build circuits.",N,N],[11,"new",E,"Make a new `Circuit` object.",2,[[[R[29],[R[9]]],[R[9]]],[R[5]]]],[11,"eval",E,"Evaluate the circuit using fancy object `f`.",2,[[["f"],["self"]],[["vec"],[R[6],["vec"]]]]],[11,"process_outputs",E,"Process the outputs provided by `outputs` using fancy…",2,[[["f"],["self"]],[R[6]]]],[11,"eval_plain",E,"Evaluate the circuit in plaintext.",2,[[["self"]],[[R[7]],[R[6],["vec",R[7]]],["vec",["u16"]]]]],[11,R[22],E,"Print circuit info.",2,[[["self"]],[[R[8]],[R[6],[R[8]]]]]],[11,R[23],E,"Return the number of garbler inputs.",2,[[["self"]],[R[9]]]],[11,R[24],E,"Return the number of evaluator inputs.",2,[[["self"]],[R[9]]]],[11,"noutputs",E,"Return the number of outputs.",2,[[["self"]],[R[9]]]],[11,R[48],E,"Return the modulus of the gate indexed by `i`.",2,[[["self"],[R[9]]],["u16"]]],[11,"garbler_input_mod",E,"Return the modulus of the garbler input indexed by `i`.",2,[[["self"],[R[9]]],["u16"]]],[11,"evaluator_input_mod",E,"Return the modulus of the evaluator input indexed by `i`.",2,[[["self"],[R[9]]],["u16"]]],[11,"new",E,"Make a new `CircuitBuilder`.",3,[[],["self"]]],[11,"finish",E,"Finish circuit building, outputting the resulting circuit.",3,[[],[R[5]]]],[0,"dummy",R[0],"Dummy implementation of `Fancy`.",N,N],[3,"Dummy",R[44],"Simple struct that performs the fancy computation over…",N,N],[3,"DummyVal",E,"Wrapper around `u16`.",N,N],[11,"new",E,"Create a new Dummy.",4,[[],["dummy"]]],[11,"get_output",E,"Get the output from the fancy computation, consuming the…",4,[[],[["u16"],["vec",["u16"]]]]],[0,"error",R[0],"Errors that may be output by this library.",N,N],[4,R[12],R[10],"Errors that may occur when using the `Fancy` trait. These…",N,N],[13,"UnequalModuli",E,"Unequal moduli.",5,N],[13,"InvalidArg",E,"Invalid argument.",5,N],[13,"InvalidArgNum",E,"Invalid number of arguments.",5,N],[12,"got",R[11],"Received number of arguments.",5,N],[12,"needed",E,"Expected number of arguments.",5,N],[13,"InvalidArgMod",R[10],"Invalid argument modulus.",5,N],[12,"got",R[11],"Received modulus.",5,N],[12,"needed",E,"Expected modulus.",5,N],[13,"ArgNotBinary",R[10],"Expected binary argument.",5,N],[13,"NoTruthTable",E,"Truth table expected but none given.",5,N],[13,"InvalidTruthTable",E,"Projection truth table is invalid.",5,N],[13,"UninitializedValue",E,"Uninitialized value encountered.",5,N],[4,R[161],E,"Errors from the dummy fancy object.",N,N],[13,R[13],E,R[14],6,N],[13,R[15],E,R[16],6,N],[13,R[12],E,R[17],6,N],[4,R[162],E,"Errors from the evaluator.",N,N],[13,R[13],E,R[14],7,N],[13,R[15],E,R[16],7,N],[13,R[18],E,R[19],7,N],[13,R[12],E,R[17],7,N],[4,R[163],E,"Errors from the garbler.",N,N],[13,"MessageError",E,"An error occurred while processing a message.",8,N],[13,R[18],E,R[19],8,N],[13,"AsymmetricHalfGateModuliMax8",E,"Asymmetric moduli error.",8,N],[13,"TruthTableRequired",E,"A truth table was missing.",8,N],[13,R[12],E,R[17],8,N],[4,R[164],E,"Errors emitted when building a circuit.",N,N],[13,R[12],E,R[17],9,N],[4,R[165],E,"Errors emitted when running the informer.",N,N],[13,R[12],E,R[17],10,N],[4,R[166],E,"Errors emitted by the circuit parser.",N,N],[13,"IoError",E,"An I/O error occurred.",11,N],[13,"RegexError",E,"A regular expression parsing error occurred.",11,N],[13,"ParseIntError",E,"An error occurred parsing an integer.",11,N],[13,"ParseLineError",E,"An error occurred parsing a line.",11,N],[13,"ParseGateError",E,"An error occurred parsing a gate type.",11,N],[11,"new",R[0],"Create a new bundle from some wires.",12,[[["vec"]],[R[28]]]],[11,"moduli",E,"Return the moduli of all the wires in the bundle.",12,[[["self"]],[["u16"],["vec",["u16"]]]]],[11,"wires",E,"Extract the wires from this bundle.",12,[[["self"]]]],[11,"size",E,"Get the number of wires in this bundle.",12,[[["self"]],[R[9]]]],[11,"is_binary",E,"Whether this bundle only contains residues in mod 2.",12,[[["self"]],["bool"]]],[11,"with_moduli",E,"Returns a new bundle only containing wires with matching…",12,[[["self"]],[R[28]]]],[11,"pad",E,"Pad the Bundle with val, n times.",12,[[["self"],["w"]]]],[11,"extract",E,"Extract a wire from the Bundle, removing it and returning…",12,[[["self"],[R[9]]],["w"]]],[11,"iter",E,"Access the underlying iterator",12,[[["self"]],["iter"]]],[11,"new",E,"Create a new binary bundle from a vector of wires.",13,[[["vec"]],[R[30]]]],[11,"unwrap",E,"Unwrap the underlying bundle from this binary bundle.",13,[[["self"]],[R[28]]]],[11,"new",E,"Create a new CRT bundle from a vector of wires.",14,[[["vec"]],[R[31]]]],[11,"unwrap",E,"Unwrap the underlying bundle from this CRT bundle.",14,[[["self"]],[R[28]]]],[11,"new",E,"Create a new `Evaluator`.",15,[[["rc",[R[20]]],[R[20]]],["self"]]],[11,"decode_output",E,"Decode the output received during the Fancy computation.",15,[[["self"]],[["u16"],["vec",["u16"]]]]],[11,"new",E,"Create a new garbler.",16,[[[R[20]],["f"],["rng"],["rc",[R[20]]]],["self"]]],[11,"delta",E,"Create a delta if it has not been created yet for this…",16,[[["self"],["u16"]],["wire"]]],[0,R[21],E,"`Informer` runs a fancy computation and learns information…",N,N],[3,"Informer",R[46],"Implements `Fancy`. Used to learn information about a…",N,N],[3,R[178],E,"The item type used by `Informer`. It simply contains the…",N,N],[11,"new",E,"Make a new `Informer`.",17,[[],[R[21]]]],[11,R[22],E,"Print information about the fancy computation.",17,[[["self"]]]],[11,R[23],E,"Number of garbler inputs in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"garbler_input_moduli",E,"Moduli of garbler inputs in the fancy computation.",17,[[["self"]],[["u16"],["vec",["u16"]]]]],[11,R[24],E,"Number of evaluator inputs in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"evaluator_input_moduli",E,"Moduli of evaluator inputs in the fancy computation.",17,[[["self"]],[["u16"],["vec",["u16"]]]]],[11,"num_consts",E,"Number of constants in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_outputs",E,"Number of outputs in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_output_ciphertexts",E,"Number of output ciphertexts.",17,[[["self"]],[R[9]]]],[11,"num_adds",E,"Number of additions in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_subs",E,"Number of subtractions in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_cmuls",E,"Number of scalar multiplications in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_muls",E,"Number of multiplications in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_projs",E,"Number of projections in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"num_ciphertexts",E,"Number of ciphertexts in the fancy computation.",17,[[["self"]],[R[9]]]],[11,"parse",R[25],"Generates a new `Circuit` from file `filename`. The file…",2,[[["str"]],[[R[6],["error"]],["error"]]]],[0,"static",R[0],"Provides objects and functions for statically garbling and…",N,N],[3,R[170],R[47],"Static evaluator for a circuit, created by the `garble`…",N,N],[3,R[171],E,"Implementation of the `Write` trait for use by `Garbler`.",N,N],[3,R[172],E,"Object for statically evaluating a circuit.",N,N],[3,"Encoder",E,"Encode inputs statically.",N,N],[5,"garble",E,"Garble a circuit without streaming.",N,[[[R[5]]],[[R[26]],[R[6],[R[26]]]]]],[11,"new",E,"Create a new object from a vector of garbled gates and…",18,[[["block"],["vec",["block"]]],["self"]]],[11,"size",E,"The number of garbled rows and constant wires in the…",18,[[["self"]],[R[9]]]],[11,"eval",E,"Evaluate the garbled circuit.",18,[[[R[5]],["self"]],[[R[6],["vec",R[27]]],["vec",["u16"]],[R[27]]]]],[11,"new",E,"Make a new `GarbledWriter`.",19,[[[R[29],[R[9]]],[R[9]]],["self"]]],[11,"new",E,"Make a new `StaticEvaluator` object.",20,[[],["self"]]],[11,"new",E,"Make a new `Encoder` from lists of garbler and evaluator…",21,[[["wire"],["hashmap",["u16","wire"]],["u16"],["vec",["wire"]]],["self"]]],[11,R[23],E,"Output the number of garbler inputs.",21,[[["self"]],[R[9]]]],[11,R[24],E,"Output the number of evaluator inputs.",21,[[["self"]],[R[9]]]],[11,"encode_garbler_input",E,"Encode a single garbler input into its associated…",21,[[["u16"],["self"],[R[9]]],["wire"]]],[11,"encode_evaluator_input",E,"Encode a single evaluator input into its associated…",21,[[["u16"],["self"],[R[9]]],["wire"]]],[11,"encode_garbler_inputs",E,"Encode a slice of garbler inputs into their associated…",21,[[["self"]],[["wire"],["vec",["wire"]]]]],[11,"encode_evaluator_inputs",E,"Encode a slice of evaluator inputs into their associated…",21,[[["self"]],[["wire"],["vec",["wire"]]]]],[0,"util",R[0],"Tools useful for interacting with `fancy-garbling`.",N,N],[5,"tweak","fancy_garbling::util",E,N,[[[R[9]]],["block"]]],[5,"tweak2",E,E,N,[[["u64"]],["block"]]],[5,"output_tweak",E,"Compute the output tweak for a garbled gate where i is the…",N,[[["u16"],[R[9]]],["block"]]],[5,"base_q_add_eq",E,"Add two base q numbers together. Add a base q number into…",N,[[["u16"]]]],[5,"as_base_q_u128",E,"Convert `x` into base `q`.",N,[[["u128"],["u16"]],[["u16"],["vec",["u16"]]]]],[5,"from_base_q",E,"Convert little-endian base `q` digits into `u128`.",N,[[["u16"]],["u128"]]],[5,"from_mixed_radix",E,"Convert little-endian mixed radix digits into u128.",N,[[],["u128"]]],[5,"u128_to_bits",E,"Get the bits of a u128 encoded in 128 u16s, which is…",N,[[["u128"],[R[9]]],[["u16"],["vec",["u16"]]]]],[5,"u128_from_bits",E,"Convert into a u128 from the \"bits\" as u16. Assumes each…",N,[[],["u128"]]],[5,"factor",E,"Factor using the primes in the global `PRIMES` array.…",N,[[["u128"]],[["u16"],["vec",["u16"]]]]],[5,"crt_factor",E,"Compute the CRT representation of `x` with respect to the…",N,[[["u128"]],[["u16"],["vec",["u16"]]]]],[5,"crt_inv_factor",E,"Compute the value `x` given a composite CRT modulus…",N,[[["u128"]],["u128"]]],[5,"modulus_with_nprimes",E,"Primes skipping the modulus 2, which allows certain…",N,[[[R[9]]],["u128"]]],[5,"modulus_with_width",E,"Generate a CRT modulus that support at least n-bit…",N,[[["u32"]],["u128"]]],[17,"NPRIMES",E,"Number of primes supported by our library.",N,N],[17,"PRIMES",E,"Primes used in fancy garbling.",N,N],[8,"RngExt",E,"Extra Rng functionality, useful for `fancy-garbling`.",N,N],[11,"gen_bool",E,"Randomly generate a `bool`.",22,[[["self"]],["bool"]]],[11,"gen_u16",E,"Randomly generate a `u16`.",22,[[["self"]],["u16"]]],[11,"gen_u32",E,"Randomly generate a `u32`.",22,[[["self"]],["u32"]]],[11,"gen_u64",E,"Randomly generate a `u64`.",22,[[["self"]],["u64"]]],[11,"gen_usize",E,"Randomly generate a `usize`.",22,[[["self"]],[R[9]]]],[11,"gen_u128",E,"Randomly generate a `u128`.",22,[[["self"]],["u128"]]],[11,"gen_block",E,"Randomly generate a `Block`.",22,[[["self"]],["block"]]],[11,"gen_usable_block",E,"Randomly generate a valid `Block`.",22,[[["self"],["u16"]],["block"]]],[11,"gen_prime",E,"Randomly generate a prime (among the set of supported…",22,[[["self"]],["u16"]]],[11,"gen_modulus",E,"Randomly generate a (supported) modulus.",22,[[["self"]],["u16"]]],[11,"gen_usable_composite_modulus",E,"Randomly generate a valid composite modulus.",22,[[["self"]],["u128"]]],[11,"gen_usable_factors",E,"Randomly generate a vector of valid factor",22,[[["self"]],[["u16"],["vec",["u16"]]]]],[11,"digits",R[0],"Get the digits of the wire.",1,[[["self"]],[["u16"],["vec",["u16"]]]]],[11,"from_block",E,"Get the wire represented by `inp` with modulus `q`.",1,[[["block"],["u16"]],["self"]]],[11,"as_block",E,"Pack the wire to a `Block`.",1,[[["self"]],["block"]]],[11,"zero",E,"The zero wire with modulus `q`.",1,[[["u16"]],["self"]]],[11,"rand_delta",E,"Get a random wire label mod `q`, with the first digit set…",1,[[["r"],["u16"]],["self"]]],[11,"color",E,"Get the color digit of the wire.",1,[[["self"]],["u16"]]],[11,"plus",E,"Add two wires digit-wise, returning a new wire.",1,[[["self"]],["self"]]],[11,"plus_eq",E,"Add another wire into this one, digit-wise mod q.",1,[[["self"],["wire"]],["wire"]]],[11,"plus_mov",E,"Add another wire into this one, consuming it for chained…",1,[[["wire"]],["wire"]]],[11,"cmul",E,"Multiply each digit by a constant c mod q, returning a new…",1,[[["u16"],["self"]],["self"]]],[11,"cmul_eq",E,"Multiply each digit by a constant c mod q.",1,[[["self"],["u16"]],["wire"]]],[11,"cmul_mov",E,"Multiply each digit by a constant c mod q, consuming it…",1,[[["u16"]],["wire"]]],[11,"negate",E,"Negate all the digits mod q, returning a new wire.",1,[[["self"]],["self"]]],[11,"negate_eq",E,"Negate all the digits mod q.",1,[[["self"]],["wire"]]],[11,"negate_mov",E,"Negate all the digits mod q, consuming it for chained…",1,[[],["wire"]]],[11,"minus",E,"Subtract two wires, returning the result.",1,[[["self"],["wire"]],["wire"]]],[11,"minus_eq",E,"Subtract a wire from this one.",1,[[["self"],["wire"]],["wire"]]],[11,"minus_mov",E,"Subtract a wire from this one, consuming it for chained…",1,[[["wire"]],["wire"]]],[11,"rand",E,"Get a random wire mod q.",1,[[["r"],["u16"]],["wire"]]],[11,"hash",E,"Compute the hash of this wire.",1,[[["block"],["self"]],["block"]]],[11,"hashback",E,"Compute the hash of this wire, converting the result back…",1,[[["block"],["u16"],["self"]],["wire"]]],[8,R[173],E,"Extension trait for Fancy which provides Bundle…",N,N],[11,R[64],E,R[65],23,[[[R[29],["vec"]],["self"],["vec",["u16"]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[66],E,R[67],23,[[["self"]],[[R[28]],[R[6],[R[28]]]]]],[11,R[68],E,R[69],23,[[["self"]],[[R[28]],[R[6],[R[28]]]]]],[11,R[70],E,R[71],23,[[["self"],["vec",["vec"]],[R[29],["vec"]],[R[9]]],[["vec",[R[28]]],[R[6],["vec"]]]]],[11,R[72],E,R[73],23,[[["self"],[R[9]]],[["vec",[R[28]]],[R[6],["vec"]]]]],[11,R[74],E,R[75],23,[[["self"],[R[28]]],[R[6]]]],[11,R[76],E,R[77],23,[[["self"]],[R[6]]]],[11,R[78],E,R[79],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[80],E,R[81],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[82],E,R[83],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[84],E,R[85],23,[[["self"]],[[R[28]],[R[6],[R[28]]]]]],[11,R[86],E,R[87],23,[[["self"]],[R[6]]]],[11,R[88],E,R[89],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,"shift",E,R[90],23,[[["self"],[R[28]],[R[9]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[91],E,R[92],23,[[["self"],[R[28]]],[R[6]]]],[8,R[174],E,"Extension trait for `Fancy` providing gadgets that operate…",N,N],[11,R[93],E,R[94],24,[[["self"],["u128"],[R[29],["u128"]],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,R[95],E,R[96],24,[[["self"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,R[97],E,R[98],24,[[[R[29],["vec"]],["self"],["vec",["u128"]],[R[9]]],[[R[6],["vec"]],["vec",[R[30]]]]]],[11,R[99],E,R[100],24,[[["self"],[R[9]]],[[R[6],["vec"]],["vec",[R[30]]]]]],[11,R[101],E,R[102],24,[[["self"],["u128"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_xor",E,R[103],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_and",E,R[104],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[105],E,R[106],24,[[[R[30]],["self"]],[R[6]]]],[11,R[107],E,R[108],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[109],E,R[110],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[111],E,R[112],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[113],E,R[114],24,[[[R[30]],["self"]],[R[6]]]],[11,R[115],E,R[116],24,[[["self"],["u128"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_cmul",E,R[117],24,[[[R[30]],["self"],["u128"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_abs",E,R[118],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_lt",E,R[32],24,[[[R[30]],["self"]],[R[6]]]],[11,"bin_geq",E,R[33],24,[[[R[30]],["self"]],[R[6]]]],[11,"bin_max",E,R[34],24,[[["self"]],[[R[6],[R[30]]],[R[30]]]]],[8,R[175],E,"Extension trait for `Fancy` providing advanced CRT gadgets…",N,N],[11,R[119],E,R[120],25,[[["self"],["u128"],[R[29],["u128"]]],[[R[31]],[R[6],[R[31]]]]]],[11,R[121],E,R[122],25,[[["self"],["u128"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[123],E,R[124],25,[[["self"],["u128"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[125],E,R[126],25,[[[R[29],["vec"]],["self"],["u128"],["vec",["u128"]],[R[9]]],[[R[6],["vec"]],["vec",[R[31]]]]]],[11,R[127],E,R[128],25,[[["self"],["u128"],[R[9]]],[[R[6],["vec"]],["vec",[R[31]]]]]],[11,R[129],E,R[130],25,[[["self"]],[R[6]]]],[11,"crt_add",E,R[131],25,[[[R[31]],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_sub",E,R[132],25,[[[R[31]],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_cmul",E,R[133],25,[[[R[31]],["self"],["u128"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_mul",E,R[134],25,[[[R[31]],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_cexp",E,R[135],25,[[[R[31]],["self"],["u16"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_rem",E,R[136],25,[[[R[31]],["self"],["u16"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[137],E,R[138],25,[[[R[31]],["self"]],[R[6]]]],[11,"crt_relu",E,R[139],25,[[["str"],[R[31]],["self"],[R[29]]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_sign",E,R[140],25,[[["str"],[R[31]],["self"]],[R[6]]]],[11,"crt_sgn",E,R[141],25,[[["str"],[R[31]],["self"],[R[29]]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_lt",E,R[32],25,[[["str"],[R[31]],["self"]],[R[6]]]],[11,"crt_geq",E,R[33],25,[[["str"],[R[31]],["self"]],[R[6]]]],[11,"crt_max",E,R[34],25,[[["str"],["self"]],[[R[31]],[R[6],[R[31]]]]]],[8,R[176],E,"An object that has some modulus. Basic object of `Fancy`…",N,N],[10,R[48],E,"The modulus of the wire.",26,[[["self"]],["u16"]]],[8,"Fancy",E,"DSL for the basic computations supported by…",N,N],[16,"Item",E,"The underlying wire datatype created by an object…",27,N],[16,"Error",E,"Errors which may be thrown by the users of Fancy.",27,N],[10,R[49],E,"Create an input for the garbler with modulus `q` and…",27,[[["self"],["u16"],[R[29],["u16"]]],[R[6]]]],[10,R[51],E,"Create an input for the evaluator with modulus `q`.",27,[[["self"],["u16"]],[R[6]]]],[10,R[52],E,"Create a constant `x` with modulus `q`.",27,[[["self"],["u16"]],[R[6]]]],[10,"add",E,"Add `x` and `y`.",27,[[["self"]],[R[6]]]],[10,"sub",E,"Subtract `x` and `y`.",27,[[["self"]],[R[6]]]],[10,"cmul",E,"Multiply `x` times the constant `c`.",27,[[["self"],["u16"]],[R[6]]]],[10,"mul",E,"Multiply `x` and `y`.",27,[[["self"]],[R[6]]]],[10,"proj",E,"Project `x` according to the truth table `tt`. Resulting…",27,[[[R[29],["vec"]],["self"],["u16"],["vec",["u16"]]],[R[6]]]],[10,R[54],E,"Process this wire as output.",27,[[["self"]],[R[6]]]],[11,R[142],E,R[143],27,[[[R[29],["vec"]],["self"],["vec",["u16"]]],[[R[6],["vec"]],["vec"]]]],[11,R[144],E,R[145],27,[[["self"]],[[R[6],["vec"]],["vec"]]]],[11,"add_many",E,R[146],27,[[["self"]],[R[6]]]],[11,"xor",E,R[147],27,[[["self"]],[R[6]]]],[11,"negate",E,R[148],27,[[["self"]],[R[6]]]],[11,"and",E,R[149],27,[[["self"]],[R[6]]]],[11,"or",E,R[150],27,[[["self"]],[R[6]]]],[11,"and_many",E,R[151],27,[[["self"]],[R[6]]]],[11,"or_many",E,R[152],27,[[["self"]],[R[6]]]],[11,R[153],E,R[154],27,[[["self"],["u16"]],[R[6]]]],[11,"adder",E,R[155],27,[[["self"],[R[29]]],[R[6]]]],[11,"mux",E,R[156],27,[[["self"]],[R[6]]]],[11,R[157],E,R[158],27,[[["self"],["bool"]],[R[6]]]],[11,"outputs",E,R[159],27,[[["self"]],[R[6]]]],[11,R[35],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[[T],["self"]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[37],E,E,12,[[[U]],[R[6]]]],[11,R[41],E,E,12,[[["self"]],[T]]],[11,R[40],E,E,12,[[["self"]],[R[42]]]],[11,R[38],E,E,12,[[["self"]],[T]]],[11,R[39],E,E,12,[[],[R[6]]]],[11,R[35],E,E,13,[[["self"]],[T]]],[11,R[36],E,E,13,[[[T],["self"]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[37],E,E,13,[[[U]],[R[6]]]],[11,R[41],E,E,13,[[["self"]],[T]]],[11,R[40],E,E,13,[[["self"]],[R[42]]]],[11,R[38],E,E,13,[[["self"]],[T]]],[11,R[39],E,E,13,[[],[R[6]]]],[11,R[35],E,E,14,[[["self"]],[T]]],[11,R[36],E,E,14,[[[T],["self"]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[37],E,E,14,[[[U]],[R[6]]]],[11,R[41],E,E,14,[[["self"]],[T]]],[11,R[40],E,E,14,[[["self"]],[R[42]]]],[11,R[38],E,E,14,[[["self"]],[T]]],[11,R[39],E,E,14,[[],[R[6]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[37],E,E,15,[[[U]],[R[6]]]],[11,R[41],E,E,15,[[["self"]],[T]]],[11,R[40],E,E,15,[[["self"]],[R[42]]]],[11,R[38],E,E,15,[[["self"]],[T]]],[11,R[39],E,E,15,[[],[R[6]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[37],E,E,16,[[[U]],[R[6]]]],[11,R[41],E,E,16,[[["self"]],[T]]],[11,R[40],E,E,16,[[["self"]],[R[42]]]],[11,R[38],E,E,16,[[["self"]],[T]]],[11,R[39],E,E,16,[[],[R[6]]]],[11,R[35],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[[T],["self"]]]],[11,R[43],E,E,0,[[["self"]],[R[45]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[37],E,E,0,[[[U]],[R[6]]]],[11,R[41],E,E,0,[[["self"]],[T]]],[11,R[40],E,E,0,[[["self"]],[R[42]]]],[11,R[38],E,E,0,[[["self"]],[T]]],[11,R[39],E,E,0,[[],[R[6]]]],[11,R[35],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[37],E,E,1,[[[U]],[R[6]]]],[11,R[41],E,E,1,[[["self"]],[T]]],[11,R[40],E,E,1,[[["self"]],[R[42]]]],[11,R[38],E,E,1,[[["self"]],[T]]],[11,R[39],E,E,1,[[],[R[6]]]],[11,R[35],R[25],E,28,[[["self"]],[T]]],[11,R[36],E,E,28,[[[T],["self"]]]],[11,R[43],E,E,28,[[["self"]],[R[45]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[],[U]]],[11,R[37],E,E,28,[[[U]],[R[6]]]],[11,R[41],E,E,28,[[["self"]],[T]]],[11,R[40],E,E,28,[[["self"]],[R[42]]]],[11,R[38],E,E,28,[[["self"]],[T]]],[11,R[39],E,E,28,[[],[R[6]]]],[11,R[35],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[[T],["self"]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[37],E,E,2,[[[U]],[R[6]]]],[11,R[41],E,E,2,[[["self"]],[T]]],[11,R[40],E,E,2,[[["self"]],[R[42]]]],[11,R[38],E,E,2,[[["self"]],[T]]],[11,R[39],E,E,2,[[],[R[6]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[37],E,E,3,[[[U]],[R[6]]]],[11,R[41],E,E,3,[[["self"]],[T]]],[11,R[40],E,E,3,[[["self"]],[R[42]]]],[11,R[38],E,E,3,[[["self"]],[T]]],[11,R[39],E,E,3,[[],[R[6]]]],[11,"from",R[44],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[37],E,E,4,[[[U]],[R[6]]]],[11,R[41],E,E,4,[[["self"]],[T]]],[11,R[40],E,E,4,[[["self"]],[R[42]]]],[11,R[38],E,E,4,[[["self"]],[T]]],[11,R[39],E,E,4,[[],[R[6]]]],[11,R[35],E,E,29,[[["self"]],[T]]],[11,R[36],E,E,29,[[[T],["self"]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[37],E,E,29,[[[U]],[R[6]]]],[11,R[41],E,E,29,[[["self"]],[T]]],[11,R[40],E,E,29,[[["self"]],[R[42]]]],[11,R[38],E,E,29,[[["self"]],[T]]],[11,R[39],E,E,29,[[],[R[6]]]],[11,R[43],R[10],E,5,[[["self"]],[R[45]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[37],E,E,5,[[[U]],[R[6]]]],[11,R[41],E,E,5,[[["self"]],[T]]],[11,R[40],E,E,5,[[["self"]],[R[42]]]],[11,R[38],E,E,5,[[["self"]],[T]]],[11,R[39],E,E,5,[[],[R[6]]]],[11,R[43],E,E,6,[[["self"]],[R[45]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[37],E,E,6,[[[U]],[R[6]]]],[11,R[41],E,E,6,[[["self"]],[T]]],[11,R[40],E,E,6,[[["self"]],[R[42]]]],[11,R[38],E,E,6,[[["self"]],[T]]],[11,R[39],E,E,6,[[],[R[6]]]],[11,R[43],E,E,7,[[["self"]],[R[45]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[37],E,E,7,[[[U]],[R[6]]]],[11,R[41],E,E,7,[[["self"]],[T]]],[11,R[40],E,E,7,[[["self"]],[R[42]]]],[11,R[38],E,E,7,[[["self"]],[T]]],[11,R[39],E,E,7,[[],[R[6]]]],[11,R[43],E,E,8,[[["self"]],[R[45]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[37],E,E,8,[[[U]],[R[6]]]],[11,R[41],E,E,8,[[["self"]],[T]]],[11,R[40],E,E,8,[[["self"]],[R[42]]]],[11,R[38],E,E,8,[[["self"]],[T]]],[11,R[39],E,E,8,[[],[R[6]]]],[11,R[43],E,E,9,[[["self"]],[R[45]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[37],E,E,9,[[[U]],[R[6]]]],[11,R[41],E,E,9,[[["self"]],[T]]],[11,R[40],E,E,9,[[["self"]],[R[42]]]],[11,R[38],E,E,9,[[["self"]],[T]]],[11,R[39],E,E,9,[[],[R[6]]]],[11,R[43],E,E,10,[[["self"]],[R[45]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[37],E,E,10,[[[U]],[R[6]]]],[11,R[41],E,E,10,[[["self"]],[T]]],[11,R[40],E,E,10,[[["self"]],[R[42]]]],[11,R[38],E,E,10,[[["self"]],[T]]],[11,R[39],E,E,10,[[],[R[6]]]],[11,R[43],E,E,11,[[["self"]],[R[45]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[37],E,E,11,[[[U]],[R[6]]]],[11,R[41],E,E,11,[[["self"]],[T]]],[11,R[40],E,E,11,[[["self"]],[R[42]]]],[11,R[38],E,E,11,[[["self"]],[T]]],[11,R[39],E,E,11,[[],[R[6]]]],[11,"from",R[46],E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[37],E,E,17,[[[U]],[R[6]]]],[11,R[41],E,E,17,[[["self"]],[T]]],[11,R[40],E,E,17,[[["self"]],[R[42]]]],[11,R[38],E,E,17,[[["self"]],[T]]],[11,R[39],E,E,17,[[],[R[6]]]],[11,R[35],E,E,30,[[["self"]],[T]]],[11,R[36],E,E,30,[[[T],["self"]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[37],E,E,30,[[[U]],[R[6]]]],[11,R[41],E,E,30,[[["self"]],[T]]],[11,R[40],E,E,30,[[["self"]],[R[42]]]],[11,R[38],E,E,30,[[["self"]],[T]]],[11,R[39],E,E,30,[[],[R[6]]]],[11,"from",R[47],E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[37],E,E,18,[[[U]],[R[6]]]],[11,R[41],E,E,18,[[["self"]],[T]]],[11,R[40],E,E,18,[[["self"]],[R[42]]]],[11,R[38],E,E,18,[[["self"]],[T]]],[11,R[39],E,E,18,[[],[R[6]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[37],E,E,19,[[[U]],[R[6]]]],[11,R[41],E,E,19,[[["self"]],[T]]],[11,R[40],E,E,19,[[["self"]],[R[42]]]],[11,R[38],E,E,19,[[["self"]],[T]]],[11,R[39],E,E,19,[[],[R[6]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[37],E,E,20,[[[U]],[R[6]]]],[11,R[41],E,E,20,[[["self"]],[T]]],[11,R[40],E,E,20,[[["self"]],[R[42]]]],[11,R[38],E,E,20,[[["self"]],[T]]],[11,R[39],E,E,20,[[],[R[6]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[37],E,E,21,[[[U]],[R[6]]]],[11,R[41],E,E,21,[[["self"]],[T]]],[11,R[40],E,E,21,[[["self"]],[R[42]]]],[11,R[38],E,E,21,[[["self"]],[T]]],[11,R[39],E,E,21,[[],[R[6]]]],[11,R[48],R[25],E,28,[[["self"]],["u16"]]],[11,R[48],R[44],E,29,[[["self"]],["u16"]]],[11,R[48],R[46],E,30,[[["self"]],["u16"]]],[11,R[48],R[0],E,1,[[["self"]],["u16"]]],[11,R[49],R[25],E,3,[[["self"],["u16"],[R[29],["u16"]]],[[R[6],[R[50]]],[R[50]]]]],[11,R[51],E,E,3,[[["self"],["u16"]],[[R[6],[R[50]]],[R[50]]]]],[11,R[52],E,E,3,[[["self"],["u16"]],[[R[6],[R[50]]],[R[50]]]]],[11,"add",E,E,3,[[["self"],[R[50]]],[[R[6],[R[50]]],[R[50]]]]],[11,"sub",E,E,3,[[["self"],[R[50]]],[[R[6],[R[50]]],[R[50]]]]],[11,"cmul",E,E,3,[[["self"],["u16"],[R[50]]],[[R[6],[R[50]]],[R[50]]]]],[11,"proj",E,E,3,[[[R[29],["vec"]],["self"],["u16"],[R[50]],["vec",["u16"]]],[[R[6],[R[50]]],[R[50]]]]],[11,"mul",E,E,3,[[["self"],[R[50]]],[[R[6],[R[50]]],[R[50]]]]],[11,R[54],E,E,3,[[["self"],[R[50]]],[R[6]]]],[11,R[49],R[44],E,4,[[["self"],["u16"],[R[29],["u16"]]],[[R[53]],[R[6],[R[53]]]]]],[11,R[51],E,E,4,[[["self"],["u16"]],[[R[53]],[R[6],[R[53]]]]]],[11,R[52],E,E,4,[[["self"],["u16"]],[[R[53]],[R[6],[R[53]]]]]],[11,"add",E,E,4,[[["self"],[R[53]]],[[R[53]],[R[6],[R[53]]]]]],[11,"sub",E,E,4,[[["self"],[R[53]]],[[R[53]],[R[6],[R[53]]]]]],[11,"cmul",E,E,4,[[["self"],["u16"],[R[53]]],[[R[53]],[R[6],[R[53]]]]]],[11,"mul",E,E,4,[[["self"],[R[53]]],[[R[53]],[R[6],[R[53]]]]]],[11,"proj",E,E,4,[[[R[29],["vec"]],["self"],["u16"],["vec",["u16"]],[R[53]]],[[R[53]],[R[6],[R[53]]]]]],[11,R[54],E,E,4,[[["self"],[R[53]]],[R[6]]]],[11,R[49],R[0],E,15,[[["self"],["u16"],[R[29],["u16"]]],[R[6]]]],[11,R[51],E,E,15,[[["self"],["u16"]],[R[6]]]],[11,R[52],E,E,15,[[["self"],["u16"]],[["wire"],[R[6],["wire",R[27]]],[R[27]]]]],[11,"add",E,E,15,[[["self"],["wire"]],[["wire"],[R[6],["wire",R[27]]],[R[27]]]]],[11,"sub",E,E,15,[[["self"],["wire"]],[["wire"],[R[6],["wire",R[27]]],[R[27]]]]],[11,"cmul",E,E,15,[[["self"],["u16"],["wire"]],[["wire"],[R[6],["wire",R[27]]],[R[27]]]]],[11,"mul",E,E,15,[[["self"],["wire"]],[["wire"],[R[6],["wire",R[27]]],[R[27]]]]],[11,"proj",E,E,15,[[[R[29],["vec"]],["self"],["u16"],["vec",["u16"]],["wire"]],[["wire"],[R[6],["wire",R[27]]],[R[27]]]]],[11,R[54],E,E,15,[[["self"],["wire"]],[[R[6],[R[27]]],[R[27]]]]],[11,R[49],E,E,16,[[["self"],["u16"],[R[29],["u16"]]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,R[51],E,E,16,[[["self"],["u16"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,R[52],E,E,16,[[["self"],["u16"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,"add",E,E,16,[[["self"],["wire"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,"sub",E,E,16,[[["self"],["wire"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,"cmul",E,E,16,[[["self"],["u16"],["wire"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,"mul",E,E,16,[[["self"],["wire"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,"proj",E,E,16,[[[R[29],["vec"]],["self"],["u16"],["vec",["u16"]],["wire"]],[[R[6],["wire",R[26]]],["wire"],[R[26]]]]],[11,R[54],E,E,16,[[["self"],["wire"]],[[R[6],[R[26]]],[R[26]]]]],[11,R[49],R[46],E,17,[[["self"],["u16"],[R[29],["u16"]]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,R[51],E,E,17,[[["self"],["u16"]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,R[52],E,E,17,[[["self"],["u16"]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,"add",E,E,17,[[["self"],[R[55]]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,"sub",E,E,17,[[["self"],[R[55]]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,"cmul",E,E,17,[[["self"],[R[55]],["u16"]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,"mul",E,E,17,[[["self"],[R[55]]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,"proj",E,E,17,[[[R[29],["vec"]],["self"],[R[55]],["u16"],["vec",["u16"]]],[[R[55]],[R[6],[R[55],R[8]]],[R[8]]]]],[11,R[54],E,E,17,[[["self"],[R[55]]],[[R[8]],[R[6],[R[8]]]]]],[11,R[49],R[47],E,20,[[["self"],["u16"],[R[29],["u16"]]],[R[6]]]],[11,R[51],E,E,20,[[["self"],["u16"]],[R[6]]]],[11,R[52],E,E,20,[[["self"],["u16"]],[R[6]]]],[11,"add",E,E,20,[[["self"]],[R[6]]]],[11,"sub",E,E,20,[[["self"]],[R[6]]]],[11,"mul",E,E,20,[[["self"]],[R[6]]]],[11,"cmul",E,E,20,[[["self"],["u16"]],[R[6]]]],[11,"proj",E,E,20,[[[R[29],["vec"]],["self"],["u16"],["vec",["u16"]]],[R[6]]]],[11,R[54],E,E,20,[[["self"]],[R[6]]]],[11,"eq",R[25],E,28,[[[R[50]],["self"]],["bool"]]],[11,"ne",E,E,28,[[[R[50]],["self"]],["bool"]]],[11,"eq",E,E,2,[[[R[5]],["self"]],["bool"]]],[11,"ne",E,E,2,[[[R[5]],["self"]],["bool"]]],[11,"eq",R[0],E,0,[[["self"],[R[57]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[57]]],["bool"]]],[11,"eq",R[47],E,18,[[[R[56]],["self"]],["bool"]]],[11,"ne",E,E,18,[[[R[56]],["self"]],["bool"]]],[11,"eq",E,E,21,[[["encoder"],["self"]],["bool"]]],[11,"ne",E,E,21,[[["encoder"],["self"]],["bool"]]],[11,"eq",R[0],E,1,[[["self"],["wire"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["wire"]],["bool"]]],[11,"clone",R[25],E,28,[[["self"]],[R[50]]]],[11,"clone",E,E,2,[[["self"]],[R[5]]]],[11,"clone",R[44],E,29,[[["self"]],[R[53]]]],[11,"clone",R[0],E,12,[[["self"]],[R[28]]]],[11,"clone",E,E,13,[[["self"]],[R[30]]]],[11,"clone",E,E,14,[[["self"]],[R[31]]]],[11,"clone",E,E,0,[[["self"]],[R[57]]]],[11,"clone",R[46],E,30,[[["self"]],[R[55]]]],[11,"clone",R[0],E,1,[[["self"]],["wire"]]],[11,"default",E,E,1,[[],["self"]]],[11,"from",R[10],E,6,[[[R[58]]],[R[7]]]],[11,"from",E,E,7,[[[R[58]]],["self"]]],[11,"from",E,E,7,[[["error"]],["self"]]],[11,"from",E,E,7,[[["recverror"]],["self"]]],[11,"from",E,E,8,[[[R[58]]],["self"]]],[11,"from",E,E,8,[[["error"]],["self"]]],[11,"from",E,E,8,[[[R[59],[R[57]]],[R[57]]],["self"]]],[11,"from",E,E,8,[[[R[59],["vec"]],["vec",["block"]]],["self"]]],[11,"from",E,E,9,[[[R[58]]],["self"]]],[11,"from",E,E,10,[[[R[58]]],[R[8]]]],[11,"from",E,E,11,[[["error"]],[R[60]]]],[11,"from",E,E,11,[[["error"]],[R[60]]]],[11,"from",E,E,11,[[["parseinterror"]],[R[60]]]],[11,"fmt",R[25],E,28,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,2,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[44],E,29,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[10],E,5,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,6,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,7,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,8,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,9,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,10,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,11,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[0],E,0,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[46],E,30,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[47],E,18,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,19,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",E,E,21,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[0],E,1,[[[R[61]],["self"]],[R[6]]]],[11,"deref",E,E,13,[[["self"]],[R[28]]]],[11,"deref",E,E,14,[[["self"]],[R[28]]]],[11,"index",E,E,12,[[["self"],[R[9]]]]],[11,"fmt",R[25],E,28,[[[R[61]],["self"]],[R[6]]]],[11,"fmt",R[10],E,5,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",E,E,6,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",E,E,7,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",E,E,8,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",E,E,9,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",E,E,10,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",E,E,11,[[["self"],[R[61]]],[R[6]]]],[11,"fmt",R[0],E,0,[[[R[61]],["self"]],[R[6]]]],[11,"write",R[47],E,19,[[["self"]],[[R[6],[R[9]]],[R[9]]]]],[11,"flush",E,E,19,[[["self"]],[R[6]]]],[11,R[62],R[25],E,28,[[["__s"],["self"]],[R[6]]]],[11,R[62],E,E,2,[[["__s"],["self"]],[R[6]]]],[11,R[62],R[0],E,0,[[["__s"],["self"]],[R[6]]]],[11,R[62],R[47],E,18,[[["__s"],["self"]],[R[6]]]],[11,R[62],E,E,21,[[["__s"],["self"]],[R[6]]]],[11,R[62],R[0],E,1,[[["__s"],["self"]],[R[6]]]],[11,R[63],R[25],E,28,[[["__d"]],[R[6]]]],[11,R[63],E,E,2,[[["__d"]],[R[6]]]],[11,R[63],R[0],E,0,[[["__d"]],[R[6]]]],[11,R[63],R[47],E,18,[[["__d"]],[R[6]]]],[11,R[63],E,E,21,[[["__d"]],[R[6]]]],[11,R[63],R[0],E,1,[[["__d"]],[R[6]]]],[11,R[64],E,R[65],23,[[[R[29],["vec"]],["self"],["vec",["u16"]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[66],E,R[67],23,[[["self"]],[[R[28]],[R[6],[R[28]]]]]],[11,R[68],E,R[69],23,[[["self"]],[[R[28]],[R[6],[R[28]]]]]],[11,R[70],E,R[71],23,[[["self"],["vec",["vec"]],[R[29],["vec"]],[R[9]]],[["vec",[R[28]]],[R[6],["vec"]]]]],[11,R[72],E,R[73],23,[[["self"],[R[9]]],[["vec",[R[28]]],[R[6],["vec"]]]]],[11,R[74],E,R[75],23,[[["self"],[R[28]]],[R[6]]]],[11,R[76],E,R[77],23,[[["self"]],[R[6]]]],[11,R[78],E,R[79],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[80],E,R[81],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[82],E,R[83],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[84],E,R[85],23,[[["self"]],[[R[28]],[R[6],[R[28]]]]]],[11,R[86],E,R[87],23,[[["self"]],[R[6]]]],[11,R[88],E,R[89],23,[[["self"],[R[28]]],[[R[28]],[R[6],[R[28]]]]]],[11,"shift",E,R[90],23,[[["self"],[R[28]],[R[9]]],[[R[28]],[R[6],[R[28]]]]]],[11,R[91],E,R[92],23,[[["self"],[R[28]]],[R[6]]]],[11,R[93],E,R[94],24,[[["self"],["u128"],[R[29],["u128"]],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,R[95],E,R[96],24,[[["self"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,R[97],E,R[98],24,[[[R[29],["vec"]],["self"],["vec",["u128"]],[R[9]]],[[R[6],["vec"]],["vec",[R[30]]]]]],[11,R[99],E,R[100],24,[[["self"],[R[9]]],[[R[6],["vec"]],["vec",[R[30]]]]]],[11,R[101],E,R[102],24,[[["self"],["u128"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_xor",E,R[103],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_and",E,R[104],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[105],E,R[106],24,[[[R[30]],["self"]],[R[6]]]],[11,R[107],E,R[108],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[109],E,R[110],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[111],E,R[112],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[113],E,R[114],24,[[[R[30]],["self"]],[R[6]]]],[11,R[115],E,R[116],24,[[["self"],["u128"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_cmul",E,R[117],24,[[[R[30]],["self"],["u128"],[R[9]]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_abs",E,R[118],24,[[[R[30]],["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,"bin_lt",E,R[32],24,[[[R[30]],["self"]],[R[6]]]],[11,"bin_geq",E,R[33],24,[[[R[30]],["self"]],[R[6]]]],[11,"bin_max",E,R[34],24,[[["self"]],[[R[6],[R[30]]],[R[30]]]]],[11,R[119],E,R[120],25,[[["self"],["u128"],[R[29],["u128"]]],[[R[31]],[R[6],[R[31]]]]]],[11,R[121],E,R[122],25,[[["self"],["u128"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[123],E,R[124],25,[[["self"],["u128"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[125],E,R[126],25,[[[R[29],["vec"]],["self"],["u128"],["vec",["u128"]],[R[9]]],[[R[6],["vec"]],["vec",[R[31]]]]]],[11,R[127],E,R[128],25,[[["self"],["u128"],[R[9]]],[[R[6],["vec"]],["vec",[R[31]]]]]],[11,R[129],E,R[130],25,[[["self"]],[R[6]]]],[11,"crt_add",E,R[131],25,[[[R[31]],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_sub",E,R[132],25,[[[R[31]],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_cmul",E,R[133],25,[[[R[31]],["self"],["u128"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_mul",E,R[134],25,[[[R[31]],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_cexp",E,R[135],25,[[[R[31]],["self"],["u16"]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_rem",E,R[136],25,[[[R[31]],["self"],["u16"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[137],E,R[138],25,[[[R[31]],["self"]],[R[6]]]],[11,"crt_relu",E,R[139],25,[[["str"],[R[31]],["self"],[R[29]]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_sign",E,R[140],25,[[["str"],[R[31]],["self"]],[R[6]]]],[11,"crt_sgn",E,R[141],25,[[["str"],[R[31]],["self"],[R[29]]],[[R[31]],[R[6],[R[31]]]]]],[11,"crt_lt",E,R[32],25,[[["str"],[R[31]],["self"]],[R[6]]]],[11,"crt_geq",E,R[33],25,[[["str"],[R[31]],["self"]],[R[6]]]],[11,"crt_max",E,R[34],25,[[["str"],["self"]],[[R[31]],[R[6],[R[31]]]]]],[11,R[142],E,R[143],27,[[[R[29],["vec"]],["self"],["vec",["u16"]]],[[R[6],["vec"]],["vec"]]]],[11,R[144],E,R[145],27,[[["self"]],[[R[6],["vec"]],["vec"]]]],[11,"add_many",E,R[146],27,[[["self"]],[R[6]]]],[11,"xor",E,R[147],27,[[["self"]],[R[6]]]],[11,"negate",E,R[148],27,[[["self"]],[R[6]]]],[11,"and",E,R[149],27,[[["self"]],[R[6]]]],[11,"or",E,R[150],27,[[["self"]],[R[6]]]],[11,"and_many",E,R[151],27,[[["self"]],[R[6]]]],[11,"or_many",E,R[152],27,[[["self"]],[R[6]]]],[11,R[153],E,R[154],27,[[["self"],["u16"]],[R[6]]]],[11,"adder",E,R[155],27,[[["self"],[R[29]]],[R[6]]]],[11,"mux",E,R[156],27,[[["self"]],[R[6]]]],[11,R[157],E,R[158],27,[[["self"],["bool"]],[R[6]]]],[11,"outputs",E,R[159],27,[[["self"]],[R[6]]]]],"p":[[4,"Message"],[4,"Wire"],[3,"Circuit"],[3,R[160]],[3,"Dummy"],[4,R[12]],[4,R[161]],[4,R[162]],[4,R[163]],[4,R[164]],[4,R[165]],[4,R[166]],[3,"Bundle"],[3,R[167]],[3,R[168]],[3,R[169]],[3,"Garbler"],[3,"Informer"],[3,R[170]],[3,R[171]],[3,R[172]],[3,"Encoder"],[8,"RngExt"],[8,R[173]],[8,R[174]],[8,R[175]],[8,R[176]],[8,"Fancy"],[3,R[177]],[3,"DummyVal"],[3,R[178]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);