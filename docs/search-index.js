var N=null,E="",T="t",U="u",searchIndex={};
var R=["encrypt","block","usize","scuttlebutt","HashChannel","An instantiation of the `AbstractChannel` trait which…","SyncChannel","A channel that implements `AbstractChannel` as well as…","TrackChannel","A channel for tracking the number of bits read/written.","track_unix_channel_pair","Convenience function to create a pair of TrackUnixChannels…","unix_channel_pair","Convenience function to create a pair of UnixChannels for…","scuttlebutt::channel","result","block512","ristrettopoint","Make a new `Channel` from a `reader` and a `writer`.","refcell","TrackUnixChannel","A TrackChannel which uses UnixStreams.","UnixChannel","A SyncChannel which uses UnixStreams.","A marker trait denoting that the given scheme is…","to_owned","clone_into","try_from","try_into","borrow_mut","into_bits","from_cast","from_bits","type_id","to_string","initialize","borrow","typeid","scuttlebutt::bloomfilter","scuttlebutt::cointoss","scuttlebutt::commitment","write_bytes","read_bytes","default","ordering","bloomfilter","partial_cmp","formatter","bitxor_assign","Block512","BloomFilter","AbstractChannel","ShaCommitment","Commitment","ocelot::oprf","Receiver","Runs any one-time initialization.","ocelot::ot","Sender","Oblivious transfer sender.","Oblivious transfer receiver.","Trait for one-out-of-two oblivious transfer from the…","Message type, restricted to types that are…","Runs any one-time initialization to create the oblivious…","receive","Trait for one-out-of-two correlated oblivious transfer…","Trait for one-out-of-two random oblivious transfer from…","ocelot::oprf::kkrt","ocelot::oprf::kmprt","ocelot::ot::alsz","ocelot::ot::chou_orlandi","string","ocelot::ot::dummy","ocelot::ot::kos","ocelot::ot::naor_pinkas","send_correlated","receive_correlated","send_random","receive_random","ocelot","ObliviousPrf","CorrelatedSender","CorrelatedReceiver","RandomSender","RandomReceiver","fancy_garbling","fancy_garbling::Wire","dummyerror","circuit","circuitref","Get a vec of CircuitRefs for garbler inputs.","crtbundle","binarybundle","garblererror","evaluatorerror","num_garbler_inputs","num_evaluator_inputs","fancy_garbling::errors","fancy_garbling::errors::FancyError","FancyError","NotEnoughGarblerInputs","Not enough garbler inputs provided.","NotEnoughEvaluatorInputs","Not enough evaluator inputs provided.","A fancy error has occurred.","CommunicationError","EncodingError","Encoding error.","GarblerError","EvaluatorError","fancy_garbling::circuit","Evaluator","twopacerror","get_channel","Get a reference to the internal channel.","Generate a CRT modulus that support at least n-bit…","Generate the factors of a CRT modulus that support at…","Returns 1 if `x < y`.","Returns 1 if `x >= y`.","Compute the maximum bundle in `xs`.","fancy_garbling::classic","fancy_garbling::dummy","fancy_garbling::informer","fancy_garbling::twopac::semihonest","encode_many","dummyval","receive_many","constant","fancyerror","circuitparsererror","informerstats","bin_constant_bundle","Create a constant bundle using base 2 inputs.","bin_output","Output a binary bundle and interpret the result as a `u128`.","bin_outputs","Output a slice of binary bundles and interpret the results…","Xor the bits of two bundles together pairwise.","And the bits of two bundles together pairwise.","Or the bits of two bundles together pairwise.","bin_addition","Binary addition. Returns the result and the carry.","bin_addition_no_carry","Binary addition. Avoids creating extra gates for the final…","bin_multiplication_lower_half","Binary multiplication.","bin_twos_complement","Compute the twos complement of the input bundle (which…","bin_subtraction","Subtract two binary bundles. Returns the result and…","bin_multiplex_constant_bits","If `x=0` return `c1` as a bundle of constant bits, else…","Write the constant in binary and that gives you the shift…","Compute the absolute value of a binary bundle.","bin_demux","Demux a binary bundle into a unary vector.","constant_bundle","Creates a bundle of constant wires using moduli `ps`.","output_bundle","Output the wires that make up a bundle.","output_bundles","Output a slice of bundles.","add_bundles","Add two wire bundles pairwise, zipping addition.","sub_bundles","Subtract two wire bundles, residue by residue.","mul_bundles","Multiply each wire in `x` with each wire in `y`, pairwise.","mixed_radix_addition","Mixed radix addition.","mixed_radix_addition_msb_only","Mixed radix addition only returning the MSB.","multiplex","If b=0 then return x, else return y.","If b=0 then return 0, else return x.","Shift residues, replacing them with zeros in the modulus…","eq_bundles","Compute `x == y`. Returns a wire encoding the result mod 2.","crt_constant_bundle","Creates a bundle of constant wires for the CRT…","crt_output","Output a CRT bundle and interpret it mod Q.","crt_outputs","Output a slice of CRT bundles and interpret the outputs…","Add two CRT bundles.","Subtract two CRT bundles.","Multiplies each wire in `x` by the corresponding residue…","Multiply `x` with `y`.","Exponentiate `x` by the constant `c`.","Compute the remainder with respect to modulus `p`.","crt_fractional_mixed_radix","Helper function for advanced gadgets, returns the MSB of…","Compute `max(x,0)`.","Return 0 if `x` is positive and 1 if `x` is negative.","Return `if x >= 0 then 1 else -1`, where `-1` is…","Encode a single value.","Receive a single value.","encode_bundle","Encode a bundle.","receive_bundle","Receive a bundle.","encode_bundles","Encode many input bundles.","receive_many_bundles","Receive many input bundles.","crt_encode","Encode a CRT input bundle.","crt_receive","Receive an CRT input bundle.","crt_encode_many","Encode many CRT input bundles.","crt_receive_many","Receive many CRT input bundles.","bin_encode","Encode a binary input bundle.","bin_receive","Receive an binary input bundle.","bin_encode_many","Encode many binary input bundles.","bin_receive_many","Receive many binary input bundles.","reveal_many","Reveal a slice of items to all parties.","reveal_bundle","Reveal a bundle to all parties.","reveal_many_bundles","Reveal many bundles to all parties.","crt_reveal","Reveal a CRT bundle to all parties.","crt_reveal_many","Reveal many CRT bundles to all parties.","bin_reveal","Reveal a binary bundle to all parties.","bin_reveal_many","Reveal many binary bundles to all parties.","Sum up a slice of wires.","Xor is just addition, with the requirement that `x` and…","Negate by xoring `x` with `1`.","And is just multiplication, with the requirement that `x`…","Or uses Demorgan's Rule implemented with multiplication…","Returns 1 if all wires equal 1.","Returns 1 if any wire equals 1.","mod_change","Change the modulus of `x` to `to_modulus` using a…","Binary adder. Returns the result and the carry.","If `b = 0` returns `x` else `y`.","mux_constant_bits","If `x = 0` returns the constant `b1` else return `b2`.…","Output a slice of wires.","CircuitBuilder","GarbledCircuit","GarbledWriter","DummyError","CircuitBuilderError","CircuitParserError","TwopacError","BinaryBundle","CrtBundle","InformerStats","BinaryGadgets","BundleGadgets","CrtGadgets","FancyInput","FancyReveal","HasModulus","CircuitRef","An I/O error has occurred.","An I/O error occurred.","CoinTossError","Coin tossing failed.","popsicle","Private set intersection sender.","Private set intersection receiver.","popsicle::kmprt","popsicle::psty","popsicle::psz","senderstate","Initialize the PSI receiver.","Run the PSI protocol over `inputs`.","receiverstate","compute_setup","compute_intersection","Compute the intersection.","compute_cardinality","Compute the cardinality of the intersection.","Initialize the PSI sender.","send_payloads","receive_payloads","SenderState","ReceiverState"];
searchIndex["base_conversion"]={"doc":E,"i":[[5,"lookup_digits_mod_at_position","base_conversion",E,N,[[["u16"],[R[2]],["u8"]]]],[5,"lookup_defined_for_mod",E,E,N,[[["u16"]],["bool"]]]],"p":[]};
searchIndex["fancy_garbling"]={"doc":"`fancy-garbling` provides boolean and arithmetic garbling…","i":[[3,R[256],R[85],"Bundle which is explicitly binary representation.",N,N],[3,"Bundle",E,"A collection of wires, useful for the garbled gadgets…",N,N],[3,R[257],E,"Bundle which is explicitly CRT-representation.",N,N],[3,R[111],E,"Streaming evaluator using a callback to receive…",N,N],[3,"Garbler",E,"Streams garbled circuit ciphertexts through a callback.",N,N],[4,"Wire",E,"The core wire-label type.",N,N],[13,"Mod2",E,"Representation of a `mod-2` wire.",0,N],[12,"val",R[86],"A 128-bit value.",0,N],[13,"Mod3",R[85],"Representation of a `mod-3` wire.",0,N],[12,"lsb",R[86],"The least-significant bits of each `mod-3` element.",0,N],[12,"msb",E,"The most-significant bits of each `mod-3` element.",0,N],[13,"ModN",R[85],"Representation of a `mod-q` wire.",0,N],[12,"q",R[86],"The modulus of this wire-label.",0,N],[12,"ds",E,"A list of `mod-q` digits.",0,N],[0,R[88],R[85],"DSL for creating circuits compatible with fancy-garbling…",N,N],[3,R[265],R[110],"The index and modulus of a gate in a circuit.",N,N],[3,"Circuit",E,"Static representation of the type of computation supported…",N,N],[3,R[249],E,"CircuitBuilder is used to build circuits.",N,N],[11,"new",E,"Make a new `Circuit` object.",1,[[["option",[R[2]]],[R[2]]],[R[88]]]],[11,"eval",E,"Evaluate the circuit using fancy object `f`.",1,[[["f"],["self"]],[[R[15],["option"]],["option",["vec"]]]]],[11,"eval_plain",E,"Evaluate the circuit in plaintext.",1,[[["self"]],[["vec",["u16"]],[R[15],["vec",R[87]]],[R[87]]]]],[11,"print_info",E,"Print circuit info.",1,[[["self"]],[[R[15],[R[87]]],[R[87]]]]],[11,R[95],E,"Return the number of garbler inputs.",1,[[["self"]],[R[2]]]],[11,R[96],E,"Return the number of evaluator inputs.",1,[[["self"]],[R[2]]]],[11,"noutputs",E,"Return the number of outputs.",1,[[["self"]],[R[2]]]],[11,"modulus",E,"Return the modulus of the gate indexed by `i`.",1,[[["self"],[R[2]]],["u16"]]],[11,"garbler_input_mod",E,"Return the modulus of the garbler input indexed by `i`.",1,[[["self"],[R[2]]],["u16"]]],[11,"evaluator_input_mod",E,"Return the modulus of the evaluator input indexed by `i`.",1,[[["self"],[R[2]]],["u16"]]],[11,"new",E,"Make a new `CircuitBuilder`.",2,[[],["self"]]],[11,"finish",E,"Finish circuit building, outputting the resulting circuit.",2,[[],[R[88]]]],[11,"garbler_input",E,"Get CircuitRef for a garbler input wire.",2,[[["u16"],["self"]],[R[89]]]],[11,"evaluator_input",E,"Get CircuitRef for an evaluator input wire.",2,[[["u16"],["self"]],[R[89]]]],[11,"garbler_inputs",E,R[90],2,[[["self"]],[[R[89]],["vec",[R[89]]]]]],[11,"evaluator_inputs",E,R[90],2,[[["self"]],[[R[89]],["vec",[R[89]]]]]],[11,"crt_garbler_input",E,"Get a CrtBundle for the garbler using composite modulus Q",2,[[["self"],["u128"]],[[R[89]],[R[91],[R[89]]]]]],[11,"crt_evaluator_input",E,"Get a CrtBundle for the evaluator using composite modulus Q",2,[[["self"],["u128"]],[[R[89]],[R[91],[R[89]]]]]],[11,"bin_garbler_input",E,"Get a BinaryBundle for the garbler with n bits.",2,[[["self"],[R[2]]],[[R[92],[R[89]]],[R[89]]]]],[11,"bin_evaluator_input",E,"Get a BinaryBundle for the evaluator with n bits.",2,[[["self"],[R[2]]],[[R[92],[R[89]]],[R[89]]]]],[0,"classic",R[85],"Provides objects and functions for statically garbling and…",N,N],[3,R[250],R[120],"Static evaluator for a circuit, created by the `garble`…",N,N],[3,"Encoder",E,"Encode inputs statically.",N,N],[3,R[251],E,"Implementation of the `Write` trait for use by `Garbler`.",N,N],[5,"garble",E,"Garble a circuit without streaming.",N,[[[R[88]]],[[R[93]],[R[15],[R[93]]]]]],[11,"new",E,"Create a new object from a vector of garbled gates and…",3,[[["vec",[R[1]]],[R[1]]],["self"]]],[11,"size",E,"The number of garbled rows and constant wires in the…",3,[[["self"]],[R[2]]]],[11,"eval",E,"Evaluate the garbled circuit.",3,[[[R[88]],["self"]],[[R[15],["vec",R[94]]],["vec",["u16"]],[R[94]]]]],[11,"new",E,"Make a new `Encoder` from lists of garbler and evaluator…",4,[[["vec",["wire"]],["wire"],["u16"],["hashmap",["u16","wire"]]],["self"]]],[11,R[95],E,"Output the number of garbler inputs.",4,[[["self"]],[R[2]]]],[11,R[96],E,"Output the number of evaluator inputs.",4,[[["self"]],[R[2]]]],[11,"encode_garbler_input",E,"Encode a single garbler input into its associated…",4,[[["u16"],["self"],[R[2]]],["wire"]]],[11,"encode_evaluator_input",E,"Encode a single evaluator input into its associated…",4,[[["u16"],["self"],[R[2]]],["wire"]]],[11,"encode_garbler_inputs",E,"Encode a slice of garbler inputs into their associated…",4,[[["self"]],[["wire"],["vec",["wire"]]]]],[11,"encode_evaluator_inputs",E,"Encode a slice of evaluator inputs into their associated…",4,[[["self"]],[["wire"],["vec",["wire"]]]]],[11,"new",E,"Make a new `GarbledWriter`.",5,[[["option",[R[2]]],[R[2]]],["self"]]],[0,"dummy",R[85],"Dummy implementation of `Fancy`.",N,N],[3,"Dummy",R[121],"Simple struct that performs the fancy computation over…",N,N],[3,"DummyVal",E,"Wrapper around `u16`.",N,N],[11,"new",E,"Create a new DummyVal.",6,[[["u16"]],["self"]]],[11,"val",E,"Extract the value.",6,[[["self"]],["u16"]]],[11,"new",E,"Create a new Dummy.",7,[[],["dummy"]]],[0,"errors",R[85],"Errors that may be output by this library.",N,N],[4,R[99],R[97],"Errors that may occur when using the `Fancy` trait. These…",N,N],[13,"UnequalModuli",E,"Unequal moduli.",8,N],[13,"InvalidArg",E,"Invalid argument.",8,N],[13,"InvalidArgNum",E,"Invalid number of arguments.",8,N],[12,"got",R[98],"Received number of arguments.",8,N],[12,"needed",E,"Expected number of arguments.",8,N],[13,"InvalidArgMod",R[97],"Invalid argument modulus.",8,N],[12,"got",R[98],"Received modulus.",8,N],[12,"needed",E,"Expected modulus.",8,N],[13,"ArgNotBinary",R[97],"Expected binary argument.",8,N],[13,"NoTruthTable",E,"Truth table expected but none given.",8,N],[13,"InvalidTruthTable",E,"Projection truth table is invalid.",8,N],[13,"UninitializedValue",E,"Uninitialized value encountered.",8,N],[4,R[252],E,"Errors from the dummy fancy object.",N,N],[13,R[100],E,R[101],9,N],[13,R[102],E,R[103],9,N],[13,R[106],E,R[107],9,N],[13,R[99],E,R[104],9,N],[4,R[109],E,"Errors from the evaluator.",N,N],[13,R[100],E,R[101],10,N],[13,R[102],E,R[103],10,N],[13,"DecodingFailed",E,"Decoding failed.",10,N],[13,R[105],E,"A communication error has occurred.",10,N],[13,R[99],E,R[104],10,N],[4,R[108],E,"Errors from the garbler.",N,N],[13,R[105],E,"An error occurred while processing a message.",11,N],[13,"AsymmetricHalfGateModuliMax8",E,"Asymmetric moduli error.",11,N],[13,"TruthTableRequired",E,"A truth table was missing.",11,N],[13,"DeltaRequired",E,"Delta required for wire reuse.",11,N],[13,R[106],E,R[107],11,N],[13,R[99],E,R[104],11,N],[4,R[253],E,"Errors emitted when building a circuit.",N,N],[13,"ReuseUndefined",E,"Reuse not supported.",12,N],[13,R[99],E,R[104],12,N],[4,R[254],E,"Errors emitted by the circuit parser.",N,N],[13,"IoError",E,R[267],13,N],[13,"RegexError",E,"A regular expression parsing error occurred.",13,N],[13,"ParseIntError",E,"An error occurred parsing an integer.",13,N],[13,"ParseLineError",E,"An error occurred parsing a line.",13,N],[13,"ParseGateError",E,"An error occurred parsing a gate type.",13,N],[4,R[255],E,"Errors produced by `twopac`.",N,N],[13,"IoError",E,R[266],14,N],[13,"OtError",E,"An oblivious transfer error has occurred.",14,N],[13,R[108],E,"The garbler produced an error.",14,N],[13,R[109],E,"The evaluator produced an error.",14,N],[13,R[99],E,"Processing the garbled circuit produced an error.",14,N],[11,"new",R[85],"Create a new binary bundle from a vector of wires.",15,[[["vec"]],[R[92]]]],[11,"extract",E,"Extract the underlying bundle from this binary bundle.",15,[[],["bundle"]]],[11,"new",E,"Create a new bundle from some wires.",16,[[["vec"]],["bundle"]]],[11,"moduli",E,"Return the moduli of all the wires in the bundle.",16,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"wires",E,"Extract the wires from this bundle.",16,[[["self"]]]],[11,"size",E,"Get the number of wires in this bundle.",16,[[["self"]],[R[2]]]],[11,"is_binary",E,"Whether this bundle only contains residues in mod 2.",16,[[["self"]],["bool"]]],[11,"with_moduli",E,"Returns a new bundle only containing wires with matching…",16,[[["self"]],["bundle"]]],[11,"pad",E,"Pad the Bundle with val, n times.",16,[[["self"],[R[2]],["w"]]]],[11,"extract",E,"Extract a wire from the Bundle, removing it and returning…",16,[[["self"],[R[2]]],["w"]]],[11,"iter",E,"Access the underlying iterator",16,[[["self"]],["iter"]]],[11,"new",E,"Create a new CRT bundle from a vector of wires.",17,[[["vec"]],[R[91]]]],[11,"extract",E,"Extract the underlying bundle from this CRT bundle.",17,[[],["bundle"]]],[11,"composite_modulus",E,"Return the product of all the wires' moduli.",17,[[["self"]],["u128"]]],[11,"new",E,"Create a new `Evaluator`.",18,[[["c"]],["self"]]],[11,"read_wire",E,"Read a Wire from the reader.",18,[[["u16"],["self"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"new",E,"Create a new garbler.",19,[[["c"],["rng"]],["self"]]],[11,"delta",E,"Create a delta if it has not been created yet for this…",19,[[["u16"],["self"]],["wire"]]],[11,"get_deltas",E,"Get the deltas, consuming the Garbler.",19,[[],[["u16"],["wire"],["hashmap",["u16","wire"]]]]],[11,"send_wire",E,"Send a wire over the established channel.",19,[[["wire"],["self"]],[[R[93]],[R[15],[R[93]]]]]],[11,"encode_wire",E,"Encode a wire, producing the zero wire as well as the…",19,[[["u16"],["self"]]]],[11,"encode_many_wires",E,"Encode many wires, producing zero wires as well as encoded…",19,[[["self"]],[[R[15],[R[93]]],[R[93]]]]],[11,"crt_encode_wire",E,"Encode a `CrtBundle`, producing zero wires as well as…",19,[[["self"],["u128"]],[[R[93]],[R[15],[R[93]]]]]],[11,"bin_encode_wire",E,"Encode a `BinaryBundle`, producing zero wires as well as…",19,[[["self"],[R[2]],["u128"]],[[R[93]],[R[15],[R[93]]]]]],[0,"informer",E,"`Informer` runs a fancy computation and learns information…",N,N],[3,"Informer",R[122],"Implements `Fancy`. Used to learn information about a…",N,N],[12,"underlying",E,"The underlying fancy object.",20,N],[3,R[258],E,"The statistics revealed by the informer.",N,N],[11,R[95],E,"Number of garbler inputs in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"garbler_input_moduli",E,"Moduli of garbler inputs in the fancy computation.",21,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,R[96],E,"Number of evaluator inputs in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"evaluator_input_moduli",E,"Moduli of evaluator inputs in the fancy computation.",21,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"num_consts",E,"Number of constants in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_outputs",E,"Number of outputs in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_output_ciphertexts",E,"Number of output ciphertexts.",21,[[["self"]],[R[2]]]],[11,"num_adds",E,"Number of additions in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_subs",E,"Number of subtractions in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_cmuls",E,"Number of scalar multiplications in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_muls",E,"Number of multiplications in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_projs",E,"Number of projections in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"num_ciphertexts",E,"Number of ciphertexts in the fancy computation.",21,[[["self"]],[R[2]]]],[11,"new",E,"Make a new `Informer`.",20,[[["f"]],["informer"]]],[11,"stats",E,"Get the statistics collected by the `Informer`",20,[[["self"]],[R[130]]]],[11,"parse",R[110],"Generates a new `Circuit` from file `filename`. The file…",1,[[["str"]],[["error"],[R[15],["error"]]]]],[0,"twopac",R[85],"Implementations of two-party secure computation.",N,N],[0,"semihonest","fancy_garbling::twopac","Implementation of semi-honest two-party computation.",N,N],[3,R[111],R[123],"Semi-honest evaluator.",N,N],[3,"Garbler",E,"Semi-honest garbler.",N,N],[11,"new",E,"Make a new `Evaluator`.",22,[[["c"],["rng"]],[[R[15],[R[112]]],[R[112]]]]],[11,R[113],E,R[114],22,[[["self"]],["c"]]],[11,"new",E,"Make a new `Garbler`.",23,[[["c"],["rng"]],[[R[15],[R[112]]],[R[112]]]]],[11,R[113],E,R[114],23,[[["self"]],["c"]]],[0,"util",R[85],"Tools useful for interacting with `fancy-garbling`.",N,N],[5,"tweak","fancy_garbling::util","Tweak function for a single item.",N,[[[R[2]]],[R[1]]]],[5,"tweak2",E,"Tweak function for two items.",N,[[["u64"]],[R[1]]]],[5,"output_tweak",E,"Compute the output tweak for a garbled gate where i is the…",N,[[["u16"],[R[2]]],[R[1]]]],[5,"base_q_add_eq",E,"Add a base `q` slice `ys` into `xs`.",N,[[["u16"]]]],[5,"digits_per_u128",E,"Determine how many `mod q` digits fit into a `u128`…",N,[[["u16"]],[R[2]]]],[5,"as_base_q_u128",E,"Convert `x` into base `q`.",N,[[["u16"],["u128"]],[["vec",["u16"]],["u16"]]]],[5,"as_mixed_radix",E,"Convert `x` into mixed radix form using the provided…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"from_base_q",E,"Convert little-endian base `q` digits into `u128`.",N,[[["u16"]],["u128"]]],[5,"from_mixed_radix",E,"Convert little-endian mixed radix digits into u128.",N,[[],["u128"]]],[5,"u128_to_bits",E,"Get the bits of a u128 encoded in 128 u16s, which is…",N,[[[R[2]],["u128"]],[["vec",["u16"]],["u16"]]]],[5,"u128_from_bits",E,"Convert into a u128 from the \"bits\" as u16. Assumes each…",N,[[],["u128"]]],[5,"factor",E,"Factor using the primes in the global `PRIMES` array.…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"crt",E,"Compute the CRT representation of x with respect to the…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"crt_factor",E,"Compute the CRT representation of `x` with respect to the…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"crt_inv",E,"Compute the value x given a list of CRT primes and residues.",N,[[],["u128"]]],[5,"crt_inv_factor",E,"Compute the value `x` given a composite CRT modulus…",N,[[["u128"]],["u128"]]],[5,"inv",E,"Generic algorithm to invert inp_a mod inp_b. As ref so as…",N,[[["i128"]],["i128"]]],[5,"modulus_with_nprimes",E,"Primes skipping the modulus 2, which allows certain…",N,[[[R[2]]],["u128"]]],[5,"modulus_with_width",E,R[115],N,[[["u32"]],["u128"]]],[5,"primes_with_width",E,R[116],N,[[["u32"]],[["vec",["u16"]],["u16"]]]],[5,"base_modulus_with_width",E,R[115],N,[[["u32"]],["u128"]]],[5,"base_primes_with_width",E,R[116],N,[[["u32"]],[["vec",["u16"]],["u16"]]]],[5,"product",E,R[115],N,[[],["u128"]]],[5,"is_power_of_2",E,"Raise a u16 to a power mod some value. Returns `true` if…",N,[[["u16"]],["bool"]]],[17,"NPRIMES",E,"Number of primes supported by our library.",N,N],[17,"PRIMES",E,"Primes used in fancy garbling.",N,N],[8,"RngExt",E,"Extra Rng functionality, useful for `fancy-garbling`.",N,N],[11,"gen_bool",E,"Randomly generate a `bool`.",24,[[["self"]],["bool"]]],[11,"gen_u16",E,"Randomly generate a `u16`.",24,[[["self"]],["u16"]]],[11,"gen_u32",E,"Randomly generate a `u32`.",24,[[["self"]],["u32"]]],[11,"gen_u64",E,"Randomly generate a `u64`.",24,[[["self"]],["u64"]]],[11,"gen_usize",E,"Randomly generate a `usize`.",24,[[["self"]],[R[2]]]],[11,"gen_u128",E,"Randomly generate a `u128`.",24,[[["self"]],["u128"]]],[11,"gen_block",E,"Randomly generate a `Block`.",24,[[["self"]],[R[1]]]],[11,"gen_usable_block",E,"Randomly generate a valid `Block`.",24,[[["u16"],["self"]],[R[1]]]],[11,"gen_prime",E,"Randomly generate a prime (among the set of supported…",24,[[["self"]],["u16"]]],[11,"gen_modulus",E,"Randomly generate a (supported) modulus.",24,[[["self"]],["u16"]]],[11,"gen_usable_composite_modulus",E,"Randomly generate a valid composite modulus.",24,[[["self"]],["u128"]]],[11,"gen_usable_factors",E,"Randomly generate a vector of valid factor",24,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"digits",R[85],"Get the digits of the wire.",0,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"from_block",E,"Unpack the wire represented by a `Block` with modulus `q`.…",0,[[["u16"],[R[1]]],["self"]]],[11,"as_block",E,"Pack the wire into a `Block`.",0,[[["self"]],[R[1]]]],[11,"zero",E,"The zero wire with modulus `q`.",0,[[["u16"]],["self"]]],[11,"rand_delta",E,"Get a random wire label mod `q`, with the first digit set…",0,[[["u16"],["r"]],["self"]]],[11,"color",E,"Get the color digit of the wire.",0,[[["self"]],["u16"]]],[11,"plus",E,"Add two wires digit-wise, returning a new wire.",0,[[["self"]],["self"]]],[11,"plus_eq",E,"Add another wire digit-wise into this one. Assumes that…",0,[[["wire"],["self"]],["wire"]]],[11,"plus_mov",E,"Add another wire into this one, consuming it for chained…",0,[[["wire"]],["wire"]]],[11,"cmul",E,"Multiply each digit by a constant `c mod q`, returning a…",0,[[["u16"],["self"]],["self"]]],[11,"cmul_eq",E,"Multiply each digit by a constant `c mod q`.",0,[[["u16"],["self"]],["wire"]]],[11,"cmul_mov",E,"Multiply each digit by a constant `c mod q`, consuming it…",0,[[["u16"]],["wire"]]],[11,"negate",E,"Negate all the digits `mod q`, returning a new wire.",0,[[["self"]],["self"]]],[11,"negate_eq",E,"Negate all the digits mod q.",0,[[["self"]],["wire"]]],[11,"negate_mov",E,"Negate all the digits `mod q`, consuming it for chained…",0,[[],["wire"]]],[11,"minus",E,"Subtract two wires, returning the result.",0,[[["wire"],["self"]],["wire"]]],[11,"minus_eq",E,"Subtract a wire from this one.",0,[[["wire"],["self"]],["wire"]]],[11,"minus_mov",E,"Subtract a wire from this one, consuming it for chained…",0,[[["wire"]],["wire"]]],[11,"rand",E,"Get a random wire `mod q`.",0,[[["u16"],["r"]],["wire"]]],[11,"hash",E,"Compute the hash of this wire.",0,[[[R[1]],["self"]],[R[1]]]],[11,"hashback",E,"Compute the hash of this wire, converting the result back…",0,[[["u16"],[R[1]],["self"]],["wire"]]],[8,R[259],E,"Extension trait for `Fancy` providing gadgets that operate…",N,N],[11,R[131],E,R[132],25,[[["self"],[R[2]],["u128"]],[[R[15],[R[92]]],[R[92]]]]],[11,R[133],E,R[134],25,[[["self"],[R[92]]],[["option",["u128"]],[R[15],["option"]]]]],[11,R[135],E,R[136],25,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,"bin_xor",E,R[137],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_and",E,R[138],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_or",E,R[139],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[140],E,R[141],25,[[["self"],[R[92]]],[R[15]]]],[11,R[142],E,R[143],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[144],E,R[145],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[146],E,R[147],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[148],E,R[149],25,[[["self"],[R[92]]],[R[15]]]],[11,R[150],E,R[151],25,[[[R[2]],["u128"],["self"]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_cmul",E,R[152],25,[[[R[2]],["u128"],["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_abs",E,R[153],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_lt",E,R[117],25,[[["self"],[R[92]]],[R[15]]]],[11,"bin_geq",E,R[118],25,[[["self"],[R[92]]],[R[15]]]],[11,"bin_max",E,R[119],25,[[["self"]],[[R[15],[R[92]]],[R[92]]]]],[11,R[154],E,R[155],25,[[["self"],[R[92]]],[[R[15],["vec"]],["vec"]]]],[8,R[260],E,"Extension trait for Fancy which provides Bundle…",N,N],[11,R[156],E,R[157],26,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[158],E,R[159],26,[[["self"],["bundle"]],[["option",["vec"]],[R[15],["option"]]]]],[11,R[160],E,R[161],26,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,R[162],E,R[163],26,[[["self"],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[164],E,R[165],26,[[["self"],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[166],E,R[167],26,[[["self"],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[168],E,R[169],26,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[170],E,R[171],26,[[["self"]],[R[15]]]],[11,R[172],E,R[173],26,[[["bundle"],["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,"mask",E,R[174],26,[[["bundle"],["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,"shift",E,R[175],26,[[["self"],[R[2]],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[176],E,R[177],26,[[["self"],["bundle"]],[R[15]]]],[8,R[261],E,"Extension trait for `Fancy` providing advanced CRT gadgets…",N,N],[11,R[178],E,R[179],27,[[["self"],["u128"]],[[R[15],[R[91]]],[R[91]]]]],[11,R[180],E,R[181],27,[[["self"],[R[91]]],[["option",["u128"]],[R[15],["option"]]]]],[11,R[182],E,R[183],27,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,"crt_add",E,R[184],27,[[["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_sub",E,R[185],27,[[["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_cmul",E,R[186],27,[[["u128"],["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_mul",E,R[187],27,[[["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_cexp",E,R[188],27,[[["u16"],["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_rem",E,R[189],27,[[["u16"],["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,R[190],E,R[191],27,[[["self"],[R[91]]],[R[15]]]],[11,"crt_relu",E,R[192],27,[[["str"],[R[91]],["option"],["self"]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_sign",E,R[193],27,[[["str"],["self"],[R[91]]],[R[15]]]],[11,"crt_sgn",E,R[194],27,[[["str"],[R[91]],["option"],["self"]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_lt",E,R[117],27,[[["str"],["self"],[R[91]]],[R[15]]]],[11,"crt_geq",E,R[118],27,[[["str"],["self"],[R[91]]],[R[15]]]],[11,"crt_max",E,R[119],27,[[["str"],["self"]],[[R[15],[R[91]]],[R[91]]]]],[8,R[262],E,"Convenience functions for encoding input to Fancy objects.",N,N],[16,"Item",E,"The type that this Fancy object operates over.",28,N],[16,"Error",E,"The type of error that this Fancy object emits.",28,N],[10,R[124],E,"Encode many values where the actual input is known.",28,[[["self"]],[["vec"],[R[15],["vec"]]]]],[10,R[126],E,"Receive many values where the input is not known.",28,[[["self"]],[["vec"],[R[15],["vec"]]]]],[11,"encode",E,R[195],28,[[["u16"],["self"]],[R[15]]]],[11,R[64],E,R[196],28,[[["u16"],["self"]],[R[15]]]],[11,R[197],E,R[198],28,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[199],E,R[200],28,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[201],E,R[202],28,[[["self"]],[[R[15],["vec"]],["vec",["bundle"]]]]],[11,R[203],E,R[204],28,[[["self"]],[[R[15],["vec"]],["vec",["bundle"]]]]],[11,R[205],E,R[206],28,[[["self"],["u128"]],[[R[15],[R[91]]],[R[91]]]]],[11,R[207],E,R[208],28,[[["self"],["u128"]],[[R[15],[R[91]]],[R[91]]]]],[11,R[209],E,R[210],28,[[["self"],["u128"]],[[R[15],["vec"]],["vec",[R[91]]]]]],[11,R[211],E,R[212],28,[[["self"],[R[2]],["u128"]],[[R[15],["vec"]],["vec",[R[91]]]]]],[11,R[213],E,R[214],28,[[["self"],[R[2]],["u128"]],[[R[92]],[R[15],[R[92]]]]]],[11,R[215],E,R[216],28,[[["self"],[R[2]]],[[R[92]],[R[15],[R[92]]]]]],[11,R[217],E,R[218],28,[[["self"],[R[2]]],[[R[15],["vec"]],["vec",[R[92]]]]]],[11,R[219],E,R[220],28,[[["self"],[R[2]]],[[R[15],["vec"]],["vec",[R[92]]]]]],[8,R[263],E,"Trait to describe Fancy objects which can reveal outputs…",N,N],[10,"reveal",E,"Reveal the contents of `x` to all parties.",29,[[["self"]],[["u16"],[R[15],["u16"]]]]],[11,R[221],E,R[222],29,[[["self"]],[["vec",["u16"]],[R[15],["vec"]]]]],[11,R[223],E,R[224],29,[[["self"],["bundle"]],[["vec",["u16"]],[R[15],["vec"]]]]],[11,R[225],E,R[226],29,[[["self"]],[["vec",["vec"]],[R[15],["vec"]]]]],[11,R[227],E,R[228],29,[[["self"],[R[91]]],[["u128"],[R[15],["u128"]]]]],[11,R[229],E,R[230],29,[[["self"]],[[R[15],["vec"]],["vec",["u128"]]]]],[11,R[231],E,R[232],29,[[["self"],[R[92]]],[["u128"],[R[15],["u128"]]]]],[11,R[233],E,R[234],29,[[["self"]],[[R[15],["vec"]],["vec",["u128"]]]]],[8,R[264],E,"An object that has some modulus. Basic object of `Fancy`…",N,N],[10,"modulus",E,"The modulus of the wire.",30,[[["self"]],["u16"]]],[8,"Fancy",E,"DSL for the basic computations supported by…",N,N],[16,"Item",E,"The underlying wire datatype created by an object…",31,N],[16,"Error",E,"Errors which may be thrown by the users of Fancy.",31,N],[10,R[127],E,"Create a constant `x` with modulus `q`.",31,[[["u16"],["self"]],[R[15]]]],[10,"add",E,"Add `x` and `y`.",31,[[["self"]],[R[15]]]],[10,"sub",E,"Subtract `x` and `y`.",31,[[["self"]],[R[15]]]],[10,"cmul",E,"Multiply `x` times the constant `c`.",31,[[["u16"],["self"]],[R[15]]]],[10,"mul",E,"Multiply `x` and `y`.",31,[[["self"]],[R[15]]]],[10,"proj",E,"Project `x` according to the truth table `tt`. Resulting…",31,[[["vec",["u16"]],["u16"],["self"],["option",["vec"]]],[R[15]]]],[10,"output",E,"Process this wire as output. Some `Fancy` implementors…",31,[[["self"]],[[R[15],["option"]],["option",["u16"]]]]],[11,"add_many",E,R[235],31,[[["self"]],[R[15]]]],[11,"xor",E,R[236],31,[[["self"]],[R[15]]]],[11,"negate",E,R[237],31,[[["self"]],[R[15]]]],[11,"and",E,R[238],31,[[["self"]],[R[15]]]],[11,"or",E,R[239],31,[[["self"]],[R[15]]]],[11,"and_many",E,R[240],31,[[["self"]],[R[15]]]],[11,"or_many",E,R[241],31,[[["self"]],[R[15]]]],[11,R[242],E,R[243],31,[[["u16"],["self"]],[R[15]]]],[11,"adder",E,R[244],31,[[["self"],["option"]],[R[15]]]],[11,"mux",E,R[245],31,[[["self"]],[R[15]]]],[11,R[246],E,R[247],31,[[["self"],["bool"]],[R[15]]]],[11,"outputs",E,R[248],31,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[25],E,E,15,[[["self"]],[T]]],[11,R[26],E,E,15,[[["self"],[T]]]],[11,R[27],E,E,15,[[[U]],[R[15]]]],[11,R[28],E,E,15,[[],[R[15]]]],[11,R[36],E,E,15,[[["self"]],[T]]],[11,R[29],E,E,15,[[["self"]],[T]]],[11,R[33],E,E,15,[[["self"]],[R[37]]]],[11,R[30],E,E,15,[[],[U]]],[11,R[31],E,E,15,[[[T]],[T]]],[11,"cast",E,E,15,[[],[U]]],[11,R[32],E,E,15,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[25],E,E,16,[[["self"]],[T]]],[11,R[26],E,E,16,[[["self"],[T]]]],[11,R[27],E,E,16,[[[U]],[R[15]]]],[11,R[28],E,E,16,[[],[R[15]]]],[11,R[36],E,E,16,[[["self"]],[T]]],[11,R[29],E,E,16,[[["self"]],[T]]],[11,R[33],E,E,16,[[["self"]],[R[37]]]],[11,R[30],E,E,16,[[],[U]]],[11,R[31],E,E,16,[[[T]],[T]]],[11,"cast",E,E,16,[[],[U]]],[11,R[32],E,E,16,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[25],E,E,17,[[["self"]],[T]]],[11,R[26],E,E,17,[[["self"],[T]]]],[11,R[27],E,E,17,[[[U]],[R[15]]]],[11,R[28],E,E,17,[[],[R[15]]]],[11,R[36],E,E,17,[[["self"]],[T]]],[11,R[29],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,[[["self"]],[R[37]]]],[11,R[30],E,E,17,[[],[U]]],[11,R[31],E,E,17,[[[T]],[T]]],[11,"cast",E,E,17,[[],[U]]],[11,R[32],E,E,17,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[27],E,E,18,[[[U]],[R[15]]]],[11,R[28],E,E,18,[[],[R[15]]]],[11,R[36],E,E,18,[[["self"]],[T]]],[11,R[29],E,E,18,[[["self"]],[T]]],[11,R[33],E,E,18,[[["self"]],[R[37]]]],[11,R[30],E,E,18,[[],[U]]],[11,R[31],E,E,18,[[[T]],[T]]],[11,"cast",E,E,18,[[],[U]]],[11,R[32],E,E,18,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[27],E,E,19,[[[U]],[R[15]]]],[11,R[28],E,E,19,[[],[R[15]]]],[11,R[36],E,E,19,[[["self"]],[T]]],[11,R[29],E,E,19,[[["self"]],[T]]],[11,R[33],E,E,19,[[["self"]],[R[37]]]],[11,R[30],E,E,19,[[],[U]]],[11,R[31],E,E,19,[[[T]],[T]]],[11,"cast",E,E,19,[[],[U]]],[11,R[32],E,E,19,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[26],E,E,0,[[["self"],[T]]]],[11,R[27],E,E,0,[[[U]],[R[15]]]],[11,R[28],E,E,0,[[],[R[15]]]],[11,R[36],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[37]]]],[11,R[30],E,E,0,[[],[U]]],[11,R[31],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[32],E,E,0,[[[T]],[T]]],[11,"clear",E,E,0,[[["self"]]]],[11,R[35],E,E,0,[[]]],[11,"into",R[110],E,32,[[],[U]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[25],E,E,32,[[["self"]],[T]]],[11,R[26],E,E,32,[[["self"],[T]]]],[11,R[34],E,E,32,[[["self"]],[R[71]]]],[11,R[27],E,E,32,[[[U]],[R[15]]]],[11,R[28],E,E,32,[[],[R[15]]]],[11,R[36],E,E,32,[[["self"]],[T]]],[11,R[29],E,E,32,[[["self"]],[T]]],[11,R[33],E,E,32,[[["self"]],[R[37]]]],[11,R[30],E,E,32,[[],[U]]],[11,R[31],E,E,32,[[[T]],[T]]],[11,"cast",E,E,32,[[],[U]]],[11,R[32],E,E,32,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[26],E,E,1,[[["self"],[T]]]],[11,R[27],E,E,1,[[[U]],[R[15]]]],[11,R[28],E,E,1,[[],[R[15]]]],[11,R[36],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[R[37]]]],[11,R[30],E,E,1,[[],[U]]],[11,R[31],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[32],E,E,1,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[27],E,E,2,[[[U]],[R[15]]]],[11,R[28],E,E,2,[[],[R[15]]]],[11,R[36],E,E,2,[[["self"]],[T]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[37]]]],[11,R[30],E,E,2,[[],[U]]],[11,R[31],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[32],E,E,2,[[[T]],[T]]],[11,"into",R[120],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[27],E,E,3,[[[U]],[R[15]]]],[11,R[28],E,E,3,[[],[R[15]]]],[11,R[36],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[37]]]],[11,R[30],E,E,3,[[],[U]]],[11,R[31],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[32],E,E,3,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[27],E,E,4,[[[U]],[R[15]]]],[11,R[28],E,E,4,[[],[R[15]]]],[11,R[36],E,E,4,[[["self"]],[T]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[37]]]],[11,R[30],E,E,4,[[],[U]]],[11,R[31],E,E,4,[[[T]],[T]]],[11,"cast",E,E,4,[[],[U]]],[11,R[32],E,E,4,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[27],E,E,5,[[[U]],[R[15]]]],[11,R[28],E,E,5,[[],[R[15]]]],[11,R[36],E,E,5,[[["self"]],[T]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[R[37]]]],[11,R[30],E,E,5,[[],[U]]],[11,R[31],E,E,5,[[[T]],[T]]],[11,"cast",E,E,5,[[],[U]]],[11,R[32],E,E,5,[[[T]],[T]]],[11,"into",R[121],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[27],E,E,7,[[[U]],[R[15]]]],[11,R[28],E,E,7,[[],[R[15]]]],[11,R[36],E,E,7,[[["self"]],[T]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"]],[R[37]]]],[11,R[30],E,E,7,[[],[U]]],[11,R[31],E,E,7,[[[T]],[T]]],[11,"cast",E,E,7,[[],[U]]],[11,R[32],E,E,7,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[25],E,E,6,[[["self"]],[T]]],[11,R[26],E,E,6,[[["self"],[T]]]],[11,R[27],E,E,6,[[[U]],[R[15]]]],[11,R[28],E,E,6,[[],[R[15]]]],[11,R[36],E,E,6,[[["self"]],[T]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[R[37]]]],[11,R[30],E,E,6,[[],[U]]],[11,R[31],E,E,6,[[[T]],[T]]],[11,"cast",E,E,6,[[],[U]]],[11,R[32],E,E,6,[[[T]],[T]]],[11,"into",R[97],E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[34],E,E,8,[[["self"]],[R[71]]]],[11,R[27],E,E,8,[[[U]],[R[15]]]],[11,R[28],E,E,8,[[],[R[15]]]],[11,R[36],E,E,8,[[["self"]],[T]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[["self"]],[R[37]]]],[11,R[30],E,E,8,[[],[U]]],[11,R[31],E,E,8,[[[T]],[T]]],[11,"cast",E,E,8,[[],[U]]],[11,R[32],E,E,8,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[34],E,E,9,[[["self"]],[R[71]]]],[11,R[27],E,E,9,[[[U]],[R[15]]]],[11,R[28],E,E,9,[[],[R[15]]]],[11,R[36],E,E,9,[[["self"]],[T]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"]],[R[37]]]],[11,R[30],E,E,9,[[],[U]]],[11,R[31],E,E,9,[[[T]],[T]]],[11,"cast",E,E,9,[[],[U]]],[11,R[32],E,E,9,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[34],E,E,10,[[["self"]],[R[71]]]],[11,R[27],E,E,10,[[[U]],[R[15]]]],[11,R[28],E,E,10,[[],[R[15]]]],[11,R[36],E,E,10,[[["self"]],[T]]],[11,R[29],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[["self"]],[R[37]]]],[11,R[30],E,E,10,[[],[U]]],[11,R[31],E,E,10,[[[T]],[T]]],[11,"cast",E,E,10,[[],[U]]],[11,R[32],E,E,10,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[34],E,E,11,[[["self"]],[R[71]]]],[11,R[27],E,E,11,[[[U]],[R[15]]]],[11,R[28],E,E,11,[[],[R[15]]]],[11,R[36],E,E,11,[[["self"]],[T]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[["self"]],[R[37]]]],[11,R[30],E,E,11,[[],[U]]],[11,R[31],E,E,11,[[[T]],[T]]],[11,"cast",E,E,11,[[],[U]]],[11,R[32],E,E,11,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[34],E,E,12,[[["self"]],[R[71]]]],[11,R[27],E,E,12,[[[U]],[R[15]]]],[11,R[28],E,E,12,[[],[R[15]]]],[11,R[36],E,E,12,[[["self"]],[T]]],[11,R[29],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[["self"]],[R[37]]]],[11,R[30],E,E,12,[[],[U]]],[11,R[31],E,E,12,[[[T]],[T]]],[11,"cast",E,E,12,[[],[U]]],[11,R[32],E,E,12,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[34],E,E,13,[[["self"]],[R[71]]]],[11,R[27],E,E,13,[[[U]],[R[15]]]],[11,R[28],E,E,13,[[],[R[15]]]],[11,R[36],E,E,13,[[["self"]],[T]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[["self"]],[R[37]]]],[11,R[30],E,E,13,[[],[U]]],[11,R[31],E,E,13,[[[T]],[T]]],[11,"cast",E,E,13,[[],[U]]],[11,R[32],E,E,13,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[34],E,E,14,[[["self"]],[R[71]]]],[11,R[27],E,E,14,[[[U]],[R[15]]]],[11,R[28],E,E,14,[[],[R[15]]]],[11,R[36],E,E,14,[[["self"]],[T]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[["self"]],[R[37]]]],[11,R[30],E,E,14,[[],[U]]],[11,R[31],E,E,14,[[[T]],[T]]],[11,"cast",E,E,14,[[],[U]]],[11,R[32],E,E,14,[[[T]],[T]]],[11,"into",R[122],E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[27],E,E,20,[[[U]],[R[15]]]],[11,R[28],E,E,20,[[],[R[15]]]],[11,R[36],E,E,20,[[["self"]],[T]]],[11,R[29],E,E,20,[[["self"]],[T]]],[11,R[33],E,E,20,[[["self"]],[R[37]]]],[11,R[30],E,E,20,[[],[U]]],[11,R[31],E,E,20,[[[T]],[T]]],[11,"cast",E,E,20,[[],[U]]],[11,R[32],E,E,20,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[25],E,E,21,[[["self"]],[T]]],[11,R[26],E,E,21,[[["self"],[T]]]],[11,R[34],E,E,21,[[["self"]],[R[71]]]],[11,R[27],E,E,21,[[[U]],[R[15]]]],[11,R[28],E,E,21,[[],[R[15]]]],[11,R[36],E,E,21,[[["self"]],[T]]],[11,R[29],E,E,21,[[["self"]],[T]]],[11,R[33],E,E,21,[[["self"]],[R[37]]]],[11,R[30],E,E,21,[[],[U]]],[11,R[31],E,E,21,[[[T]],[T]]],[11,"cast",E,E,21,[[],[U]]],[11,R[32],E,E,21,[[[T]],[T]]],[11,"into",R[123],E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[27],E,E,22,[[[U]],[R[15]]]],[11,R[28],E,E,22,[[],[R[15]]]],[11,R[36],E,E,22,[[["self"]],[T]]],[11,R[29],E,E,22,[[["self"]],[T]]],[11,R[33],E,E,22,[[["self"]],[R[37]]]],[11,R[30],E,E,22,[[],[U]]],[11,R[31],E,E,22,[[[T]],[T]]],[11,"cast",E,E,22,[[],[U]]],[11,R[32],E,E,22,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[27],E,E,23,[[[U]],[R[15]]]],[11,R[28],E,E,23,[[],[R[15]]]],[11,R[36],E,E,23,[[["self"]],[T]]],[11,R[29],E,E,23,[[["self"]],[T]]],[11,R[33],E,E,23,[[["self"]],[R[37]]]],[11,R[30],E,E,23,[[],[U]]],[11,R[31],E,E,23,[[[T]],[T]]],[11,"cast",E,E,23,[[],[U]]],[11,R[32],E,E,23,[[[T]],[T]]],[11,"encode",R[121],"Encode a single dummy value.",7,[[["u16"],["self"]],[[R[15],[R[125],R[87]]],[R[125]],[R[87]]]]],[11,R[124],E,"Encode a slice of inputs and a slice of moduli as DummyVals.",7,[[["self"]],[["vec",[R[125]]],[R[87]],[R[15],["vec",R[87]]]]]],[11,R[126],E,E,7,[[["self"]],[["vec",[R[125]]],[R[87]],[R[15],["vec",R[87]]]]]],[11,R[126],R[122],E,20,[[["self"]],[["vec"],[R[15],["vec"]]]]],[11,R[124],E,E,20,[[["self"]],[["vec"],[R[15],["vec"]]]]],[11,R[64],R[123],"Receive a garbler input wire.",22,[[["u16"],["self"]],[[R[15],["wire",R[112]]],["wire"],[R[112]]]]],[11,R[126],E,"Receive garbler input wires.",22,[[["self"]],[[R[112]],[R[15],["vec",R[112]]],["vec",["wire"]]]]],[11,R[124],E,"Perform OT and obtain wires for the evaluator's inputs.",22,[[["self"]],[[R[112]],[R[15],["vec",R[112]]],["vec",["wire"]]]]],[11,"encode",E,E,23,[[["u16"],["self"]],[[R[15],["wire",R[112]]],["wire"],[R[112]]]]],[11,R[124],E,E,23,[[["self"]],[[R[112]],[R[15],["vec",R[112]]],["vec",["wire"]]]]],[11,R[126],E,E,23,[[["self"]],[[R[112]],[R[15],["vec",R[112]]],["vec",["wire"]]]]],[11,"reveal",R[121],E,7,[[["self"],[R[125]]],[["u16"],[R[15],["u16",R[87]]],[R[87]]]]],[11,"reveal",R[85],E,18,[[["wire"],["self"]],[[R[15],["u16",R[94]]],["u16"],[R[94]]]]],[11,"reveal",E,E,19,[[["wire"],["self"]],[["u16"],[R[93]],[R[15],["u16",R[93]]]]]],[11,"reveal",R[122],E,20,[[["self"]],[["u16"],[R[15],["u16"]]]]],[11,"reveal",R[123],E,22,[[["self"]],[["u16"],[R[15],["u16"]]]]],[11,"reveal",E,E,23,[[["self"]],[["u16"],[R[15],["u16"]]]]],[11,"modulus",R[110],E,32,[[["self"]],["u16"]]],[11,"modulus",R[121],E,6,[[["self"]],["u16"]]],[11,"modulus",R[85],E,0,[[["self"]],["u16"]]],[11,R[127],R[110],E,2,[[["u16"],["self"]],[[R[15],[R[89]]],[R[89]]]]],[11,"add",E,E,2,[[["self"],[R[89]]],[[R[15],[R[89]]],[R[89]]]]],[11,"sub",E,E,2,[[["self"],[R[89]]],[[R[15],[R[89]]],[R[89]]]]],[11,"cmul",E,E,2,[[["u16"],["self"],[R[89]]],[[R[15],[R[89]]],[R[89]]]]],[11,"proj",E,E,2,[[["vec",["u16"]],[R[89]],["option",["vec"]],["u16"],["self"]],[[R[15],[R[89]]],[R[89]]]]],[11,"mul",E,E,2,[[["self"],[R[89]]],[[R[15],[R[89]]],[R[89]]]]],[11,"output",E,E,2,[[["self"],[R[89]]],[[R[15],["option"]],["option",["u16"]]]]],[11,R[127],R[121],E,7,[[["u16"],["self"]],[[R[15],[R[125]]],[R[125]]]]],[11,"add",E,E,7,[[["self"],[R[125]]],[[R[15],[R[125]]],[R[125]]]]],[11,"sub",E,E,7,[[["self"],[R[125]]],[[R[15],[R[125]]],[R[125]]]]],[11,"cmul",E,E,7,[[["u16"],["self"],[R[125]]],[[R[15],[R[125]]],[R[125]]]]],[11,"mul",E,E,7,[[["self"],[R[125]]],[[R[15],[R[125]]],[R[125]]]]],[11,"proj",E,E,7,[[["vec",["u16"]],[R[125]],["option",["vec"]],["u16"],["self"]],[[R[15],[R[125]]],[R[125]]]]],[11,"output",E,E,7,[[["self"],[R[125]]],[[R[15],["option"]],["option",["u16"]]]]],[11,R[127],R[85],E,18,[[["u16"],["self"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"add",E,E,18,[[["wire"],["self"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"sub",E,E,18,[[["wire"],["self"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"cmul",E,E,18,[[["wire"],["self"],["u16"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"mul",E,E,18,[[["wire"],["self"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"proj",E,E,18,[[["vec",["u16"]],["option",["vec"]],["wire"],["self"],["u16"]],[["wire"],[R[15],["wire",R[94]]],[R[94]]]]],[11,"output",E,E,18,[[["wire"],["self"]],[["option",["u16"]],[R[94]],[R[15],["option",R[94]]]]]],[11,R[127],E,E,19,[[["u16"],["self"]],[["wire"],[R[93]],[R[15],["wire",R[93]]]]]],[11,"add",E,E,19,[[["wire"],["self"]],[["wire"],[R[93]],[R[15],["wire",R[93]]]]]],[11,"sub",E,E,19,[[["wire"],["self"]],[["wire"],[R[93]],[R[15],["wire",R[93]]]]]],[11,"cmul",E,E,19,[[["wire"],["self"],["u16"]],[["wire"],[R[93]],[R[15],["wire",R[93]]]]]],[11,"mul",E,E,19,[[["wire"],["self"]],[["wire"],[R[93]],[R[15],["wire",R[93]]]]]],[11,"proj",E,E,19,[[["vec",["u16"]],["option",["vec"]],["wire"],["self"],["u16"]],[["wire"],[R[93]],[R[15],["wire",R[93]]]]]],[11,"output",E,E,19,[[["wire"],["self"]],[[R[93]],[R[15],["option",R[93]]],["option",["u16"]]]]],[11,R[127],R[122],E,20,[[["u16"],["self"]],[R[15]]]],[11,"add",E,E,20,[[["self"]],[R[15]]]],[11,"sub",E,E,20,[[["self"]],[R[15]]]],[11,"cmul",E,E,20,[[["u16"],["self"]],[R[15]]]],[11,"mul",E,E,20,[[["self"]],[R[15]]]],[11,"proj",E,E,20,[[["vec",["u16"]],["u16"],["self"],["option",["vec"]]],[R[15]]]],[11,"output",E,E,20,[[["self"]],[[R[15],["option"]],["option",["u16"]]]]],[11,R[127],R[123],E,22,[[["u16"],["self"]],[R[15]]]],[11,"add",E,E,22,[[["wire"],["self"]],[R[15]]]],[11,"sub",E,E,22,[[["wire"],["self"]],[R[15]]]],[11,"cmul",E,E,22,[[["wire"],["self"],["u16"]],[R[15]]]],[11,"mul",E,E,22,[[["wire"],["self"]],[R[15]]]],[11,"proj",E,E,22,[[["vec",["u16"]],["option",["vec"]],["wire"],["self"],["u16"]],[R[15]]]],[11,"output",E,E,22,[[["wire"],["self"]],[[R[15],["option"]],["option",["u16"]]]]],[11,R[127],E,E,23,[[["u16"],["self"]],[R[15]]]],[11,"add",E,E,23,[[["wire"],["self"]],[R[15]]]],[11,"sub",E,E,23,[[["wire"],["self"]],[R[15]]]],[11,"cmul",E,E,23,[[["wire"],["self"],["u16"]],[R[15]]]],[11,"mul",E,E,23,[[["wire"],["self"]],[R[15]]]],[11,"proj",E,E,23,[[["vec",["u16"]],["option",["vec"]],["wire"],["self"],["u16"]],[R[15]]]],[11,"output",E,E,23,[[["self"]],[[R[15],["option"]],["option",["u16"]]]]],[11,"from",R[97],E,9,[[[R[128]]],[R[87]]]],[11,"from",E,E,10,[[[R[128]]],["self"]]],[11,"from",E,E,10,[[["error"]],["self"]]],[11,"from",E,E,10,[[["recverror"]],["self"]]],[11,"from",E,E,11,[[[R[128]]],["self"]]],[11,"from",E,E,11,[[["error"]],["self"]]],[11,"from",E,E,11,[[["vec",[R[1]]],["senderror",["vec"]]],["self"]]],[11,"from",E,E,12,[[[R[128]]],["self"]]],[11,"from",E,E,13,[[["error"]],[R[129]]]],[11,"from",E,E,13,[[["error"]],[R[129]]]],[11,"from",E,E,13,[[["parseinterror"]],[R[129]]]],[11,"from",E,E,14,[[["error"]],[R[112]]]],[11,"from",E,E,14,[[["error"]],[R[112]]]],[11,"from",E,E,14,[[[R[94]]],[R[112]]]],[11,"from",E,E,14,[[[R[93]]],[R[112]]]],[11,"from",E,E,14,[[[R[128]]],[R[112]]]],[11,"from",E,E,11,[[[R[112]]],[R[93]]]],[11,"from",E,E,10,[[[R[112]]],[R[94]]]],[11,"from",R[85],E,15,[[["bundle"]],[R[92]]]],[11,"from",E,E,17,[[["bundle"]],[R[91]]]],[11,"clone",R[110],E,32,[[["self"]],[R[89]]]],[11,"clone",E,E,1,[[["self"]],[R[88]]]],[11,"clone",R[121],E,6,[[["self"]],[R[125]]]],[11,"clone",R[85],E,15,[[["self"]],[R[92]]]],[11,"clone",E,E,16,[[["self"]],["bundle"]]],[11,"clone",E,E,17,[[["self"]],[R[91]]]],[11,"clone",R[122],E,21,[[["self"]],[R[130]]]],[11,"clone",R[85],E,0,[[["self"]],["wire"]]],[11,R[43],E,E,0,[[],["self"]]],[11,"eq",R[110],E,32,[[[R[89]],["self"]],["bool"]]],[11,"ne",E,E,32,[[[R[89]],["self"]],["bool"]]],[11,"eq",E,E,1,[[[R[88]],["self"]],["bool"]]],[11,"ne",E,E,1,[[[R[88]],["self"]],["bool"]]],[11,"eq",R[85],E,0,[[["wire"],["self"]],["bool"]]],[11,"ne",E,E,0,[[["wire"],["self"]],["bool"]]],[11,"fmt",R[110],E,32,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[97],E,8,[[["self"],[R[47]]],[R[15]]]],[11,"fmt",E,E,9,[[["self"],[R[47]]],[R[15]]]],[11,"fmt",E,E,10,[[["self"],[R[47]]],[R[15]]]],[11,"fmt",E,E,11,[[["self"],[R[47]]],[R[15]]]],[11,"fmt",E,E,12,[[["self"],[R[47]]],[R[15]]]],[11,"fmt",E,E,13,[[["self"],[R[47]]],[R[15]]]],[11,"fmt",E,E,14,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[122],"Print information about the fancy computation.",21,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[110],E,32,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,1,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[120],E,3,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,4,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,5,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[121],E,6,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[97],E,8,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,9,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,10,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,11,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,12,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,13,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,14,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[122],E,21,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[85],E,0,[[[R[47]],["self"]],[R[15]]]],[11,"deref",E,E,15,[[["self"]],["bundle"]]],[11,"deref",E,E,17,[[["self"]],["bundle"]]],[11,"deref",R[123],E,23,[[["self"]]]],[11,"deref_mut",E,E,23,[[["self"]],["gb"]]],[11,"index",R[85],E,16,[[["self"],[R[2]]]]],[11,"write",R[120],E,5,[[["self"]],[[R[15],[R[2]]],[R[2]]]]],[11,"flush",E,E,5,[[["self"]],[R[15]]]],[11,R[131],R[85],R[132],25,[[["self"],[R[2]],["u128"]],[[R[15],[R[92]]],[R[92]]]]],[11,R[133],E,R[134],25,[[["self"],[R[92]]],[["option",["u128"]],[R[15],["option"]]]]],[11,R[135],E,R[136],25,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,"bin_xor",E,R[137],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_and",E,R[138],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_or",E,R[139],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[140],E,R[141],25,[[["self"],[R[92]]],[R[15]]]],[11,R[142],E,R[143],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[144],E,R[145],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[146],E,R[147],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,R[148],E,R[149],25,[[["self"],[R[92]]],[R[15]]]],[11,R[150],E,R[151],25,[[[R[2]],["u128"],["self"]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_cmul",E,R[152],25,[[[R[2]],["u128"],["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_abs",E,R[153],25,[[["self"],[R[92]]],[[R[15],[R[92]]],[R[92]]]]],[11,"bin_lt",E,R[117],25,[[["self"],[R[92]]],[R[15]]]],[11,"bin_geq",E,R[118],25,[[["self"],[R[92]]],[R[15]]]],[11,"bin_max",E,R[119],25,[[["self"]],[[R[15],[R[92]]],[R[92]]]]],[11,R[154],E,R[155],25,[[["self"],[R[92]]],[[R[15],["vec"]],["vec"]]]],[11,R[156],E,R[157],26,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[158],E,R[159],26,[[["self"],["bundle"]],[["option",["vec"]],[R[15],["option"]]]]],[11,R[160],E,R[161],26,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,R[162],E,R[163],26,[[["self"],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[164],E,R[165],26,[[["self"],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[166],E,R[167],26,[[["self"],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[168],E,R[169],26,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[170],E,R[171],26,[[["self"]],[R[15]]]],[11,R[172],E,R[173],26,[[["bundle"],["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,"mask",E,R[174],26,[[["bundle"],["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,"shift",E,R[175],26,[[["self"],[R[2]],["bundle"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[176],E,R[177],26,[[["self"],["bundle"]],[R[15]]]],[11,R[178],E,R[179],27,[[["self"],["u128"]],[[R[15],[R[91]]],[R[91]]]]],[11,R[180],E,R[181],27,[[["self"],[R[91]]],[["option",["u128"]],[R[15],["option"]]]]],[11,R[182],E,R[183],27,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]],[11,"crt_add",E,R[184],27,[[["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_sub",E,R[185],27,[[["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_cmul",E,R[186],27,[[["u128"],["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_mul",E,R[187],27,[[["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_cexp",E,R[188],27,[[["u16"],["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_rem",E,R[189],27,[[["u16"],["self"],[R[91]]],[[R[15],[R[91]]],[R[91]]]]],[11,R[190],E,R[191],27,[[["self"],[R[91]]],[R[15]]]],[11,"crt_relu",E,R[192],27,[[["str"],[R[91]],["option"],["self"]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_sign",E,R[193],27,[[["str"],["self"],[R[91]]],[R[15]]]],[11,"crt_sgn",E,R[194],27,[[["str"],[R[91]],["option"],["self"]],[[R[15],[R[91]]],[R[91]]]]],[11,"crt_lt",E,R[117],27,[[["str"],["self"],[R[91]]],[R[15]]]],[11,"crt_geq",E,R[118],27,[[["str"],["self"],[R[91]]],[R[15]]]],[11,"crt_max",E,R[119],27,[[["str"],["self"]],[[R[15],[R[91]]],[R[91]]]]],[11,"encode",E,R[195],28,[[["u16"],["self"]],[R[15]]]],[11,R[64],E,R[196],28,[[["u16"],["self"]],[R[15]]]],[11,R[197],E,R[198],28,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[199],E,R[200],28,[[["self"]],[[R[15],["bundle"]],["bundle"]]]],[11,R[201],E,R[202],28,[[["self"]],[[R[15],["vec"]],["vec",["bundle"]]]]],[11,R[203],E,R[204],28,[[["self"]],[[R[15],["vec"]],["vec",["bundle"]]]]],[11,R[205],E,R[206],28,[[["self"],["u128"]],[[R[15],[R[91]]],[R[91]]]]],[11,R[207],E,R[208],28,[[["self"],["u128"]],[[R[15],[R[91]]],[R[91]]]]],[11,R[209],E,R[210],28,[[["self"],["u128"]],[[R[15],["vec"]],["vec",[R[91]]]]]],[11,R[211],E,R[212],28,[[["self"],[R[2]],["u128"]],[[R[15],["vec"]],["vec",[R[91]]]]]],[11,R[213],E,R[214],28,[[["self"],[R[2]],["u128"]],[[R[92]],[R[15],[R[92]]]]]],[11,R[215],E,R[216],28,[[["self"],[R[2]]],[[R[92]],[R[15],[R[92]]]]]],[11,R[217],E,R[218],28,[[["self"],[R[2]]],[[R[15],["vec"]],["vec",[R[92]]]]]],[11,R[219],E,R[220],28,[[["self"],[R[2]]],[[R[15],["vec"]],["vec",[R[92]]]]]],[11,R[221],E,R[222],29,[[["self"]],[["vec",["u16"]],[R[15],["vec"]]]]],[11,R[223],E,R[224],29,[[["self"],["bundle"]],[["vec",["u16"]],[R[15],["vec"]]]]],[11,R[225],E,R[226],29,[[["self"]],[["vec",["vec"]],[R[15],["vec"]]]]],[11,R[227],E,R[228],29,[[["self"],[R[91]]],[["u128"],[R[15],["u128"]]]]],[11,R[229],E,R[230],29,[[["self"]],[[R[15],["vec"]],["vec",["u128"]]]]],[11,R[231],E,R[232],29,[[["self"],[R[92]]],[["u128"],[R[15],["u128"]]]]],[11,R[233],E,R[234],29,[[["self"]],[[R[15],["vec"]],["vec",["u128"]]]]],[11,"add_many",E,R[235],31,[[["self"]],[R[15]]]],[11,"xor",E,R[236],31,[[["self"]],[R[15]]]],[11,"negate",E,R[237],31,[[["self"]],[R[15]]]],[11,"and",E,R[238],31,[[["self"]],[R[15]]]],[11,"or",E,R[239],31,[[["self"]],[R[15]]]],[11,"and_many",E,R[240],31,[[["self"]],[R[15]]]],[11,"or_many",E,R[241],31,[[["self"]],[R[15]]]],[11,R[242],E,R[243],31,[[["u16"],["self"]],[R[15]]]],[11,"adder",E,R[244],31,[[["self"],["option"]],[R[15]]]],[11,"mux",E,R[245],31,[[["self"]],[R[15]]]],[11,R[246],E,R[247],31,[[["self"],["bool"]],[R[15]]]],[11,"outputs",E,R[248],31,[[["self"]],[["option",["vec"]],[R[15],["option"]]]]]],"p":[[4,"Wire"],[3,"Circuit"],[3,R[249]],[3,R[250]],[3,"Encoder"],[3,R[251]],[3,"DummyVal"],[3,"Dummy"],[4,R[99]],[4,R[252]],[4,R[109]],[4,R[108]],[4,R[253]],[4,R[254]],[4,R[255]],[3,R[256]],[3,"Bundle"],[3,R[257]],[3,R[111]],[3,"Garbler"],[3,"Informer"],[3,R[258]],[3,R[111]],[3,"Garbler"],[8,"RngExt"],[8,R[259]],[8,R[260]],[8,R[261]],[8,R[262]],[8,R[263]],[8,R[264]],[8,"Fancy"],[3,R[265]]]};
searchIndex["ocelot"]={"doc":"`ocelot`: A rust library for oblivious transfer","i":[[4,"Error",R[79],"Errors produced by `ocelot`.",N,N],[13,"InvalidInputLength",E,"The input length is invalid.",0,N],[13,"IoError",E,R[266],0,N],[13,"Other",E,"Some other error, given by `String`.",0,N],[13,R[268],E,R[269],0,N],[0,"oprf",E,"Oblivious PRF traits + instantiations.",N,N],[0,"kkrt",R[54],"Implementation of the batched, related-key oblivious…",N,N],[3,R[58],R[67],"KKRT oblivious PRF sender.",N,N],[3,R[55],E,"KKRT oblivious PRF receiver.",N,N],[11,"encode",E,"Encode `input` into `output`. This is not the same as the…",1,[[["self"]]]],[0,"kmprt",R[54],"Implementation of the hash-based multi-use OPPRF of…",N,N],[3,R[58],R[68],"KMPRT hashing-based OPPRF sender.",N,N],[3,R[55],E,"KMPRT oblivious programmable PRF receiver.",N,N],[11,"init",E,"Initialize the OPPRF sender.",2,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,"Run the OPPRF for `ninputs` inputs with the pairs given in…",2,[[[R[2]],["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",E,"Initialize the OPPRF receiver.",3,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,"Run the OPPRF on inputs provided by the `inputs` slice.",3,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec",[R[16]]],["error"]]]],[6,"KkrtSender",R[54],"KKRT oblivious PRF sender using ALSZ OT extension with…",N,N],[6,"KkrtReceiver",E,"KKRT oblivious PRF receiver using ALSZ OT extension with…",N,N],[6,"KmprtSender",E,"KMPRT hash-based OPPRF sender, using KKRT as the…",N,N],[6,"KmprtReceiver",E,"KMPRT hash-based OPPRF receiver, using KKRT as the…",N,N],[8,R[80],E,"Trait containing the associated types used by an oblivious…",N,N],[16,"Seed",E,"PRF seed.",4,N],[16,"Input",E,"PRF input.",4,N],[16,"Output",E,"PRF output.",4,N],[8,R[58],E,"Trait for an oblivious PRF sender.",N,N],[10,"init",E,R[56],5,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[10,"send",E,"Runs `m` OPRF instances as the sender, returning the OPRF…",5,[[[R[2]],["rng"],["c"],["self"]],[["vec"],[R[15],["vec","error"]],["error"]]]],[10,"compute",E,"Computes the oblivious PRF on seed `seed` and input `input`.",5,[[["self"]]]],[8,R[55],E,"Trait for an oblivious PRF receiver.",N,N],[10,"init",E,R[56],6,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[10,R[64],E,"Runs the oblivious PRF on inputs `inputs`, returning the…",6,[[["rng"],["c"],["self"]],[["vec"],["error"],[R[15],["vec","error"]]]]],[0,"ot",R[79],"Oblivious transfer traits + instantiations.",N,N],[0,"alsz",R[57],"Implementation of the Asharov-Lindell-Schneider-Zohner…",N,N],[3,R[58],R[69],R[59],N,N],[3,R[55],E,R[60],N,N],[0,"chou_orlandi",R[57],"Implementation of the Chou-Orlandi oblivious transfer…",N,N],[3,R[58],R[70],R[59],N,N],[3,R[55],E,R[60],N,N],[0,"dummy",R[57],"Implementation of an entirely insecure oblivious transfer…",N,N],[3,R[58],R[72],R[59],N,N],[3,R[55],E,R[60],N,N],[0,"kos",R[57],"Implementation of the Keller-Orsini-Scholl oblivious…",N,N],[3,R[58],R[73],"Oblivious transfer extension sender.",N,N],[3,R[55],E,"Oblivious transfer extension receiver.",N,N],[0,"naor_pinkas",R[57],"Implementation of the Naor-Pinkas oblivious transfer…",N,N],[3,R[58],R[74],R[59],N,N],[3,R[55],E,R[60],N,N],[6,"ChouOrlandiSender",R[57],"Instantiation of the Chou-Orlandi OT sender.",N,N],[6,"ChouOrlandiReceiver",E,"Instantiation of the Chou-Orlandi OT receiver.",N,N],[6,"DummySender",E,"Instantiation of the dummy OT sender.",N,N],[6,"DummyReceiver",E,"Instantiation of the dummy OT receiver.",N,N],[6,"NaorPinkasSender",E,"Instantiation of the Naor-Pinkas OT sender.",N,N],[6,"NaorPinkasReceiver",E,"Instantiation of the Naor-Pinkas OT receiver.",N,N],[6,"AlszSender",E,"Instantiation of the ALSZ OT extension sender, using…",N,N],[6,"AlszReceiver",E,"Instantiation of the ALSZ OT extension receiver, using…",N,N],[6,"KosSender",E,"Instantiation of the KOS OT extension sender, using…",N,N],[6,"KosReceiver",E,"Instantiation of the KOS OT extension receiver, using…",N,N],[8,R[58],E,R[61],N,N],[16,"Msg",E,R[62],7,N],[10,"init",E,R[63],7,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[10,"send",E,"Sends messages.",7,[[["c"],["self"],["rng"]],[[R[15],["error"]],["error"]]]],[8,R[55],E,R[61],N,N],[16,"Msg",E,R[62],8,N],[10,"init",E,R[63],8,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[10,R[64],E,"Receives messages.",8,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[8,R[81],E,R[65],N,N],[10,R[75],E,"Correlated oblivious transfer send. Takes as input an…",9,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec"]]]],[8,R[82],E,R[65],N,N],[10,R[76],E,"Correlated oblivious transfer receive.",10,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[8,R[83],E,R[66],N,N],[10,R[77],E,"Random oblivious transfer send. Returns a vector of tuples…",11,[[[R[2]],["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec"]]]],[8,R[84],E,R[66],N,N],[10,R[78],E,"Random oblivious transfer receive.",12,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[11,"into",R[79],E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[34],E,E,0,[[["self"]],[R[71]]]],[11,R[27],E,E,0,[[[U]],[R[15]]]],[11,R[28],E,E,0,[[],[R[15]]]],[11,R[36],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[37]]]],[11,R[30],E,E,0,[[],[U]]],[11,R[31],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[32],E,E,0,[[[T]],[T]]],[11,"into",R[67],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[27],E,E,1,[[[U]],[R[15]]]],[11,R[28],E,E,1,[[],[R[15]]]],[11,R[36],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[R[37]]]],[11,R[30],E,E,1,[[],[U]]],[11,R[31],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[32],E,E,1,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[27],E,E,13,[[[U]],[R[15]]]],[11,R[28],E,E,13,[[],[R[15]]]],[11,R[36],E,E,13,[[["self"]],[T]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[["self"]],[R[37]]]],[11,R[30],E,E,13,[[],[U]]],[11,R[31],E,E,13,[[[T]],[T]]],[11,"cast",E,E,13,[[],[U]]],[11,R[32],E,E,13,[[[T]],[T]]],[11,"into",R[68],E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[27],E,E,2,[[[U]],[R[15]]]],[11,R[28],E,E,2,[[],[R[15]]]],[11,R[36],E,E,2,[[["self"]],[T]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[37]]]],[11,R[30],E,E,2,[[],[U]]],[11,R[31],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[32],E,E,2,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[27],E,E,3,[[[U]],[R[15]]]],[11,R[28],E,E,3,[[],[R[15]]]],[11,R[36],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[37]]]],[11,R[30],E,E,3,[[],[U]]],[11,R[31],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[32],E,E,3,[[[T]],[T]]],[11,"into",R[69],E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[34],E,E,14,[[["self"]],[R[71]]]],[11,R[27],E,E,14,[[[U]],[R[15]]]],[11,R[28],E,E,14,[[],[R[15]]]],[11,R[36],E,E,14,[[["self"]],[T]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[["self"]],[R[37]]]],[11,R[30],E,E,14,[[],[U]]],[11,R[31],E,E,14,[[[T]],[T]]],[11,"cast",E,E,14,[[],[U]]],[11,R[32],E,E,14,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[34],E,E,15,[[["self"]],[R[71]]]],[11,R[27],E,E,15,[[[U]],[R[15]]]],[11,R[28],E,E,15,[[],[R[15]]]],[11,R[36],E,E,15,[[["self"]],[T]]],[11,R[29],E,E,15,[[["self"]],[T]]],[11,R[33],E,E,15,[[["self"]],[R[37]]]],[11,R[30],E,E,15,[[],[U]]],[11,R[31],E,E,15,[[[T]],[T]]],[11,"cast",E,E,15,[[],[U]]],[11,R[32],E,E,15,[[[T]],[T]]],[11,"into",R[70],E,16,[[],[U]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[34],E,E,16,[[["self"]],[R[71]]]],[11,R[27],E,E,16,[[[U]],[R[15]]]],[11,R[28],E,E,16,[[],[R[15]]]],[11,R[36],E,E,16,[[["self"]],[T]]],[11,R[29],E,E,16,[[["self"]],[T]]],[11,R[33],E,E,16,[[["self"]],[R[37]]]],[11,R[30],E,E,16,[[],[U]]],[11,R[31],E,E,16,[[[T]],[T]]],[11,"cast",E,E,16,[[],[U]]],[11,R[32],E,E,16,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[34],E,E,17,[[["self"]],[R[71]]]],[11,R[27],E,E,17,[[[U]],[R[15]]]],[11,R[28],E,E,17,[[],[R[15]]]],[11,R[36],E,E,17,[[["self"]],[T]]],[11,R[29],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,[[["self"]],[R[37]]]],[11,R[30],E,E,17,[[],[U]]],[11,R[31],E,E,17,[[[T]],[T]]],[11,"cast",E,E,17,[[],[U]]],[11,R[32],E,E,17,[[[T]],[T]]],[11,"into",R[72],E,18,[[],[U]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[34],E,E,18,[[["self"]],[R[71]]]],[11,R[27],E,E,18,[[[U]],[R[15]]]],[11,R[28],E,E,18,[[],[R[15]]]],[11,R[36],E,E,18,[[["self"]],[T]]],[11,R[29],E,E,18,[[["self"]],[T]]],[11,R[33],E,E,18,[[["self"]],[R[37]]]],[11,R[30],E,E,18,[[],[U]]],[11,R[31],E,E,18,[[[T]],[T]]],[11,"cast",E,E,18,[[],[U]]],[11,R[32],E,E,18,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[34],E,E,19,[[["self"]],[R[71]]]],[11,R[27],E,E,19,[[[U]],[R[15]]]],[11,R[28],E,E,19,[[],[R[15]]]],[11,R[36],E,E,19,[[["self"]],[T]]],[11,R[29],E,E,19,[[["self"]],[T]]],[11,R[33],E,E,19,[[["self"]],[R[37]]]],[11,R[30],E,E,19,[[],[U]]],[11,R[31],E,E,19,[[[T]],[T]]],[11,"cast",E,E,19,[[],[U]]],[11,R[32],E,E,19,[[[T]],[T]]],[11,"into",R[73],E,20,[[],[U]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[34],E,E,20,[[["self"]],[R[71]]]],[11,R[27],E,E,20,[[[U]],[R[15]]]],[11,R[28],E,E,20,[[],[R[15]]]],[11,R[36],E,E,20,[[["self"]],[T]]],[11,R[29],E,E,20,[[["self"]],[T]]],[11,R[33],E,E,20,[[["self"]],[R[37]]]],[11,R[30],E,E,20,[[],[U]]],[11,R[31],E,E,20,[[[T]],[T]]],[11,"cast",E,E,20,[[],[U]]],[11,R[32],E,E,20,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[34],E,E,21,[[["self"]],[R[71]]]],[11,R[27],E,E,21,[[[U]],[R[15]]]],[11,R[28],E,E,21,[[],[R[15]]]],[11,R[36],E,E,21,[[["self"]],[T]]],[11,R[29],E,E,21,[[["self"]],[T]]],[11,R[33],E,E,21,[[["self"]],[R[37]]]],[11,R[30],E,E,21,[[],[U]]],[11,R[31],E,E,21,[[[T]],[T]]],[11,"cast",E,E,21,[[],[U]]],[11,R[32],E,E,21,[[[T]],[T]]],[11,"into",R[74],E,22,[[],[U]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[34],E,E,22,[[["self"]],[R[71]]]],[11,R[27],E,E,22,[[[U]],[R[15]]]],[11,R[28],E,E,22,[[],[R[15]]]],[11,R[36],E,E,22,[[["self"]],[T]]],[11,R[29],E,E,22,[[["self"]],[T]]],[11,R[33],E,E,22,[[["self"]],[R[37]]]],[11,R[30],E,E,22,[[],[U]]],[11,R[31],E,E,22,[[[T]],[T]]],[11,"cast",E,E,22,[[],[U]]],[11,R[32],E,E,22,[[[T]],[T]]],[11,"into",E,E,23,[[],[U]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[34],E,E,23,[[["self"]],[R[71]]]],[11,R[27],E,E,23,[[[U]],[R[15]]]],[11,R[28],E,E,23,[[],[R[15]]]],[11,R[36],E,E,23,[[["self"]],[T]]],[11,R[29],E,E,23,[[["self"]],[T]]],[11,R[33],E,E,23,[[["self"]],[R[37]]]],[11,R[30],E,E,23,[[],[U]]],[11,R[31],E,E,23,[[[T]],[T]]],[11,"cast",E,E,23,[[],[U]]],[11,R[32],E,E,23,[[[T]],[T]]],[11,"init",R[67],E,1,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,E,1,[[[R[2]],["rng"],["c"],["self"]],[["vec"],[R[15],["vec","error"]],["error"]]]],[11,"compute",E,E,1,[[["self"]]]],[11,"init",E,E,13,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,E,13,[[["rng"],["c"],["self"]],[["vec"],["error"],[R[15],["vec","error"]]]]],[11,"init",R[69],E,14,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,E,14,[[["c"],["self"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"init",R[70],E,16,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,E,16,[[["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",R[72],E,18,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,E,18,[[["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",R[73],E,20,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,E,20,[[["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",R[74],E,22,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,E,22,[[["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",R[69],E,15,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,E,15,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[11,"init",R[70],E,17,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,E,17,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec",[R[1]]]]]],[11,"init",R[72],E,19,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,E,19,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec",[R[1]]]]]],[11,"init",R[73],E,21,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,E,21,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec",[R[1]]]]]],[11,"init",R[74],E,23,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,E,23,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec",[R[1]]]]]],[11,R[75],R[69],E,14,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec"]]]],[11,R[75],R[73],E,20,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec"]]]],[11,R[76],R[69],E,15,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[11,R[76],R[73],E,21,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[11,R[77],R[69],E,14,[[[R[2]],["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec"]]]],[11,R[77],R[73],E,20,[[[R[2]],["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec"]]]],[11,R[78],R[69],E,15,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[11,R[78],R[73],E,21,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["vec"],["error"]]]],[11,"from",R[79],E,0,[[["error"]],["error"]]],[11,"from",E,E,0,[[["error"]],["error"]]],[11,"fmt",E,E,0,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[69],E,14,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,15,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[70],E,16,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,17,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[72],E,18,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,19,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[73],E,20,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,21,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[74],E,22,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,23,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[79],E,0,[[[R[47]],["self"]],[R[15]]]]],"p":[[4,"Error"],[3,R[58]],[3,R[58]],[3,R[55]],[8,R[80]],[8,R[58]],[8,R[55]],[8,R[58]],[8,R[55]],[8,R[81]],[8,R[82]],[8,R[83]],[8,R[84]],[3,R[55]],[3,R[58]],[3,R[55]],[3,R[58]],[3,R[55]],[3,R[58]],[3,R[55]],[3,R[58]],[3,R[55]],[3,R[58]],[3,R[55]]]};
searchIndex["popsicle"]={"doc":"`popsicle`: A rust library for private set intersection","i":[[4,"Error",R[270],"Errors produced by the private set intersection protocols.",N,N],[13,R[268],E,R[269],0,N],[13,"OprfError",E,"The underlying oblivious PRF failed.",0,N],[13,"IoError",E,"An input/output error occurred.",0,N],[13,"CuckooHashFull",E,"The cuckoo hash is full.",0,N],[13,"InvalidCuckooSetSize",E,"The provided cuckoo hash set size is invalid.",0,N],[13,"InvalidCuckooParameters",E,"The provided cuckoo hash parameters are invalid.",0,N],[12,"nitems","popsicle::Error","Number of items.",0,N],[12,"nhashes",E,"Number of hashes.",0,N],[13,"PsiProtocolError",R[270],"An error occurred in the PSI protocol.",0,N],[13,"InvalidPayloadsLength",E,"Not enough payloads.",0,N],[13,"SSLError",E,"SSL Error",0,N],[13,"TwopcError",E,"An error occurred in the underlying 2PC protocol.",0,N],[0,"kmprt",E,"Implementation of the…",N,N],[3,R[58],R[273],"KMPRT sender - there can be many of these.",N,N],[3,R[55],E,"KMPRT receiver - there can only be one of these.",N,N],[6,"PartyId",E,"The party number for each party.",N,N],[0,"psty",R[270],"Implementation of the Pinkas-Schneider-Tkachenko-Yanai…",N,N],[3,R[58],R[274],R[271],N,N],[3,R[288],E,"State of the sender.",N,N],[3,R[55],E,R[272],N,N],[3,R[289],E,"State of the receiver.",N,N],[6,"Msg",E,"The type of values in the sender and receiver's sets.",N,N],[0,"psz",R[270],"Implementation of the Pinkas-Schneider-Zohner private set…",N,N],[3,R[58],R[275],R[271],N,N],[3,R[55],E,R[272],N,N],[6,R[58],R[270],R[271],N,N],[6,R[55],E,R[272],N,N],[6,"ExtendedSender",E,"Extended private set intersection sender.",N,N],[6,"ExtendedReceiver",E,"Extended private set intersection receiver.",N,N],[6,"MultiPartySender",E,"Multi-party private set intersection sender.",N,N],[6,"MultiPartyReceiver",E,"Multi-party private set intersection receiver.",N,N],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[34],E,E,0,[[["self"]],[R[71]]]],[11,R[27],E,E,0,[[[U]],[R[15]]]],[11,R[28],E,E,0,[[],[R[15]]]],[11,R[36],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[37]]]],[11,R[30],E,E,0,[[],[U]]],[11,R[31],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[32],E,E,0,[[[T]],[T]]],[11,"into",R[273],E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[27],E,E,1,[[[U]],[R[15]]]],[11,R[28],E,E,1,[[],[R[15]]]],[11,R[36],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[R[37]]]],[11,R[30],E,E,1,[[],[U]]],[11,R[31],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[32],E,E,1,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[27],E,E,2,[[[U]],[R[15]]]],[11,R[28],E,E,2,[[],[R[15]]]],[11,R[36],E,E,2,[[["self"]],[T]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[37]]]],[11,R[30],E,E,2,[[],[U]]],[11,R[31],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[32],E,E,2,[[[T]],[T]]],[11,"into",R[274],E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[27],E,E,3,[[[U]],[R[15]]]],[11,R[28],E,E,3,[[],[R[15]]]],[11,R[36],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[37]]]],[11,R[30],E,E,3,[[],[U]]],[11,R[31],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[32],E,E,3,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[27],E,E,4,[[[U]],[R[15]]]],[11,R[28],E,E,4,[[],[R[15]]]],[11,R[36],E,E,4,[[["self"]],[T]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[37]]]],[11,R[30],E,E,4,[[],[U]]],[11,R[31],E,E,4,[[[T]],[T]]],[11,"cast",E,E,4,[[],[U]]],[11,R[32],E,E,4,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[27],E,E,5,[[[U]],[R[15]]]],[11,R[28],E,E,5,[[],[R[15]]]],[11,R[36],E,E,5,[[["self"]],[T]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[R[37]]]],[11,R[30],E,E,5,[[],[U]]],[11,R[31],E,E,5,[[[T]],[T]]],[11,"cast",E,E,5,[[],[U]]],[11,R[32],E,E,5,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[27],E,E,6,[[[U]],[R[15]]]],[11,R[28],E,E,6,[[],[R[15]]]],[11,R[36],E,E,6,[[["self"]],[T]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[R[37]]]],[11,R[30],E,E,6,[[],[U]]],[11,R[31],E,E,6,[[[T]],[T]]],[11,"cast",E,E,6,[[],[U]]],[11,R[32],E,E,6,[[[T]],[T]]],[11,"into",R[275],E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[27],E,E,7,[[[U]],[R[15]]]],[11,R[28],E,E,7,[[],[R[15]]]],[11,R[36],E,E,7,[[["self"]],[T]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"]],[R[37]]]],[11,R[30],E,E,7,[[],[U]]],[11,R[31],E,E,7,[[[T]],[T]]],[11,"cast",E,E,7,[[],[U]]],[11,R[32],E,E,7,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[27],E,E,8,[[[U]],[R[15]]]],[11,R[28],E,E,8,[[],[R[15]]]],[11,R[36],E,E,8,[[["self"]],[T]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[["self"]],[R[37]]]],[11,R[30],E,E,8,[[],[U]]],[11,R[31],E,E,8,[[[T]],[T]]],[11,"cast",E,E,8,[[],[U]]],[11,R[32],E,E,8,[[[T]],[T]]],[11,"from",R[270],E,0,[[["errorstack"]],["error"]]],[11,"from",E,E,0,[[["error"]],["error"]]],[11,"from",E,E,0,[[["error"]],["error"]]],[11,"from",E,E,0,[[["error"]],["error"]]],[11,"from",E,E,0,[[[R[112]]],["error"]]],[11,"fmt",E,E,0,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,0,[[[R[47]],["self"]],[R[15]]]],[11,"init",R[273],"Initialize a PSI sender.",1,[[["rng"],["partyid"]],[[R[15],["error"]],["error"]]]],[11,"send",E,"Send inputs to all parties and particpate in one party…",1,[[["rng"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",E,R[277],2,[[["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,"Send inputs and receive result - only one party should…",2,[[["rng"],["self"]],[[R[15],["vec","error"]],["error"],["vec",[R[1]]]]]],[11,"init",R[274],R[285],3,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,R[278],3,[[["rng"],["c"],["self"]],[[R[15],[R[276],"error"]],[R[276]],["error"]]]],[11,R[280],E,"Run the setup phase, producing a garbler for the next stage.",4,[[["c"],["self"],["rng"]],[["error"],[R[15],["error"]]]]],[11,R[281],E,R[282],4,[[["c"],["self"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[283],E,R[284],4,[[["c"],["self"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[287],E,"Receive encrypted payloads from the Sender.",4,[[["c"],["self"],[R[2]]],[["vec",["vec"]],["error"],[R[15],["vec","error"]]]]],[11,"init",E,R[277],5,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,R[278],5,[[["rng"],["c"],["self"]],[[R[15],[R[279],"error"]],["error"],[R[279]]]]],[11,R[280],E,"Run the setup phase, producing an evaluator for the next…",6,[[["c"],["self"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[281],E,R[282],6,[[["c"],["self"],["rng"]],[[R[15],["vec","error"]],["vec",["msg"]],["error"]]]],[11,R[283],E,R[284],6,[[["c"],["self"],["rng"]],[["error"],[R[2]],[R[15],[R[2],"error"]]]]],[11,R[286],E,"Send encrypted payloads to the Receiver, who can only…",6,[[["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,"init",R[275],R[285],7,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,"send",E,R[278],7,[[["rng"],["c"],["self"]],[[R[15],["error"]],["error"]]]],[11,R[286],E,"Run the PSI protocol over `inputs`. Returns a random key…",7,[[["rng"],["c"],["self"]],[[R[15],["vec","error"]],["error"],["vec",[R[1]]]]]],[11,"init",E,R[277],8,[[["c"],["rng"]],[[R[15],["error"]],["error"]]]],[11,R[64],E,R[278],8,[[["rng"],["c"],["self"]],[["vec",["vec"]],["error"],[R[15],["vec","error"]]]]],[11,R[287],E,"Run the PSI protocol over `inputs`, receiving a vector of…",8,[[["rng"],["c"],["self"]],[["error"],[R[15],["hashmap","error"]],["hashmap",["vec",R[1]]]]]]],"p":[[4,"Error"],[3,R[58]],[3,R[55]],[3,R[58]],[3,R[288]],[3,R[55]],[3,R[289]],[3,R[58]],[3,R[55]]]};
searchIndex["scuttlebutt"]={"doc":"The `scuttlebutt` multi-party computation utilities…","i":[[3,"Aes128",R[3],"AES-128, encryption only.",N,N],[3,"Aes256",E,"AES-256, encryption only.",N,N],[3,"Block",E,"A 128-bit chunk.",N,N],[12,"0",E,E,0,N],[3,R[49],E,"A 512-bit value.",N,N],[3,R[4],E,R[5],N,N],[3,R[6],E,R[7],N,N],[3,R[8],E,R[9],N,N],[3,"AesHash",E,"AES-based correlation-robust hash function.",N,N],[3,"AesRng",E,"Implementation of a random number generator based on…",N,N],[5,R[10],E,R[11],N,[[]]],[5,R[12],E,R[13],N,[[]]],[11,"new",E,"Create a new `Aes128` object, using `key` as the AES key.",1,[[[R[1]]],["self"]]],[11,R[0],E,"Encrypt a block, outputting the ciphertext.",1,[[["self"],[R[1]]],[R[1]]]],[11,"encrypt4",E,"Encrypt four blocks at a time, outputting the ciphertexts.",1,[[["self"]]]],[11,"encrypt8",E,"Encrypt eight blocks at a time, outputting the ciphertexts.",1,[[["self"]]]],[11,"new",E,"Make a new `Aes256` object with key `key`.",2,[[],["self"]]],[11,R[0],E,"Encrypt block `m`.",2,[[["self"],[R[1]]],[R[1]]]],[11,"as_ptr",E,"Convert into a pointer.",0,[[["self"]]]],[11,"as_mut_ptr",E,"Convert into a mutable pointer.",0,[[["self"]]]],[11,"clmul",E,"Carryless multiplication.",0,[[]]],[11,"hash_pt",E,"Hash an elliptic curve point `pt` and tweak `tweak`.",0,[[[R[17]],[R[2]]],["self"]]],[11,"lsb",E,"Return the least significant bit.",0,[[["self"]],["bool"]]],[11,"set_lsb",E,"Set the least significant bit.",0,[[["self"]],[R[1]]]],[11,"flip",E,"Flip all bits.",0,[[["self"]],["self"]]],[11,"try_from_slice",E,"Try to create a `Block` from a slice of bytes. The slice…",0,[[],["option"]]],[11,"prefix",E,"Return the first `n` bytes, where `n` must be `<= 64`.",3,[[["self"],[R[2]]]]],[11,"prefix_mut",E,"Return the first `n` bytes as mutable, where `n` must be…",3,[[["self"],[R[2]]]]],[0,R[45],E,"Implementation of a bloom filter.",N,N],[3,R[50],R[38],"Simple implementation of a Bloom Filter. Which is…",N,N],[11,"new",E,"Create a new BloomFilter with `size` entries, using…",4,[[[R[2]]],["self"]]],[11,"compute_expansion",E,"Compute required expansion for false positive probability…",4,[[["f64"]],["f64"]]],[11,"compute_nhashes",E,"Compute required number of hash functions for false…",4,[[["f64"]],[R[2]]]],[11,"with_false_positive_prob",E,"Create a new BloomFilter with false positive probability…",4,[[["f64"],[R[2]]],["self"]]],[11,"len",E,"Get the number of bins in this BloomFilter.",4,[[["self"]],[R[2]]]],[11,"nhashes",E,"Get the number of hash functions in this BloomFilter.",4,[[["self"]],[R[2]]]],[11,"bins",E,"Get bloom filter bins.",4,[[["self"]]]],[11,"as_bytes",E,"Get bloom filter bins packed in bytes.",4,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"from_bytes",E,"Create bloom filter from bytes.",4,[[[R[2]]],["self"]]],[11,"bin",E,"Compute the bin that this value would go to in a…",4,[[["v"],[R[2]]],[R[2]]]],[11,"insert",E,"Insert an item into the BloomFilter.",4,[[["self"],["v"]]]],[11,"contains",E,"Check whether an item exists in the BloomFilter.",4,[[["self"],["v"]],["bool"]]],[0,"channel",R[3],"Module for encapsulating communication channels for…",N,N],[3,R[4],R[14],R[5],N,N],[3,R[6],E,R[7],N,N],[3,R[8],E,R[9],N,N],[3,"Channel",E,"A standard read/write channel that implements…",N,N],[5,R[10],E,R[11],N,[[]]],[5,R[12],E,R[13],N,[[]]],[11,"new",R[3],"Make a new `HashChannel` from a `reader` and a `writer`.",5,[[["w"],["r"]],["self"]]],[11,"finish",E,"Consume the channel and output the hash of all the…",5,[[]]],[11,"new",E,R[18],6,[[["w"],["r"]],["self"]]],[11,"reader",E,"Return a reader object wrapped in `Arc<Mutex<R>>`.",6,[[],[["mutex"],["arc",["mutex"]]]]],[11,"writer",E,"Return a writer object wrapped in `Arc<Mutex<W>>`.",6,[[],[["mutex"],["arc",["mutex"]]]]],[11,"new",E,"Make a new `TrackChannel` from a `reader` and a `writer`.",7,[[["w"],["r"]],["self"]]],[11,"clear",E,"Clear the number of bits read/written.",7,[[["self"]]]],[11,"kilobits_written",E,"Return the number of kilobits written to the channel.",7,[[["self"]],["f64"]]],[11,"kilobits_read",E,"Return the number of kilobits read from the channel.",7,[[["self"]],["f64"]]],[11,"total_kilobits",E,"Return the total amount of communication on the channel.",7,[[["self"]],["f64"]]],[11,"kilobytes_written",E,"Return the number of kilobytes written to the channel.",7,[[["self"]],["f64"]]],[11,"kilobytes_read",E,"Return the number of kilobytes read from the channel.",7,[[["self"]],["f64"]]],[11,"total_kilobytes",E,"Return the total amount of communication on the channel as…",7,[[["self"]],["f64"]]],[6,R[20],R[14],R[21],N,N],[6,R[22],E,R[23],N,N],[8,R[51],E,"A trait for managing I/O. `AbstractChannel`s are clonable,…",N,N],[10,R[42],E,"Read a slice of `u8`s from the channel.",8,[[["self"]],[R[15]]]],[10,R[41],E,"Write a slice of `u8`s to the channel.",8,[[["self"]],[R[15]]]],[10,"flush",E,"Flush the channel.",8,[[["self"]],[R[15]]]],[10,"clone",E,"Clone the channel.",8,[[["self"]],["self"]]],[11,"read_vec",E,"Read `nbytes` from the channel, and return it as a `Vec`.",8,[[["self"],[R[2]]],[[R[15],["vec"]],["vec",["u8"]]]]],[11,"write_bool",E,"Write a `bool` to the channel.",8,[[["self"],["bool"]],[R[15]]]],[11,"read_bool",E,"Read a `bool` from the channel.",8,[[["self"]],[[R[15],["bool"]],["bool"]]]],[11,"write_u8",E,"Write a `u8` to the channel.",8,[[["self"],["u8"]],[R[15]]]],[11,"read_u8",E,"Read a `u8` from the channel.",8,[[["self"]],[[R[15],["u8"]],["u8"]]]],[11,"write_u16",E,"Write a `u16` to the channel.",8,[[["u16"],["self"]],[R[15]]]],[11,"read_u16",E,"Read a `u16` from the channel.",8,[[["self"]],[["u16"],[R[15],["u16"]]]]],[11,"write_u32",E,"Write a `u32` to the channel.",8,[[["self"],["u32"]],[R[15]]]],[11,"read_u32",E,"Read a `u32` from the channel.",8,[[["self"]],[[R[15],["u32"]],["u32"]]]],[11,"write_u64",E,"Write a `u64` to the channel.",8,[[["self"],["u64"]],[R[15]]]],[11,"read_u64",E,"Read a `u64` from the channel.",8,[[["self"]],[[R[15],["u64"]],["u64"]]]],[11,"write_usize",E,"Write a `usize` to the channel.",8,[[["self"],[R[2]]],[R[15]]]],[11,"read_usize",E,"Read a `usize` from the channel.",8,[[["self"]],[[R[2]],[R[15],[R[2]]]]]],[11,"write_block",E,"Write a `Block` to the channel.",8,[[["self"],[R[1]]],[R[15]]]],[11,"read_block",E,"Read a `Block` from the channel.",8,[[["self"]],[[R[15],[R[1]]],[R[1]]]]],[11,"read_blocks",E,"Read `n` `Block`s from the channel.",8,[[["self"],[R[2]]],[["vec",[R[1]]],[R[15],["vec"]]]]],[11,"write_block512",E,"Write a `Block512` to the channel.",8,[[[R[16]],["self"]],[R[15]]]],[11,"read_block512",E,"Read a `Block512` from the channel.",8,[[["self"]],[[R[15],[R[16]]],[R[16]]]]],[11,"write_pt",E,"Write a `RistrettoPoint` to the channel.",8,[[["self"],[R[17]]],[R[15]]]],[11,"read_pt",E,"Read a `RistrettoPoint` from the channel.",8,[[["self"]],[[R[15],[R[17]]],[R[17]]]]],[11,"new",E,R[18],9,[[["w"],["r"]],["self"]]],[11,"reader",E,"Return a reader object wrapped in `Rc<RefCell>`.",9,[[],[[R[19]],["rc",[R[19]]]]]],[11,"writer",E,"Return a writer object wrapped in `Rc<RefCell>`.",9,[[],[["rc",[R[19]]],[R[19]]]]],[0,"cointoss",R[3],"Implementation of a simple two-party coin tossing protocol…",N,N],[4,"Error",R[39],"Errors produced by the coin tossing protocol.",N,N],[13,"IoError",E,R[267],10,N],[13,"CommitmentCheckFailed",E,"The commitment check failed.",10,N],[5,"send",E,"Coin tossing sender.",N,[[["c"]],[["vec",[R[1]]],[R[15],["vec","error"]],["error"]]]],[5,R[64],E,"Coin tossing receiver.",N,[[["c"]],[["vec",[R[1]]],[R[15],["vec","error"]],["error"]]]],[0,"commitment",R[3],"A trait defining a Commitment Scheme and an implementation…",N,N],[3,R[52],R[40],"A commitment in the random oracle model using SHA256.",N,N],[12,"seed",E,"The seed used to initialize the commitment.",11,N],[8,R[53],E,"Generic commitment scheme.",N,N],[16,"Seed",E,"The type used to initialize a commitment.",12,N],[16,"Output",E,"The output type of the commitment.",12,N],[10,"new",E,"A new commitment initialized with `seed`.",12,[[],["self"]]],[10,"input",E,"A method to add data to the commitment.",12,[[["self"]]]],[10,"finish",E,"Complete the commitment.",12,[[]]],[10,"check",E,"Check if two commitments are equal.",12,[[],["bool"]]],[11,"new",R[3],"Initialize the hash function using `key`.",13,[[[R[1]]],["self"]]],[11,"cr_hash",E,"Correlation-robust hash function for 128-bit inputs (cf.…",13,[[["self"],[R[1]]],[R[1]]]],[11,"ccr_hash",E,"Circular correlation-robust hash function (cf.…",13,[[["self"],[R[1]]],[R[1]]]],[11,"tccr_hash",E,"Tweakable circular correlation robust hash function (cf.…",13,[[["self"],[R[1]]],[R[1]]]],[11,"new",E,"Create a new random number generator using a random seed…",14,[[],["self"]]],[11,"fork",E,"Create a new RNG using a random seed from this one.",14,[[["self"]],["self"]]],[0,"utils",E,"Useful utility functions.",N,N],[5,"pack_bits","scuttlebutt::utils","Pack a bit slice into bytes.",N,[[],[["vec",["u8"]],["u8"]]]],[5,"unpack_bits",E,"Unpack a bit vector from a slice of bytes.",N,[[[R[2]]],[["vec",["bool"]],["bool"]]]],[5,"xor",E,"XOR two byte arrays, outputting the result.",N,[[],[["vec",["u8"]],["u8"]]]],[5,"xor_n",E,"XOR two byte arrays up to `n` bytes, outputting the result.",N,[[[R[2]]],[["vec",["u8"]],["u8"]]]],[5,"xor_inplace",E,"XOR two byte arrays in place.",N,[[]]],[5,"xor_inplace_n",E,"XOR two byte arrays up to `n` bytes in place.",N,[[[R[2]]]]],[5,"and",E,"AND two byte arrays, outputting the result.",N,[[],[["vec",["u8"]],["u8"]]]],[5,"and_inplace",E,"AND two byte arrays in place.",N,[[]]],[6,R[20],R[3],R[21],N,N],[6,R[22],E,R[23],N,N],[17,"FIXED_KEY_AES128",E,"Fixed-key AES-128.",N,N],[17,"AES_HASH",E,"`AesHash` with a fixed key.",N,N],[8,"SemiHonest",E,R[24],N,N],[8,"Malicious",E,R[24],N,N],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[25],E,E,1,[[["self"]],[T]]],[11,R[26],E,E,1,[[["self"],[T]]]],[11,R[27],E,E,1,[[[U]],[R[15]]]],[11,R[28],E,E,1,[[],[R[15]]]],[11,R[36],E,E,1,[[["self"]],[T]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"]],[R[37]]]],[11,R[30],E,E,1,[[],[U]]],[11,R[31],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[32],E,E,1,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[25],E,E,2,[[["self"]],[T]]],[11,R[26],E,E,2,[[["self"],[T]]]],[11,R[27],E,E,2,[[[U]],[R[15]]]],[11,R[28],E,E,2,[[],[R[15]]]],[11,R[36],E,E,2,[[["self"]],[T]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[37]]]],[11,R[30],E,E,2,[[],[U]]],[11,R[31],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[32],E,E,2,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[25],E,E,0,[[["self"]],[T]]],[11,R[26],E,E,0,[[["self"],[T]]]],[11,R[34],E,E,0,[[["self"]],[R[71]]]],[11,R[27],E,E,0,[[[U]],[R[15]]]],[11,R[28],E,E,0,[[],[R[15]]]],[11,R[36],E,E,0,[[["self"]],[T]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[37]]]],[11,R[30],E,E,0,[[],[U]]],[11,R[31],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[32],E,E,0,[[[T]],[T]]],[11,"clear",E,E,0,[[["self"]]]],[11,R[35],E,E,0,[[]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[25],E,E,3,[[["self"]],[T]]],[11,R[26],E,E,3,[[["self"],[T]]]],[11,R[34],E,E,3,[[["self"]],[R[71]]]],[11,R[27],E,E,3,[[[U]],[R[15]]]],[11,R[28],E,E,3,[[],[R[15]]]],[11,R[36],E,E,3,[[["self"]],[T]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"]],[R[37]]]],[11,R[30],E,E,3,[[],[U]]],[11,R[31],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[32],E,E,3,[[[T]],[T]]],[11,"clear",E,E,3,[[["self"]]]],[11,R[35],E,E,3,[[]]],[11,"into",E,E,5,[[],[U]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[27],E,E,5,[[[U]],[R[15]]]],[11,R[28],E,E,5,[[],[R[15]]]],[11,R[36],E,E,5,[[["self"]],[T]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"]],[R[37]]]],[11,R[30],E,E,5,[[],[U]]],[11,R[31],E,E,5,[[[T]],[T]]],[11,"cast",E,E,5,[[],[U]]],[11,R[32],E,E,5,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[27],E,E,6,[[[U]],[R[15]]]],[11,R[28],E,E,6,[[],[R[15]]]],[11,R[36],E,E,6,[[["self"]],[T]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"]],[R[37]]]],[11,R[30],E,E,6,[[],[U]]],[11,R[31],E,E,6,[[[T]],[T]]],[11,"cast",E,E,6,[[],[U]]],[11,R[32],E,E,6,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[27],E,E,7,[[[U]],[R[15]]]],[11,R[28],E,E,7,[[],[R[15]]]],[11,R[36],E,E,7,[[["self"]],[T]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"]],[R[37]]]],[11,R[30],E,E,7,[[],[U]]],[11,R[31],E,E,7,[[[T]],[T]]],[11,"cast",E,E,7,[[],[U]]],[11,R[32],E,E,7,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[27],E,E,13,[[[U]],[R[15]]]],[11,R[28],E,E,13,[[],[R[15]]]],[11,R[36],E,E,13,[[["self"]],[T]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[["self"]],[R[37]]]],[11,R[30],E,E,13,[[],[U]]],[11,R[31],E,E,13,[[[T]],[T]]],[11,"cast",E,E,13,[[],[U]]],[11,R[32],E,E,13,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[25],E,E,14,[[["self"]],[T]]],[11,R[26],E,E,14,[[["self"],[T]]]],[11,R[27],E,E,14,[[[U]],[R[15]]]],[11,R[28],E,E,14,[[],[R[15]]]],[11,R[36],E,E,14,[[["self"]],[T]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[["self"]],[R[37]]]],[11,R[30],E,E,14,[[],[U]]],[11,R[31],E,E,14,[[[T]],[T]]],[11,"cast",E,E,14,[[],[U]]],[11,R[32],E,E,14,[[[T]],[T]]],[11,"clear",E,E,14,[[["self"]]]],[11,R[35],E,E,14,[[]]],[11,"from_entropy",E,E,14,[[],["r"]]],[11,"into",R[38],E,4,[[],[U]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[27],E,E,4,[[[U]],[R[15]]]],[11,R[28],E,E,4,[[],[R[15]]]],[11,R[36],E,E,4,[[["self"]],[T]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[37]]]],[11,R[30],E,E,4,[[],[U]]],[11,R[31],E,E,4,[[[T]],[T]]],[11,"cast",E,E,4,[[],[U]]],[11,R[32],E,E,4,[[[T]],[T]]],[11,"into",R[14],E,9,[[],[U]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[27],E,E,9,[[[U]],[R[15]]]],[11,R[28],E,E,9,[[],[R[15]]]],[11,R[36],E,E,9,[[["self"]],[T]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"]],[R[37]]]],[11,R[30],E,E,9,[[],[U]]],[11,R[31],E,E,9,[[[T]],[T]]],[11,"cast",E,E,9,[[],[U]]],[11,R[32],E,E,9,[[[T]],[T]]],[11,"into",R[39],E,10,[[],[U]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[34],E,E,10,[[["self"]],[R[71]]]],[11,R[27],E,E,10,[[[U]],[R[15]]]],[11,R[28],E,E,10,[[],[R[15]]]],[11,R[36],E,E,10,[[["self"]],[T]]],[11,R[29],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[["self"]],[R[37]]]],[11,R[30],E,E,10,[[],[U]]],[11,R[31],E,E,10,[[[T]],[T]]],[11,"cast",E,E,10,[[],[U]]],[11,R[32],E,E,10,[[[T]],[T]]],[11,"into",R[40],E,11,[[],[U]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[27],E,E,11,[[[U]],[R[15]]]],[11,R[28],E,E,11,[[],[R[15]]]],[11,R[36],E,E,11,[[["self"]],[T]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[["self"]],[R[37]]]],[11,R[30],E,E,11,[[],[U]]],[11,R[31],E,E,11,[[[T]],[T]]],[11,"cast",E,E,11,[[],[U]]],[11,R[32],E,E,11,[[[T]],[T]]],[11,R[41],R[3],E,5,[[["self"]],[R[15]]]],[11,R[42],E,E,5,[[["self"]],[R[15]]]],[11,"flush",E,E,5,[[["self"]],[R[15]]]],[11,"clone",E,E,5,[[["self"]],["self"]]],[11,R[41],E,E,6,[[["self"]],[R[15]]]],[11,R[42],E,E,6,[[["self"]],[R[15]]]],[11,"flush",E,E,6,[[["self"]],[R[15]]]],[11,"clone",E,E,6,[[["self"]],["self"]]],[11,R[41],E,E,7,[[["self"]],[R[15]]]],[11,R[42],E,E,7,[[["self"]],[R[15]]]],[11,"flush",E,E,7,[[["self"]],[R[15]]]],[11,"clone",E,E,7,[[["self"]],["self"]]],[11,R[41],R[14],E,9,[[["self"]],[R[15]]]],[11,R[42],E,E,9,[[["self"]],[R[15]]]],[11,"flush",E,E,9,[[["self"]],[R[15]]]],[11,"clone",E,E,9,[[["self"]],["self"]]],[11,"new",R[40],E,11,[[],["self"]]],[11,"input",E,E,11,[[["self"]]]],[11,"finish",E,E,11,[[]]],[11,"check",E,E,11,[[],["bool"]]],[11,"as_ref",R[3],E,0,[[["self"]]]],[11,"as_ref",E,E,3,[[["self"]]]],[11,"as_mut",E,E,0,[[["self"]]]],[11,"as_mut",E,E,3,[[["self"]]]],[11,"from",E,E,0,[[["u128"]],["self"]]],[11,"from",E,E,0,[[["__m128i"]],["self"]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,0,[[],["self"]]],[11,"from",E,E,3,[[],[R[16]]]],[11,"from",E,E,3,[[],[R[16]]]],[11,"from",E,E,3,[[],[R[16]]]],[11,"from",E,E,3,[[["__m512i"]],[R[16]]]],[11,"from",R[39],E,10,[[["error"]],["self"]]],[11,"clone",R[3],E,1,[[["self"]],["aes128"]]],[11,"clone",E,E,2,[[["self"]],["aes256"]]],[11,"clone",E,E,0,[[["self"]],[R[1]]]],[11,"clone",E,E,3,[[["self"]],[R[16]]]],[11,"clone",E,E,14,[[["self"]],["aesrng"]]],[11,R[43],E,E,0,[[],["self"]]],[11,R[43],E,E,3,[[],["self"]]],[11,R[43],E,E,14,[[],["self"]]],[11,"cmp",E,E,0,[[["self"]],[R[44]]]],[11,"cmp",E,E,3,[[["self"]],[R[44]]]],[11,"eq",E,E,0,[[["self"],[R[1]]],["bool"]]],[11,"eq",E,E,3,[[[R[16]],["self"]],["bool"]]],[11,"eq",R[38],E,4,[[[R[45]],["self"]],["bool"]]],[11,"ne",E,E,4,[[[R[45]],["self"]],["bool"]]],[11,R[46],R[3],E,0,[[["self"]],[["option",[R[44]]],[R[44]]]]],[11,R[46],E,E,3,[[["self"]],[["option",[R[44]]],[R[44]]]]],[11,R[46],R[38],E,4,[[[R[45]],["self"]],[["option",[R[44]]],[R[44]]]]],[11,"lt",E,E,4,[[[R[45]],["self"]],["bool"]]],[11,"le",E,E,4,[[[R[45]],["self"]],["bool"]]],[11,"gt",E,E,4,[[[R[45]],["self"]],["bool"]]],[11,"ge",E,E,4,[[[R[45]],["self"]],["bool"]]],[11,"fmt",R[3],E,0,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,3,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[39],E,10,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[3],E,0,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",E,E,3,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[38],E,4,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[39],E,10,[[[R[47]],["self"]],[R[15]]]],[11,"fmt",R[3],E,14,[[[R[47]],["self"]],[R[15]]]],[11,R[27],E,E,3,[[],[R[15]]]],[11,"bitand",E,E,0,[[],["self"]]],[11,"bitor",E,E,0,[[],["self"]]],[11,"bitxor",E,E,0,[[],["self"]]],[11,"bitxor",E,E,3,[[],["self"]]],[11,"bitand_assign",E,E,0,[[["self"]]]],[11,"bitor_assign",E,E,0,[[["self"]]]],[11,R[48],E,E,0,[[["self"]]]],[11,R[48],E,E,3,[[["self"]]]],[11,"hash",E,E,0,[[["self"],["h"]]]],[11,"hash",E,E,3,[[["self"],["h"]]]],[11,"next_u32",E,E,14,[[["self"]],["u32"]]],[11,"next_u64",E,E,14,[[["self"]],["u64"]]],[11,"fill_bytes",E,E,14,[[["self"]]]],[11,"try_fill_bytes",E,E,14,[[["self"]],[["error"],[R[15],["error"]]]]],[11,"from_seed",E,E,14,[[],["self"]]],[11,"from_rng",E,E,14,[[["rngcore"]],[["error"],[R[15],["error"]]]]],[11,"serialize",E,E,0,[[["self"],["serializer"]],[R[15]]]],[11,"deserialize",E,E,0,[[["deserializer"]],[R[15]]]]],"p":[[3,"Block"],[3,"Aes128"],[3,"Aes256"],[3,R[49]],[3,R[50]],[3,R[4]],[3,R[6]],[3,R[8]],[8,R[51]],[3,"Channel"],[4,"Error"],[3,R[52]],[8,R[53]],[3,"AesHash"],[3,"AesRng"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);