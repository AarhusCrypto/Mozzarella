var N=null,E="",T="t",U="u",searchIndex={};
var r_0a="clone_into",r_0b="garbler_input_bundle_binary",r_0c="Shift residues, replacing them with zeros in the modulus…",r_1a="fancy_garbling::dummy",r_1b="Create an input bundle for the garbler using `nbits` base…",r_1c="binary_cmul",r_2a="fancy_garbling::informer",r_2b="evaluator_input_bundle_binary",r_2c="Write the constant in binary and that gives you the shift…",r_3a="garbler_input",r_3b="Create an input bundle for the evaluator using n base 2…",r_3c="Compute the absolute value of a binary bundle.",r_4a="evaluator_input",r_4b="constant_bundle",r_4c="Message",r_5a="constant",r_5b="Creates a bundle of constant wires using moduli `ps`.",r_5c="Garbler",r_6a="cmul",r_6b="constant_bundle_crt",r_6c="Evaluator",r_7a="output",r_7b="Creates a bundle of constant wires for the CRT…",r_7c="GarbledCircuit",r_8a="begin_sync",r_8b="constant_bundle_binary",r_8c="Encoder",r_9a="finish_index",r_9b="Create a constant bundle using base 2 inputs.",r_9c="Decoder",r_Aa="result",r_Ab="Sum up a slice of wires.",r_Ac="mixed_radix_addition",r_Ba="circuit",r_Bb="Xor is just addition, with the requirement that `x` and…",r_Bc="Mixed radix addition.",r_Ca="error",r_Cb="Negate by xoring `x` with `1`.",r_Cc="fractional_mixed_radix",r_Da="Convert a u128 into base q.",r_Db="And is just multiplication, with the requirement that `x`…",r_Dc="Helper function for advanced gadgets, returns the…",r_Ea="Compute the CRT representation of x with respect to the…",r_Eb="Or uses Demorgan's Rule implemented with multiplication…",r_Ec="Compute `max(x,0)`, using potentially approximate factors…",r_Fa="Generate a CRT modulus that support at least n-bit…",r_Fb="and_many",r_Fc="str",r_Ga="Generate the factors of a CRT modulus that support at…",r_Gb="Returns 1 if all wires equal 1.",r_Gc="Return 0 if `x` is positive and 1 if `x` is negative.…",r_Ha="bool",r_Hb="or_many",r_Hc="Return `if x >= 0 then 1 else -1`, where `-1` is…",r_Ia="GarbledGate",r_Ib="Returns 1 if any wire equals 1.",r_Ic="Returns 1 if `x < y`. Works on both CRT and binary bundles.",r_Ja="OutputCiphertext",r_Jb="mod_change",r_Jc="Returns 1 if `x >= y`. Works on both CRT and binary bundles.",r_Ka="modulus",r_Kb="Change the modulus of `x` to `to_modulus` using a…",r_Kc="Compute the maximum bundle in `xs`.",r_La="syncindex",r_Lb="adder",r_Lc="binary_addition",r_Ma="negate",r_Mb="Binary adder. Returns the result and the carry.",r_Mc="Binary addition. Returns the result and the carry.",r_Na="option",r_Nb="If `b=0` returns `x` else `y`.",r_Nc="binary_addition_no_carry",r_Oa="bundle",r_Ob="mux_constant_bits",r_Oc="Binary addition. Avoids creating extra gates for the final…",r_Pa="try_from",r_Pb="If `x=0` return the constant `b1` else return `b2`. Folds…",r_Pc="binary_multiplication_lower_half",r_Qa="borrow",r_Qb="outputs",r_Qc="Binary multiplication.",r_Ra="type_id",r_Rb="Output a slice of wires.",r_Rc="twos_complement",r_Sa="typeid",r_Sb="garbler_input_bundle",r_Sc="Compute the twos complement of the input bundle (which…",r_Ta="borrow_mut",r_Tb="Crate an input bundle for the garbler using moduli `ps`…",r_Tc="binary_subtraction",r_Ua="try_into",r_Ub="evaluator_input_bundle",r_Uc="Subtract two binary bundles. Returns the result and…",r_Va="from",r_Vb="Crate an input bundle for the evaluator using moduli `ps`.",r_Vc="multiplex",r_Wa="into",r_Wb="garbler_input_bundle_crt",r_Wc="If b=0 then return x, else return y.",r_Xa="to_string",r_Xb="Crate an input bundle for the garbler using composite CRT…",r_Xc="multiplex_constant_bits",r_Ya="string",r_Yb="evaluator_input_bundle_crt",r_Yc="If `x=0` return `c1` as a bundle of constant bits, else…",r_Za="to_owned",r_Zb="Crate an input bundle for the evaluator using composite…",r_Zc="shift",r_aa="fancy_garbling",r_ab="proj",r_ac="garbler_input_bundles",r_ad="Bundle",r_ba="fancy_garbling::Message",r_bb="dummyval",r_bc="Create `n` garbler input bundles, using moduli `ps` and…",r_bd="Dummy",r_ca="delta",r_cb="informerval",r_cc="evaluator_input_bundles",r_cd="Informer",r_da="fancy_garbling::Wire",r_db="circuitref",r_dc="Create `n` evaluator input bundles, using moduli `ps`.",r_dd="CircuitRef",r_ea="wire",r_eb="add",r_ec="garbler_input_bundles_crt",r_ed="Circuit",r_fa="self",r_fb="sub",r_fc="Create `n` garbler input bundles, under composite CRT…",r_fd="CircuitBuilder",r_ga="usize",r_gb="mul",r_gc="evaluator_input_bundles_crt",r_gd="RngExt",r_ha="hashmap",r_hb="garbledcircuit",r_hc="Create `n` evaluator input bundles, under composite CRT…",r_hd="HasModulus",r_ia="to_bytes",r_ib="encoder",r_ic="output_bundle",r_id="Fancy",r_ja="vec",r_jb="decoder",r_jc="Output the wires that make up a bundle.",r_jd="BundleGadgets",r_ka="from_bytes",r_kb="message",r_kc="output_bundles",r_kd="DummyVal",r_la="u16",r_lb="clone",r_lc="Output a slice of bundles.",r_ld="InformerVal",r_ma="zero",r_mb="gate",r_mc="add_bundles",r_na="u128",r_nb="formatter",r_nc="Add two wire bundles, residue by residue.",r_oa="new",r_ob="fmt",r_oc="sub_bundles",r_pa="informer",r_pb="serialize",r_pc="Subtract two wire bundles, residue by residue.",r_qa="num_garbler_inputs",r_qb="__s",r_qc="cmul_bundle",r_ra="num_evaluator_inputs",r_rb="deserialize",r_rc="Multiplies each wire in `x` by the corresponding residue…",r_sa="GarblerInput",r_sb="__d",r_sc="mul_bundles",r_ta="EvaluatorInput",r_tb="Start synchronization of internal messages.",r_tc="Multiply `x` with `y`.",r_ua="fancy_garbling::circuit",r_ub="Declare this index to be done.",r_uc="cexp_bundle",r_va="fancy_garbling::circuit::Gate",r_vb="garbler_inputs",r_vc="Exponentiate `x` by the constant `c`.",r_wa="Constant",r_wb="Create `n` garbler inputs with the moduli `qs` and…",r_wc="rem_bundle",r_xa="xref",r_xb="evaluator_inputs",r_xc="Compute the remainder with respect to modulus `p`.",r_ya="yref",r_yb="Create `n` evaluator inputs with the moduli `qs`.",r_yc="eq_bundles",r_za="print_info",r_zb="add_many",r_zc="Compute `x == y`. Returns a wire encoding the result mod 2.";

searchIndex[r_aa]={"doc":E,"i":[[3,r_5c,r_aa,"Streams garbled circuit ciphertexts through a callback.…",N,N],[3,r_6c,E,"Streaming evaluator using a callback to receive…",N,N],[3,r_8c,E,"Encode inputs statically. Created by the `garble` function.",N,N],[3,r_9c,E,"Decode outputss statically. Created by the `garble`…",N,N],[3,r_7c,E,"Static evaluator for a circuit, created by the `garble`…",N,N],[3,r_ad,E,"A collection of wires, useful for the garbled gadgets…",N,N],[4,r_4c,E,"The outputs that can be emitted by a Garbler and consumed…",N,N],[13,"UnencodedGarblerInput",E,"Zero wire and delta for one of the garbler's inputs.",0,N],[12,r_ma,r_ba,E,0,N],[12,r_ca,E,E,0,N],[13,"UnencodedEvaluatorInput",r_aa,"Zero wire and delta for one of the evaluator's inputs.",0,N],[12,r_ma,r_ba,E,0,N],[12,r_ca,E,E,0,N],[13,r_sa,r_aa,"Encoded input for one of the garbler's inputs.",0,N],[13,r_ta,E,"Encoded input for one of the evaluator's inputs.",0,N],[13,r_wa,E,"Constant wire carrying the value.",0,N],[12,"value",r_ba,E,0,N],[12,r_ea,E,E,0,N],[13,r_Ia,r_aa,"Garbled gate emitted by a projection or multiplication.",0,N],[13,r_Ja,E,"Output decoding information.",0,N],[13,"EndSync",E,"End synchronization mode.",0,N],[4,"Wire",E,"The essential wirelabel type used by garbled circuits.",N,N],[13,"Mod2",E,E,1,N],[12,"val",r_da,E,1,N],[13,"ModN",r_aa,E,1,N],[12,"q",r_da,E,1,N],[12,"ds",E,E,1,N],[5,"garble_iter",r_aa,"Create an iterator over the messages produced by fancy…",N,N],[5,"garble",E,"Garble a circuit without streaming.",N,N],[5,"bench_garbling",E,"Run benchmark garbling and streaming on the function.…",N,[[[r_ga],["gbf"],["evf"]]]],[5,"wires_to_bytes",E,"Convert a slice of wires to bytes.",N,N],[5,"wires_from_bytes",E,"Convert a slice of bytes back to wires.",N,N],[11,r_oa,E,"Create a new garbler.",2,[[["f"]],["garbler"]]],[11,r_ca,E,"Create a delta if it has not been created yet for this…",2,[[[r_fa],[r_la]],[r_ea]]],[11,r_oa,E,"Create a new Evaluator.",3,[[["f"]],["evaluator"]]],[11,"decode_output",E,"Decode the output received during the Fancy computation.",3,[[[r_fa]],[r_ja,[r_la]]]],[11,r_oa,E,"Create a new GarbledCircuit from a vec of garbled gates…",4,[[[r_ja,["garbledgate"]],[r_ha,[r_ea]]],[r_fa]]],[11,"size",E,"The number of 128 bit ciphertexts and constant wires in…",4,[[[r_fa]],[r_ga]]],[11,"eval",E,"Evaluate the garbled circuit.",4,N],[11,r_ia,E,E,4,[[[r_fa]],[r_ja,["u8"]]]],[11,r_ka,E,E,4,N],[11,r_oa,E,E,5,[[[r_ja,[r_ea]],[r_ja,[r_ea]],[r_ha,[r_la,r_ea]]],[r_fa]]],[11,r_qa,E,E,5,[[[r_fa]],[r_ga]]],[11,r_ra,E,E,5,[[[r_fa]],[r_ga]]],[11,"encode_garbler_input",E,E,5,[[[r_fa],[r_la],[r_ga]],[r_ea]]],[11,"encode_evaluator_input",E,E,5,[[[r_fa],[r_la],[r_ga]],[r_ea]]],[11,"encode_garbler_inputs",E,E,5,N],[11,"encode_evaluator_inputs",E,E,5,N],[11,r_ia,E,E,5,[[[r_fa]],[r_ja,["u8"]]]],[11,r_ka,E,E,5,N],[11,r_oa,E,E,6,[[[r_ja,[r_ja]]],[r_fa]]],[11,"decode",E,E,6,N],[11,r_ia,E,E,6,[[[r_fa]],[r_ja,["u8"]]]],[11,r_ka,E,E,6,N],[11,r_ia,E,E,0,[[[r_fa]],[r_ja,["u8"]]]],[11,r_ka,E,E,0,N],[11,"digits",E,"Get the digits of the wire.",1,[[[r_fa]],[r_ja,[r_la]]]],[11,"from_u128",E,"Get the wire represented by the u128.",1,[[[r_na],[r_la]],[r_fa]]],[11,"as_u128",E,"Pack the wire to a u128.",1,[[[r_fa]],[r_na]]],[11,r_ma,E,"The zero wire for the modulus q.",1,[[[r_la]],[r_fa]]],[11,"rand_delta",E,"Get a random wire label for mod q, with the first digit…",1,[[["r"],[r_la]],[r_fa]]],[11,"color",E,"Get the color digit of the wire.",1,[[[r_fa]],[r_la]]],[11,"plus",E,"Add two wires digit-wise mod q, returning a new wire.",1,[[[r_fa],[r_fa]],[r_fa]]],[11,"plus_eq",E,"Add another wire into this one, digit-wise mod q.",1,[[[r_fa],[r_ea]],[r_ea]]],[11,"plus_mov",E,"Add another wire into this one, consuming it for chained…",1,[[[r_fa],[r_ea]],[r_ea]]],[11,r_6a,E,"Multiply each digit by a constant c mod q, returning a new…",1,[[[r_fa],[r_la]],[r_fa]]],[11,"cmul_eq",E,"Multiply each digit by a constant c mod q.",1,[[[r_fa],[r_la]],[r_ea]]],[11,"cmul_mov",E,"Multiply each digit by a constant c mod q, consuming it…",1,[[[r_fa],[r_la]],[r_ea]]],[11,r_Ma,E,"Negate all the digits mod q, returning a new wire.",1,[[[r_fa]],[r_fa]]],[11,"negate_eq",E,"Negate all the digits mod q.",1,[[[r_fa]],[r_ea]]],[11,"negate_mov",E,"Negate all the digits mod q, consuming it for chained…",1,[[[r_fa]],[r_ea]]],[11,"minus",E,"Subtract two wires, returning the result.",1,[[[r_fa],[r_ea]],[r_ea]]],[11,"minus_eq",E,"Subtract a wire from this one.",1,[[[r_fa],[r_ea]],[r_ea]]],[11,"minus_mov",E,"Subtract a wire from this one, consuming it for chained…",1,[[[r_fa],[r_ea]],[r_ea]]],[11,"rand",E,"Get a random wire mod q.",1,[[["r"],[r_la]],[r_ea]]],[11,"hash",E,"Compute the hash of this wire.",1,[[[r_fa],[r_na]],[r_na]]],[11,"hashback",E,"Compute the hash of this wire, converting the result back…",1,[[[r_fa],[r_na],[r_la]],[r_ea]]],[11,"hash2",E,"Compute the hash of two wires together.",1,[[[r_fa],[r_ea],[r_na]],[r_na]]],[11,"hashback2",E,"Compute the hash of two wires together, converting the…",1,[[[r_fa],[r_ea],[r_na],[r_la]],[r_ea]]],[11,r_oa,E,"Create a new bundle from some wires.",7,[[[r_ja]],[r_Oa]]],[11,"moduli",E,"Return the moduli of all the wires in the bundle.",7,[[[r_fa]],[r_ja,[r_la]]]],[11,"wires",E,"Extract the wires from this bundle.",7,N],[11,"size",E,"Get the number of wires in this bundle.",7,[[[r_fa]],[r_ga]]],[11,"is_binary",E,"Whether this bundle only contains residues in mod 2.",7,[[[r_fa]],[r_Ha]]],[0,"dummy",E,"Dummy implementation of Fancy.",N,N],[3,r_bd,r_1a,"Simple struct that performs the fancy computation over u16.",N,N],[3,r_kd,E,"Wrapper around u16.",N,N],[11,r_oa,E,"Create a new Dummy.",8,N],[11,"get_output",E,"Get the output from the fancy computation, consuming the…",8,[[[r_fa]],[r_ja,[r_la]]]],[0,r_pa,r_aa,"Informer runs a fancy computation and learns information…",N,N],[3,r_cd,r_2a,"Implements Fancy. Use to learn information about a fancy…",N,N],[3,r_ld,E,E,N,N],[11,r_oa,E,E,9,[[],[r_pa]]],[11,r_za,E,"Print information about the fancy computation.",9,[[[r_fa]]]],[11,r_qa,E,"Number of garbler inputs in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"garbler_input_moduli",E,"Moduli of garbler inputs in the fancy computation.",9,[[[r_fa]],[r_ja,[r_la]]]],[11,r_ra,E,"Number of evaluator inputs in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"evaluator_input_moduli",E,"Moduli of evaluator inputs in the fancy computation.",9,[[[r_fa]],[r_ja,[r_la]]]],[11,"num_consts",E,"Number of constants in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_outputs",E,"Number of outputs in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_output_ciphertexts",E,"Number of output ciphertexts.",9,[[[r_fa]],[r_ga]]],[11,"num_adds",E,"Number of additions in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_subs",E,"Number of subtractions in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_cmuls",E,"Number of scalar multiplications in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_muls",E,"Number of multiplications in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_projs",E,"Number of projections in the fancy computation.",9,[[[r_fa]],[r_ga]]],[11,"num_ciphertexts",E,"Number of ciphertexts in the fancy computation.",9,[[[r_fa]],[r_ga]]],[0,r_Ba,r_aa,"DSL for creating circuits compatible with fancy-garbling…",N,N],[3,r_dd,r_ua,"The index and modulus of a gate in a circuit.",N,N],[12,"ix",E,E,10,N],[3,r_ed,E,"Static representation of the type of computation supported…",N,N],[12,"gates",E,E,11,N],[12,"gate_moduli",E,E,11,N],[12,"garbler_input_refs",E,E,11,N],[12,"evaluator_input_refs",E,E,11,N],[12,"const_refs",E,E,11,N],[12,"output_refs",E,E,11,N],[12,"num_nonfree_gates",E,E,11,N],[3,r_fd,E,"CircuitBuilder is used to build circuits.",N,N],[4,"Gate",E,"The most basic types of computation supported by fancy…",N,N],[13,r_sa,E,E,12,N],[12,"id",r_va,E,12,N],[13,r_ta,r_ua,E,12,N],[12,"id",r_va,E,12,N],[13,r_wa,r_ua,E,12,N],[12,"val",r_va,E,12,N],[13,"Add",r_ua,E,12,N],[12,r_xa,r_va,E,12,N],[12,r_ya,E,E,12,N],[13,"Sub",r_ua,E,12,N],[12,r_xa,r_va,E,12,N],[12,r_ya,E,E,12,N],[13,"Cmul",r_ua,E,12,N],[12,r_xa,r_va,E,12,N],[12,"c",E,E,12,N],[13,"Mul",r_ua,E,12,N],[12,r_xa,r_va,E,12,N],[12,r_ya,E,E,12,N],[12,"id",E,E,12,N],[13,"Proj",r_ua,E,12,N],[12,r_xa,r_va,E,12,N],[12,"tt",E,E,12,N],[12,"id",E,E,12,N],[11,"eval",r_ua,E,11,N],[11,r_qa,E,E,11,[[[r_fa]],[r_ga]]],[11,r_ra,E,E,11,[[[r_fa]],[r_ga]]],[11,"noutputs",E,E,11,[[[r_fa]],[r_ga]]],[11,r_Ka,E,E,11,[[[r_fa],[r_ga]],[r_la]]],[11,"garbler_input_mod",E,E,11,[[[r_fa],[r_ga]],[r_la]]],[11,"evaluator_input_mod",E,E,11,[[[r_fa],[r_ga]],[r_la]]],[11,r_za,E,E,11,[[[r_fa]]]],[11,"to_file",E,E,11,[[[r_fa],[r_Fc]],[r_Aa,[r_Ca]]]],[11,"from_file",E,E,11,[[[r_Fc]],[r_Aa,[r_Ba,r_Ca]]]],[11,r_Xa,E,E,11,[[[r_fa]],[r_Ya]]],[11,"from_string",E,E,11,[[[r_Fc]],[r_Aa,[r_Ba,r_Ca]]]],[11,r_oa,E,E,13,[[],[r_fa]]],[11,"finish",E,E,13,[[[r_fa]],[r_Ba]]],[0,"util",r_aa,"Tools useful for interacting with `fancy-garbling`.",N,N],[5,"tweak","fancy_garbling::util","Tweak function for a single item.",N,[[[r_ga]],[r_na]]],[5,"tweak2",E,"Tweak function for two items.",N,[[["u64"],["u64"]],[r_na]]],[5,"output_tweak",E,"Compute the output tweak for a garbled gate where i is the…",N,[[[r_ga],[r_la]],[r_na]]],[5,"base_q_add",E,"Add two base q numbers together.",N,N],[5,"base_q_add_eq",E,"Add a base q number into the first one.",N,N],[5,"as_base_q",E,r_Da,N,[[[r_na],[r_la],[r_ga]],[r_ja,[r_la]]]],[5,"digits_per_u128",E,"Determine how many mod q digits fit into a u128.",N,[[[r_la]],[r_ga]]],[5,"as_base_q_u128",E,r_Da,N,[[[r_na],[r_la]],[r_ja,[r_la]]]],[5,"as_mixed_radix",E,"Convert a u128 into mixed radix form with the provided…",N,N],[5,"from_base_q",E,"Convert little-endian base q digits into u128.",N,N],[5,"from_mixed_radix",E,"Convert little-endian mixed radix digits into u128.",N,N],[5,"u128_to_bits",E,"Get the bits of a u128 encoded in 128 u16s, which is…",N,[[[r_na],[r_ga]],[r_ja,[r_la]]]],[5,"u128_from_bits",E,"Convert into a u128 from the \"bits\" as u16. Assumes each…",N,N],[5,"u128_to_bytes",E,"Convert a u128 into bytes.",N,N],[5,"bytes_to_u128",E,"Convert bytes to u128.",N,N],[5,"factor",E,"Factor using the primes in the global `PRIMES` array.…",N,[[[r_na]],[r_ja,[r_la]]]],[5,"crt",E,r_Ea,N,N],[5,"crt_factor",E,r_Ea,N,[[[r_na],[r_na]],[r_ja,[r_la]]]],[5,"crt_inv",E,"Compute the value x given a list of CRT primes and residues.",N,N],[5,"crt_inv_factor",E,"Compute the value x given a composite CRT modulus.",N,N],[5,"inv_ref",E,"Generic algorithm to invert inp_a mod inp_b. As ref so as…",N,[[[T],[T]],[T]]],[5,"inv",E,"Invert a mod m.",N,[[[T],[T]],[T]]],[5,"modulus_with_nprimes",E,"Generate a CRT modulus with n primes.",N,[[[r_ga]],[r_na]]],[5,"modulus_with_width",E,r_Fa,N,[[["u32"]],[r_na]]],[5,"primes_with_width",E,r_Ga,N,[[["u32"]],[r_ja,[r_la]]]],[5,"base_modulus_with_width",E,r_Fa,N,N],[5,"base_primes_with_width",E,r_Ga,N,N],[5,"modulus_with_width_skip2",E,r_Fa,N,[[["u32"]],[r_na]]],[5,"product",E,"Compute the product of some u16s as a u128.",N,N],[5,"powm",E,"Raise a u16 to a power mod some value.",N,[[[r_la],[r_la],[r_la]],[r_la]]],[5,"is_power_of_2",E,"Returns true if x is a power of 2. Delightfully generic.",N,[[["i"]],[r_Ha]]],[17,"NPRIMES",E,"Number of primes supported by our library.",N,N],[17,"PRIMES",E,"Primes used in fancy garbling.",N,N],[17,"PRIMES_SKIP_2",E,"Primes skipping the modulus 2, which allows certain gadgets.",N,N],[8,r_gd,E,"Extra Rng functionality, useful for `fancy-garbling`.",N,N],[11,"gen_bool",E,E,14,[[[r_fa]],[r_Ha]]],[11,"gen_u16",E,E,14,[[[r_fa]],[r_la]]],[11,"gen_u32",E,E,14,[[[r_fa]],["u32"]]],[11,"gen_u64",E,E,14,[[[r_fa]],[r_la]]],[11,"gen_usize",E,E,14,[[[r_fa]],[r_ga]]],[11,"gen_u128",E,E,14,[[[r_fa]],[r_na]]],[11,"gen_usable_u128",E,E,14,[[[r_fa],[r_la]],[r_na]]],[11,"gen_prime",E,E,14,[[[r_fa]],[r_la]]],[11,"gen_modulus",E,E,14,[[[r_fa]],[r_la]]],[11,"gen_usable_composite_modulus",E,E,14,[[[r_fa]],[r_na]]],[11,"gen_usable_factors",E,E,14,[[[r_fa]],[r_ja,[r_la]]]],[6,r_Ia,r_aa,"The ciphertext created by a garbled gate.",N,N],[6,r_Ja,E,"Ciphertext created by the garbler for output gates.",N,N],[6,"SyncIndex",E,"The index of a thread for synchronization.",N,N],[8,r_hd,E,"An object that has some modulus. Basic object of Fancy…",N,N],[10,r_Ka,E,"The modulus of the wire.",15,[[[r_fa]],[r_la]]],[8,r_id,E,"DSL for the basic computations supported by fancy-garbling.",N,N],[16,"Item",E,"The underlying wire datatype created by an object…",16,N],[10,r_3a,E,"Create an input for the garbler with modulus `q` and…",16,N],[10,r_4a,E,"Create an input for the evaluator with modulus `q`.",16,N],[10,r_5a,E,"Create a constant `x` with modulus `q`.",16,N],[10,r_eb,E,"Add `x` and `y`.",16,N],[10,r_fb,E,"Subtract `x` and `y`.",16,N],[10,r_6a,E,"Multiply `x` times the constant `c`.",16,N],[10,r_gb,E,"Multiply `x` and `y`.",16,N],[10,r_ab,E,"Project `x` according to the truth table `tt`. Resulting…",16,N],[10,r_7a,E,"Process this wire as output.",16,N],[11,r_8a,E,r_tb,16,[[[r_fa],[r_La]]]],[11,r_9a,E,r_ub,16,[[[r_fa],[r_La]]]],[11,r_vb,E,r_wb,16,N],[11,r_xb,E,r_yb,16,N],[11,r_zb,E,r_Ab,16,N],[11,"xor",E,r_Bb,16,N],[11,r_Ma,E,r_Cb,16,N],[11,"and",E,r_Db,16,N],[11,"or",E,r_Eb,16,N],[11,r_Fb,E,r_Gb,16,N],[11,r_Hb,E,r_Ib,16,N],[11,r_Jb,E,r_Kb,16,N],[11,r_Lb,E,r_Mb,16,N],[11,"mux",E,r_Nb,16,N],[11,r_Ob,E,r_Pb,16,N],[11,r_Qb,E,r_Rb,16,N],[8,r_jd,E,"Extension trait for `Fancy` providing advanced gadgets…",N,N],[11,r_Sb,E,r_Tb,17,N],[11,r_Ub,E,r_Vb,17,N],[11,r_Wb,E,r_Xb,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_Na,[r_na]]],[r_Oa]]],[11,r_Yb,E,r_Zb,17,[[[r_fa],[r_Na,[r_La]],[r_na]],[r_Oa]]],[11,r_0b,E,r_1b,17,[[[r_fa],[r_Na,[r_La]],[r_ga],[r_Na,[r_na]]],[r_Oa]]],[11,r_2b,E,r_3b,17,[[[r_fa],[r_Na,[r_La]],[r_ga]],[r_Oa]]],[11,r_4b,E,r_5b,17,N],[11,r_6b,E,r_7b,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_na]],[r_Oa]]],[11,r_8b,E,r_9b,17,N],[11,r_ac,E,r_bc,17,N],[11,r_cc,E,r_dc,17,N],[11,r_ec,E,r_fc,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_ga],[r_Na,[r_ja]]],[r_ja,[r_Oa]]]],[11,r_gc,E,r_hc,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_ga]],[r_ja,[r_Oa]]]],[11,r_ic,E,r_jc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa]]]],[11,r_kc,E,r_lc,17,N],[11,r_mc,E,r_nc,17,[[[r_fa],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_oc,E,r_pc,17,[[[r_fa],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_qc,E,r_rc,17,[[[r_fa],[r_Oa],[r_na]],[r_Oa]]],[11,r_sc,E,r_tc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_uc,E,r_vc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_la]],[r_Oa]]],[11,r_wc,E,r_xc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_la]],[r_Oa]]],[11,r_yc,E,r_zc,17,N],[11,r_Ac,E,r_Bc,17,N],[11,r_Cc,E,r_Dc,17,N],[11,"relu",E,r_Ec,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Fc]],[r_Oa]]],[11,"sign",E,r_Gc,17,N],[11,"sgn",E,r_Hc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Fc]],[r_Oa]]],[11,"lt",E,r_Ic,17,N],[11,"geq",E,r_Jc,17,N],[11,"max",E,r_Kc,17,N],[11,r_Lc,E,r_Mc,17,N],[11,r_Nc,E,r_Oc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_Pc,E,r_Qc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_Rc,E,r_Sc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa]],[r_Oa]]],[11,r_Tc,E,r_Uc,17,N],[11,r_Vc,E,r_Wc,17,N],[11,r_Xc,E,r_Yc,17,N],[11,r_Zc,E,r_0c,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_ga]],[r_Oa]]],[11,r_1c,E,r_2c,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_na],[r_ga]],[r_Oa]]],[11,"abs",E,r_3c,17,[[[r_fa],[r_Na,[r_La]],[r_Oa]],[r_Oa]]],[11,r_Va,E,E,2,[[[T]],[T]]],[11,r_Wa,E,E,2,[[[r_fa]],[U]]],[11,r_Pa,E,E,2,[[[U]],[r_Aa]]],[11,r_Qa,E,E,2,[[[r_fa]],[T]]],[11,r_Ra,E,E,2,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,2,[[[r_fa]],[T]]],[11,r_Ua,E,E,2,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,3,[[[T]],[T]]],[11,r_Wa,E,E,3,[[[r_fa]],[U]]],[11,r_Pa,E,E,3,[[[U]],[r_Aa]]],[11,r_Qa,E,E,3,[[[r_fa]],[T]]],[11,r_Ra,E,E,3,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,3,[[[r_fa]],[T]]],[11,r_Ua,E,E,3,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,5,[[[T]],[T]]],[11,r_Wa,E,E,5,[[[r_fa]],[U]]],[11,r_Pa,E,E,5,[[[U]],[r_Aa]]],[11,r_Qa,E,E,5,[[[r_fa]],[T]]],[11,r_Ra,E,E,5,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,5,[[[r_fa]],[T]]],[11,r_Ua,E,E,5,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,6,[[[T]],[T]]],[11,r_Wa,E,E,6,[[[r_fa]],[U]]],[11,r_Pa,E,E,6,[[[U]],[r_Aa]]],[11,r_Qa,E,E,6,[[[r_fa]],[T]]],[11,r_Ra,E,E,6,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,6,[[[r_fa]],[T]]],[11,r_Ua,E,E,6,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,4,[[[T]],[T]]],[11,r_Wa,E,E,4,[[[r_fa]],[U]]],[11,r_Pa,E,E,4,[[[U]],[r_Aa]]],[11,r_Qa,E,E,4,[[[r_fa]],[T]]],[11,r_Ra,E,E,4,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,4,[[[r_fa]],[T]]],[11,r_Ua,E,E,4,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,7,[[[T]],[T]]],[11,r_Wa,E,E,7,[[[r_fa]],[U]]],[11,r_Za,E,E,7,[[[r_fa]],[T]]],[11,r_0a,E,E,7,N],[11,r_Pa,E,E,7,[[[U]],[r_Aa]]],[11,r_Qa,E,E,7,[[[r_fa]],[T]]],[11,r_Ra,E,E,7,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,7,[[[r_fa]],[T]]],[11,r_Ua,E,E,7,[[[r_fa]],[r_Aa]]],[11,r_Xa,E,E,0,[[[r_fa]],[r_Ya]]],[11,r_Va,E,E,0,[[[T]],[T]]],[11,r_Wa,E,E,0,[[[r_fa]],[U]]],[11,r_Za,E,E,0,[[[r_fa]],[T]]],[11,r_0a,E,E,0,N],[11,r_Pa,E,E,0,[[[U]],[r_Aa]]],[11,r_Qa,E,E,0,[[[r_fa]],[T]]],[11,r_Ra,E,E,0,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,0,[[[r_fa]],[T]]],[11,r_Ua,E,E,0,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,1,[[[T]],[T]]],[11,r_Wa,E,E,1,[[[r_fa]],[U]]],[11,r_Za,E,E,1,[[[r_fa]],[T]]],[11,r_0a,E,E,1,N],[11,r_Pa,E,E,1,[[[U]],[r_Aa]]],[11,r_Qa,E,E,1,[[[r_fa]],[T]]],[11,r_Ra,E,E,1,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,1,[[[r_fa]],[T]]],[11,r_Ua,E,E,1,[[[r_fa]],[r_Aa]]],[11,r_Va,r_1a,E,8,[[[T]],[T]]],[11,r_Wa,E,E,8,[[[r_fa]],[U]]],[11,r_Pa,E,E,8,[[[U]],[r_Aa]]],[11,r_Qa,E,E,8,[[[r_fa]],[T]]],[11,r_Ra,E,E,8,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,8,[[[r_fa]],[T]]],[11,r_Ua,E,E,8,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,18,[[[T]],[T]]],[11,r_Wa,E,E,18,[[[r_fa]],[U]]],[11,r_Za,E,E,18,[[[r_fa]],[T]]],[11,r_0a,E,E,18,N],[11,r_Pa,E,E,18,[[[U]],[r_Aa]]],[11,r_Qa,E,E,18,[[[r_fa]],[T]]],[11,r_Ra,E,E,18,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,18,[[[r_fa]],[T]]],[11,r_Ua,E,E,18,[[[r_fa]],[r_Aa]]],[11,r_Va,r_2a,E,9,[[[T]],[T]]],[11,r_Wa,E,E,9,[[[r_fa]],[U]]],[11,r_Pa,E,E,9,[[[U]],[r_Aa]]],[11,r_Qa,E,E,9,[[[r_fa]],[T]]],[11,r_Ra,E,E,9,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,9,[[[r_fa]],[T]]],[11,r_Ua,E,E,9,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,19,[[[T]],[T]]],[11,r_Wa,E,E,19,[[[r_fa]],[U]]],[11,r_Za,E,E,19,[[[r_fa]],[T]]],[11,r_0a,E,E,19,N],[11,r_Pa,E,E,19,[[[U]],[r_Aa]]],[11,r_Qa,E,E,19,[[[r_fa]],[T]]],[11,r_Ra,E,E,19,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,19,[[[r_fa]],[T]]],[11,r_Ua,E,E,19,[[[r_fa]],[r_Aa]]],[11,r_Va,r_ua,E,10,[[[T]],[T]]],[11,r_Wa,E,E,10,[[[r_fa]],[U]]],[11,r_Za,E,E,10,[[[r_fa]],[T]]],[11,r_0a,E,E,10,N],[11,r_Pa,E,E,10,[[[U]],[r_Aa]]],[11,r_Qa,E,E,10,[[[r_fa]],[T]]],[11,r_Ra,E,E,10,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,10,[[[r_fa]],[T]]],[11,r_Ua,E,E,10,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,11,[[[T]],[T]]],[11,r_Wa,E,E,11,[[[r_fa]],[U]]],[11,r_Za,E,E,11,[[[r_fa]],[T]]],[11,r_0a,E,E,11,N],[11,r_Pa,E,E,11,[[[U]],[r_Aa]]],[11,r_Qa,E,E,11,[[[r_fa]],[T]]],[11,r_Ra,E,E,11,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,11,[[[r_fa]],[T]]],[11,r_Ua,E,E,11,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,13,[[[T]],[T]]],[11,r_Wa,E,E,13,[[[r_fa]],[U]]],[11,r_Pa,E,E,13,[[[U]],[r_Aa]]],[11,r_Qa,E,E,13,[[[r_fa]],[T]]],[11,r_Ra,E,E,13,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,13,[[[r_fa]],[T]]],[11,r_Ua,E,E,13,[[[r_fa]],[r_Aa]]],[11,r_Va,E,E,12,[[[T]],[T]]],[11,r_Wa,E,E,12,[[[r_fa]],[U]]],[11,r_Za,E,E,12,[[[r_fa]],[T]]],[11,r_0a,E,E,12,N],[11,r_Pa,E,E,12,[[[U]],[r_Aa]]],[11,r_Qa,E,E,12,[[[r_fa]],[T]]],[11,r_Ra,E,E,12,[[[r_fa]],[r_Sa]]],[11,r_Ta,E,E,12,[[[r_fa]],[T]]],[11,r_Ua,E,E,12,[[[r_fa]],[r_Aa]]],[11,r_Ka,r_aa,E,1,[[[r_fa]],[r_la]]],[11,r_Ka,r_1a,E,18,[[[r_fa]],[r_la]]],[11,r_Ka,r_2a,E,19,[[[r_fa]],[r_la]]],[11,r_Ka,r_ua,E,10,[[[r_fa]],[r_la]]],[11,r_3a,r_aa,E,2,[[[r_fa],[r_Na,[r_La]],[r_la],[r_Na,[r_la]]],[r_ea]]],[11,r_4a,E,E,2,[[[r_fa],[r_Na,[r_La]],[r_la]],[r_ea]]],[11,r_5a,E,E,2,[[[r_fa],[r_Na,[r_La]],[r_la],[r_la]],[r_ea]]],[11,r_eb,E,E,2,[[[r_fa],[r_ea],[r_ea]],[r_ea]]],[11,r_fb,E,E,2,[[[r_fa],[r_ea],[r_ea]],[r_ea]]],[11,r_6a,E,E,2,[[[r_fa],[r_ea],[r_la]],[r_ea]]],[11,r_gb,E,E,2,[[[r_fa],[r_Na,[r_La]],[r_ea],[r_ea]],[r_ea]]],[11,r_ab,E,E,2,[[[r_fa],[r_Na,[r_La]],[r_ea],[r_la],[r_Na,[r_ja]]],[r_ea]]],[11,r_7a,E,E,2,[[[r_fa],[r_Na,[r_La]],[r_ea]]]],[11,r_8a,E,E,2,[[[r_fa],[r_La]]]],[11,r_9a,E,E,2,[[[r_fa],[r_La]]]],[11,r_3a,E,E,3,[[[r_fa],[r_Na,[r_La]],[r_la],[r_Na,[r_la]]],[r_ea]]],[11,r_4a,E,E,3,[[[r_fa],[r_Na,[r_La]],[r_la]],[r_ea]]],[11,r_5a,E,E,3,[[[r_fa],[r_Na,[r_La]],[r_la],[r_la]],[r_ea]]],[11,r_eb,E,E,3,[[[r_fa],[r_ea],[r_ea]],[r_ea]]],[11,r_fb,E,E,3,[[[r_fa],[r_ea],[r_ea]],[r_ea]]],[11,r_6a,E,E,3,[[[r_fa],[r_ea],[r_la]],[r_ea]]],[11,r_gb,E,E,3,[[[r_fa],[r_Na,[r_La]],[r_ea],[r_ea]],[r_ea]]],[11,r_ab,E,E,3,[[[r_fa],[r_Na,[r_La]],[r_ea],[r_la],[r_Na,[r_ja]]],[r_ea]]],[11,r_7a,E,E,3,[[[r_fa],[r_Na,[r_La]],[r_ea]]]],[11,r_8a,E,E,3,[[[r_fa],[r_La]]]],[11,r_9a,E,E,3,[[[r_fa],[r_La]]]],[11,r_3a,r_1a,E,8,[[[r_fa],[r_Na,[r_La]],[r_la],[r_Na,[r_la]]],[r_bb]]],[11,r_4a,E,E,8,[[[r_fa],[r_Na,[r_La]],[r_la]],[r_bb]]],[11,r_5a,E,E,8,[[[r_fa],[r_Na,[r_La]],[r_la],[r_la]],[r_bb]]],[11,r_eb,E,E,8,[[[r_fa],[r_bb],[r_bb]],[r_bb]]],[11,r_fb,E,E,8,[[[r_fa],[r_bb],[r_bb]],[r_bb]]],[11,r_6a,E,E,8,[[[r_fa],[r_bb],[r_la]],[r_bb]]],[11,r_gb,E,E,8,[[[r_fa],[r_Na,[r_La]],[r_bb],[r_bb]],[r_bb]]],[11,r_ab,E,E,8,[[[r_fa],[r_Na,[r_La]],[r_bb],[r_la],[r_Na,[r_ja]]],[r_bb]]],[11,r_7a,E,E,8,[[[r_fa],[r_Na,[r_La]],[r_bb]]]],[11,r_8a,E,E,8,[[[r_fa],[r_La]]]],[11,r_9a,E,E,8,[[[r_fa],[r_La]]]],[11,r_3a,r_2a,E,9,[[[r_fa],[r_Na,[r_La]],[r_la],[r_Na,[r_la]]],[r_cb]]],[11,r_4a,E,E,9,[[[r_fa],[r_Na,[r_La]],[r_la]],[r_cb]]],[11,r_5a,E,E,9,[[[r_fa],[r_Na,[r_La]],[r_la],[r_la]],[r_cb]]],[11,r_eb,E,E,9,[[[r_fa],[r_cb],[r_cb]],[r_cb]]],[11,r_fb,E,E,9,[[[r_fa],[r_cb],[r_cb]],[r_cb]]],[11,r_6a,E,E,9,[[[r_fa],[r_cb],[r_la]],[r_cb]]],[11,r_gb,E,E,9,[[[r_fa],[r_Na,[r_La]],[r_cb],[r_cb]],[r_cb]]],[11,r_ab,E,E,9,[[[r_fa],[r_Na,[r_La]],[r_cb],[r_la],[r_Na,[r_ja]]],[r_cb]]],[11,r_7a,E,E,9,[[[r_fa],[r_Na,[r_La]],[r_cb]]]],[11,r_3a,r_ua,E,13,[[[r_fa],[r_Na,[r_La]],[r_la],[r_Na,[r_la]]],[r_db]]],[11,r_4a,E,E,13,[[[r_fa],[r_Na,[r_La]],[r_la]],[r_db]]],[11,r_5a,E,E,13,[[[r_fa],[r_Na,[r_La]],[r_la],[r_la]],[r_db]]],[11,r_eb,E,E,13,[[[r_fa],[r_db],[r_db]],[r_db]]],[11,r_fb,E,E,13,[[[r_fa],[r_db],[r_db]],[r_db]]],[11,r_6a,E,E,13,[[[r_fa],[r_db],[r_la]],[r_db]]],[11,r_ab,E,E,13,[[[r_fa],[r_Na,[r_La]],[r_db],[r_la],[r_Na,[r_ja]]],[r_db]]],[11,r_gb,E,E,13,[[[r_fa],[r_Na,[r_La]],[r_db],[r_db]],[r_db]]],[11,r_7a,E,E,13,[[[r_fa],[r_Na,[r_La]],[r_db]]]],[11,"eq",r_aa,E,4,[[[r_fa],[r_hb]],[r_Ha]]],[11,"ne",E,E,4,[[[r_fa],[r_hb]],[r_Ha]]],[11,"eq",E,E,5,[[[r_fa],[r_ib]],[r_Ha]]],[11,"ne",E,E,5,[[[r_fa],[r_ib]],[r_Ha]]],[11,"eq",E,E,6,[[[r_fa],[r_jb]],[r_Ha]]],[11,"ne",E,E,6,[[[r_fa],[r_jb]],[r_Ha]]],[11,"eq",E,E,0,[[[r_fa],[r_kb]],[r_Ha]]],[11,"ne",E,E,0,[[[r_fa],[r_kb]],[r_Ha]]],[11,"eq",E,E,1,[[[r_fa],[r_ea]],[r_Ha]]],[11,"ne",E,E,1,[[[r_fa],[r_ea]],[r_Ha]]],[11,"eq",r_ua,E,10,[[[r_fa],[r_db]],[r_Ha]]],[11,"ne",E,E,10,[[[r_fa],[r_db]],[r_Ha]]],[11,"eq",E,E,11,[[[r_fa],[r_Ba]],[r_Ha]]],[11,"ne",E,E,11,[[[r_fa],[r_Ba]],[r_Ha]]],[11,"eq",E,E,12,[[[r_fa],[r_mb]],[r_Ha]]],[11,"ne",E,E,12,[[[r_fa],[r_mb]],[r_Ha]]],[11,r_lb,r_aa,E,0,[[[r_fa]],[r_kb]]],[11,r_lb,E,E,1,[[[r_fa]],[r_ea]]],[11,r_lb,E,E,7,[[[r_fa]],[r_Oa]]],[11,r_lb,r_1a,E,18,[[[r_fa]],[r_bb]]],[11,r_lb,r_2a,E,19,[[[r_fa]],[r_cb]]],[11,r_lb,r_ua,E,10,[[[r_fa]],[r_db]]],[11,r_lb,E,E,11,[[[r_fa]],[r_Ba]]],[11,r_lb,E,E,12,[[[r_fa]],[r_mb]]],[11,"partial_cmp",r_aa,E,1,[[[r_fa],[r_ea]],[r_Na,["ordering"]]]],[11,"lt",E,E,1,[[[r_fa],[r_ea]],[r_Ha]]],[11,"le",E,E,1,[[[r_fa],[r_ea]],[r_Ha]]],[11,"gt",E,E,1,[[[r_fa],[r_ea]],[r_Ha]]],[11,"ge",E,E,1,[[[r_fa],[r_ea]],[r_Ha]]],[11,r_ob,E,E,0,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,4,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,5,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,6,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,0,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,1,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,r_1a,E,18,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,r_2a,E,19,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,r_ua,E,10,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,11,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_ob,E,E,12,[[[r_fa],[r_nb]],[r_Aa]]],[11,r_pb,r_aa,E,4,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,E,E,5,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,E,E,6,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,E,E,0,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,E,E,1,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,r_ua,E,10,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,E,E,11,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_pb,E,E,12,[[[r_fa],[r_qb]],[r_Aa]]],[11,r_rb,r_aa,E,4,[[[r_sb]],[r_Aa]]],[11,r_rb,E,E,5,[[[r_sb]],[r_Aa]]],[11,r_rb,E,E,6,[[[r_sb]],[r_Aa]]],[11,r_rb,E,E,0,[[[r_sb]],[r_Aa]]],[11,r_rb,E,E,1,[[[r_sb]],[r_Aa]]],[11,r_rb,r_ua,E,10,[[[r_sb]],[r_Aa]]],[11,r_rb,E,E,11,[[[r_sb]],[r_Aa]]],[11,r_rb,E,E,12,[[[r_sb]],[r_Aa]]],[11,r_8a,r_aa,r_tb,16,[[[r_fa],[r_La]]]],[11,r_9a,E,r_ub,16,[[[r_fa],[r_La]]]],[11,r_vb,E,r_wb,16,N],[11,r_xb,E,r_yb,16,N],[11,r_zb,E,r_Ab,16,N],[11,"xor",E,r_Bb,16,N],[11,r_Ma,E,r_Cb,16,N],[11,"and",E,r_Db,16,N],[11,"or",E,r_Eb,16,N],[11,r_Fb,E,r_Gb,16,N],[11,r_Hb,E,r_Ib,16,N],[11,r_Jb,E,r_Kb,16,N],[11,r_Lb,E,r_Mb,16,N],[11,"mux",E,r_Nb,16,N],[11,r_Ob,E,r_Pb,16,N],[11,r_Qb,E,r_Rb,16,N],[11,r_Sb,E,r_Tb,17,N],[11,r_Ub,E,r_Vb,17,N],[11,r_Wb,E,r_Xb,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_Na,[r_na]]],[r_Oa]]],[11,r_Yb,E,r_Zb,17,[[[r_fa],[r_Na,[r_La]],[r_na]],[r_Oa]]],[11,r_0b,E,r_1b,17,[[[r_fa],[r_Na,[r_La]],[r_ga],[r_Na,[r_na]]],[r_Oa]]],[11,r_2b,E,r_3b,17,[[[r_fa],[r_Na,[r_La]],[r_ga]],[r_Oa]]],[11,r_4b,E,r_5b,17,N],[11,r_6b,E,r_7b,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_na]],[r_Oa]]],[11,r_8b,E,r_9b,17,N],[11,r_ac,E,r_bc,17,N],[11,r_cc,E,r_dc,17,N],[11,r_ec,E,r_fc,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_ga],[r_Na,[r_ja]]],[r_ja,[r_Oa]]]],[11,r_gc,E,r_hc,17,[[[r_fa],[r_Na,[r_La]],[r_na],[r_ga]],[r_ja,[r_Oa]]]],[11,r_ic,E,r_jc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa]]]],[11,r_kc,E,r_lc,17,N],[11,r_mc,E,r_nc,17,[[[r_fa],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_oc,E,r_pc,17,[[[r_fa],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_qc,E,r_rc,17,[[[r_fa],[r_Oa],[r_na]],[r_Oa]]],[11,r_sc,E,r_tc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_uc,E,r_vc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_la]],[r_Oa]]],[11,r_wc,E,r_xc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_la]],[r_Oa]]],[11,r_yc,E,r_zc,17,N],[11,r_Ac,E,r_Bc,17,N],[11,r_Cc,E,r_Dc,17,N],[11,"relu",E,r_Ec,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Fc]],[r_Oa]]],[11,"sign",E,r_Gc,17,N],[11,"sgn",E,r_Hc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Fc]],[r_Oa]]],[11,"lt",E,r_Ic,17,N],[11,"geq",E,r_Jc,17,N],[11,"max",E,r_Kc,17,N],[11,r_Lc,E,r_Mc,17,N],[11,r_Nc,E,r_Oc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_Pc,E,r_Qc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_Oa]],[r_Oa]]],[11,r_Rc,E,r_Sc,17,[[[r_fa],[r_Na,[r_La]],[r_Oa]],[r_Oa]]],[11,r_Tc,E,r_Uc,17,N],[11,r_Vc,E,r_Wc,17,N],[11,r_Xc,E,r_Yc,17,N],[11,r_Zc,E,r_0c,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_ga]],[r_Oa]]],[11,r_1c,E,r_2c,17,[[[r_fa],[r_Na,[r_La]],[r_Oa],[r_na],[r_ga]],[r_Oa]]],[11,"abs",E,r_3c,17,[[[r_fa],[r_Na,[r_La]],[r_Oa]],[r_Oa]]]],"p":[[4,r_4c],[4,"Wire"],[3,r_5c],[3,r_6c],[3,r_7c],[3,r_8c],[3,r_9c],[3,r_ad],[3,r_bd],[3,r_cd],[3,r_dd],[3,r_ed],[4,"Gate"],[3,r_fd],[8,r_gd],[8,r_hd],[8,r_id],[8,r_jd],[3,r_kd],[3,r_ld]]};
initSearch(searchIndex);addSearchOptions(searchIndex);