var N=null,E="",T="t",U="u",searchIndex={};
var R=["fancy_garbling","fancy_garbling::Message","fancy_garbling::Wire","circuit","GarblerInput","EvaluatorInput","fancy_garbling::circuit","fancy_garbling::circuit::Gate","Constant","result","fancy_garbling::error","fancy_garbling::error::FancyError","FancyError","num_garbler_inputs","num_evaluator_inputs","informer","print_info","Convert a `u128` into base `q`.","Compute the CRT representation of x with respect to the…","Generate a CRT modulus that support at least n-bit…","Generate the factors of a CRT modulus that support at…","GarbledGate","OutputCiphertext","bundle","option","try_from","borrow_mut","try_into","type_id","borrow","typeid","to_owned","clone_into","to_string","fancy_garbling::dummy","string","fancy_garbling::informer","modulus","garbler_input","evaluator_input","circuitref","constant","dummyval","evaluatorerror","garblererror","output","informererror","informerval","garbledcircuit","fancyerror","circuitparsererror","message","formatter","serialize","deserialize","garbler_input_bundle","Crate an input bundle for the garbler using moduli `ps`…","evaluator_input_bundle","Crate an input bundle for the evaluator using moduli `ps`.","garbler_input_bundle_crt","Crate an input bundle for the garbler using composite CRT…","evaluator_input_bundle_crt","Crate an input bundle for the evaluator using composite…","garbler_input_bundle_binary","Create an input bundle for the garbler using `nbits` base…","evaluator_input_bundle_binary","Create an input bundle for the evaluator using n base 2…","constant_bundle","Creates a bundle of constant wires using moduli `ps`.","constant_bundle_crt","Creates a bundle of constant wires for the CRT…","constant_bundle_binary","Create a constant bundle using base 2 inputs.","garbler_input_bundles","Create `n` garbler input bundles, using moduli `ps` and…","evaluator_input_bundles","Create `n` evaluator input bundles, using moduli `ps`.","garbler_input_bundles_crt","Create `n` garbler input bundles, under composite CRT…","evaluator_input_bundles_crt","Create `n` evaluator input bundles, under composite CRT…","output_bundle","Output the wires that make up a bundle.","output_bundles","Output a slice of bundles.","add_bundles","Add two wire bundles, residue by residue.","sub_bundles","Subtract two wire bundles, residue by residue.","cmul_bundle","Multiplies each wire in `x` by the corresponding residue…","mul_bundles","Multiply `x` with `y`.","cexp_bundle","Exponentiate `x` by the constant `c`.","rem_bundle","Compute the remainder with respect to modulus `p`.","eq_bundles","Compute `x == y`. Returns a wire encoding the result mod 2.","mixed_radix_addition","Mixed radix addition.","mixed_radix_addition_msb_only","Mixed radix addition only returning the MSB.","fractional_mixed_radix","Helper function for advanced gadgets, returns the MSB of…","Compute `max(x,0)`.","Return 0 if `x` is positive and 1 if `x` is negative.","Return `if x >= 0 then 1 else -1`, where `-1` is…","Returns 1 if `x < y`. Works on both CRT and binary bundles.","Returns 1 if `x >= y`. Works on both CRT and binary bundles.","Compute the maximum bundle in `xs`.","binary_addition","Binary addition. Returns the result and the carry.","binary_addition_no_carry","Binary addition. Avoids creating extra gates for the final…","binary_multiplication_lower_half","Binary multiplication.","twos_complement","Compute the twos complement of the input bundle (which…","binary_subtraction","Subtract two binary bundles. Returns the result and…","multiplex","If b=0 then return x, else return y.","multiplex_constant_bits","If `x=0` return `c1` as a bundle of constant bits, else…","Shift residues, replacing them with zeros in the modulus…","binary_cmul","Write the constant in binary and that gives you the shift…","Compute the absolute value of a binary bundle.","garbler_inputs","Create `n` garbler inputs with the moduli `qs` and…","evaluator_inputs","Create `n` evaluator inputs with the moduli `qs`.","Sum up a slice of wires.","Xor is just addition, with the requirement that `x` and…","Negate by xoring `x` with `1`.","And is just multiplication, with the requirement that `x`…","Or uses Demorgan's Rule implemented with multiplication…","Returns 1 if all wires equal 1.","Returns 1 if any wire equals 1.","mod_change","Change the modulus of `x` to `to_modulus` using a…","Binary adder. Returns the result and the carry.","If `b = 0` returns `x` else `y`.","mux_constant_bits","If `x = 0` returns the constant `b1` else return `b2`.…","Output a slice of wires.","CircuitRef","CircuitBuilder","DummyError","EvaluatorError","GarblerError","CircuitBuilderError","InformerError","CircuitParserError","Evaluator","GarbledCircuit","BundleGadgets","HasModulus","InformerVal"];

searchIndex[R[0]]={"doc":E,"i":[[3,"Bundle",R[0],"A collection of wires, useful for the garbled gadgets…",N,N],[3,"Decoder",E,"Decode outputs statically. Created by the `garble` function.",N,N],[3,"Encoder",E,"Encode inputs statically. Created by the `garble` function.",N,N],[3,R[155],E,"Streaming evaluator using a callback to receive…",N,N],[3,R[156],E,"Static evaluator for a circuit, created by the `garble`…",N,N],[3,"Garbler",E,"Streams garbled circuit ciphertexts through a callback.…",N,N],[4,"Message",E,"The outputs that can be emitted by a Garbler and consumed…",N,N],[13,"UnencodedGarblerInput",E,"Zero wire and delta for one of the garbler's inputs.",0,N],[12,"zero",R[1],E,0,N],[12,"delta",E,E,0,N],[13,"UnencodedEvaluatorInput",R[0],"Zero wire and delta for one of the evaluator's inputs.",0,N],[12,"zero",R[1],E,0,N],[12,"delta",E,E,0,N],[13,R[4],R[0],"Encoded input for one of the garbler's inputs.",0,N],[13,R[5],E,"Encoded input for one of the evaluator's inputs.",0,N],[13,R[8],E,"Constant wire carrying the value.",0,N],[12,"value",R[1],E,0,N],[12,"wire",E,E,0,N],[13,R[21],R[0],"Garbled gate emitted by a projection or multiplication.",0,N],[13,R[22],E,"Output decoding information.",0,N],[4,"Wire",E,"The essential wirelabel type used by garbled circuits.",N,N],[13,"Mod2",E,E,1,N],[12,"val",R[2],E,1,N],[13,"ModN",R[0],E,1,N],[12,"q",R[2],E,1,N],[12,"ds",E,E,1,N],[5,"garble_iter",R[0],"Create an iterator over the messages produced by fancy…",N,N],[5,"garble",E,"Garble a circuit without streaming.",N,[[[R[3]]],[R[9],[R[44]]]]],[0,R[3],E,"DSL for creating circuits compatible with fancy-garbling…",N,N],[3,R[147],R[6],"The index and modulus of a gate in a circuit.",N,N],[12,"ix",E,E,2,N],[3,"Circuit",E,"Static representation of the type of computation supported…",N,N],[12,"gates",E,E,3,N],[12,"gate_moduli",E,E,3,N],[12,"garbler_input_refs",E,E,3,N],[12,"evaluator_input_refs",E,E,3,N],[12,"const_refs",E,E,3,N],[12,"output_refs",E,E,3,N],[3,R[148],E,"CircuitBuilder is used to build circuits.",N,N],[4,"Gate",E,"The most basic types of computation supported by fancy…",N,N],[13,R[4],E,E,4,N],[12,"id",R[7],E,4,N],[13,R[5],R[6],E,4,N],[12,"id",R[7],E,4,N],[13,R[8],R[6],E,4,N],[12,"val",R[7],E,4,N],[13,"Add",R[6],E,4,N],[12,"xref",R[7],E,4,N],[12,"yref",E,E,4,N],[12,"out",E,E,4,N],[13,"Sub",R[6],E,4,N],[12,"xref",R[7],E,4,N],[12,"yref",E,E,4,N],[12,"out",E,E,4,N],[13,"Cmul",R[6],E,4,N],[12,"xref",R[7],E,4,N],[12,"c",E,E,4,N],[12,"out",E,E,4,N],[13,"Mul",R[6],E,4,N],[12,"xref",R[7],E,4,N],[12,"yref",E,E,4,N],[12,"id",E,E,4,N],[12,"out",E,E,4,N],[13,"Proj",R[6],E,4,N],[12,"xref",R[7],E,4,N],[12,"tt",E,E,4,N],[12,"id",E,E,4,N],[12,"out",E,E,4,N],[11,"new",R[6],E,3,[[[R[24],["usize"]]],[R[3]]]],[11,"eval",E,E,3,[[["self"],["f"]],[R[9],["vec"]]]],[11,"process_outputs",E,E,3,N],[11,"eval_plain",E,"Evaluate the circuit in plaintext.",3,N],[11,R[16],E,"Print circuit info.",3,[[["self"]],[R[9],[R[46]]]]],[11,R[13],E,E,3,[[["self"]],["usize"]]],[11,R[14],E,E,3,[[["self"]],["usize"]]],[11,"noutputs",E,E,3,[[["self"]],["usize"]]],[11,R[37],E,E,3,[[["self"],["usize"]],["u16"]]],[11,"garbler_input_mod",E,E,3,[[["self"],["usize"]],["u16"]]],[11,"evaluator_input_mod",E,E,3,[[["self"],["usize"]],["u16"]]],[11,"new",E,E,5,[[],["self"]]],[11,"finish",E,E,5,[[["self"]],[R[3]]]],[0,"dummy",R[0],"Dummy implementation of `Fancy`.",N,N],[3,"Dummy",R[34],"Simple struct that performs the fancy computation over…",N,N],[3,"DummyVal",E,"Wrapper around `u16`.",N,N],[11,"new",E,"Create a new Dummy.",6,N],[11,"get_output",E,"Get the output from the fancy computation, consuming the…",6,[[["self"]],["vec",["u16"]]]],[0,"error",R[0],"Errors that may be output by this library.",N,N],[4,R[12],R[10],"Errors that may occur when using the `Fancy` trait. These…",N,N],[13,"UnequalModuli",E,E,7,N],[13,"NotImplemented",E,E,7,N],[13,"InvalidArg",E,E,7,N],[12,"desc",R[11],E,7,N],[13,"InvalidArgNum",R[10],E,7,N],[12,"got",R[11],E,7,N],[12,"needed",E,E,7,N],[13,"InvalidArgMod",R[10],E,7,N],[12,"got",R[11],E,7,N],[12,"needed",E,E,7,N],[13,"ArgNotBinary",R[10],E,7,N],[13,"NoTruthTable",E,E,7,N],[13,"InvalidTruthTable",E,E,7,N],[13,"UninitializedValue",E,E,7,N],[4,R[149],E,"Errors from the dummy fancy object.",N,N],[13,"NotEnoughGarblerInputs",E,E,8,N],[13,"NotEnoughEvaluatorInputs",E,E,8,N],[13,R[12],E,E,8,N],[4,R[150],E,"Errors from the evaluator.",N,N],[13,"InvalidMessage",E,E,9,N],[12,"expected","fancy_garbling::error::EvaluatorError",E,9,N],[12,"got",E,E,9,N],[13,"IndexReceivedInSyncMode",R[10],E,9,N],[13,R[12],E,E,9,N],[4,R[151],E,"Errors from the garbler.",N,N],[13,"AsymmetricHalfGateModuliMax8",E,E,10,N],[13,"TruthTableRequired",E,E,10,N],[13,R[12],E,E,10,N],[4,R[152],E,"Errors emitted when building a circuit.",N,N],[13,R[12],E,E,11,N],[4,R[153],E,"Errors emitted when running the informer.",N,N],[13,R[12],E,E,12,N],[4,R[154],E,"Errors emitted by the circuit parser.",N,N],[13,"IoError",E,E,13,N],[13,"RegexError",E,E,13,N],[13,"ParseIntError",E,E,13,N],[13,"ParseLineError",E,E,13,N],[13,"ParseGateError",E,E,13,N],[11,"new",R[0],"Create a new bundle from some wires.",14,[[["vec"]],[R[23]]]],[11,"moduli",E,"Return the moduli of all the wires in the bundle.",14,[[["self"]],["vec",["u16"]]]],[11,"wires",E,"Extract the wires from this bundle.",14,N],[11,"size",E,"Get the number of wires in this bundle.",14,[[["self"]],["usize"]]],[11,"is_binary",E,"Whether this bundle only contains residues in mod 2.",14,[[["self"]],["bool"]]],[11,"with_moduli",E,"Returns a new bundle only containing wires with matching…",14,N],[11,"pad",E,"Pad the Bundle with val, n times.",14,[[["self"],["w"]]]],[11,"extract",E,"Extract a wire from the Bundle, removing it and returning…",14,[[["self"],["usize"]],["w"]]],[11,"new",E,"Create a new `Evaluator`.",15,[[["f"]],["evaluator"]]],[11,"decode_output",E,"Decode the output received during the Fancy computation.",15,[[["self"]],["vec",["u16"]]]],[11,"new",E,"Create a new object from a vector of garbled gates and…",16,[[["vec",["garbledgate"]],["hashmap",["wire"]]],["self"]]],[11,"size",E,"The number of garbled rows and constant wires in the…",16,[[["self"]],["usize"]]],[11,"eval",E,"Evaluate the garbled circuit.",16,N],[11,"new",E,E,17,[[["vec",["wire"]],["vec",["wire"]],["hashmap",["u16","wire"]]],["self"]]],[11,R[13],E,E,17,[[["self"]],["usize"]]],[11,R[14],E,E,17,[[["self"]],["usize"]]],[11,"encode_garbler_input",E,E,17,[[["self"],["u16"],["usize"]],["wire"]]],[11,"encode_evaluator_input",E,E,17,[[["self"],["u16"],["usize"]],["wire"]]],[11,"encode_garbler_inputs",E,E,17,N],[11,"encode_evaluator_inputs",E,E,17,N],[11,"new",E,E,18,[[["vec",["vec"]]],["self"]]],[11,"decode",E,E,18,N],[11,"new",E,"Create a new garbler.",19,[[["f"],["r"]],["self"]]],[11,"delta",E,"Create a delta if it has not been created yet for this…",19,[[["self"],["u16"]],["wire"]]],[0,R[15],E,"`Informer` runs a fancy computation and learns information…",N,N],[3,"Informer",R[36],"Implements `Fancy`. Used to learn information about a…",N,N],[3,R[159],E,E,N,N],[11,"new",E,E,20,[[],[R[15]]]],[11,R[16],E,"Print information about the fancy computation.",20,[[["self"]]]],[11,R[13],E,"Number of garbler inputs in the fancy computation.",20,[[["self"]],["usize"]]],[11,"garbler_input_moduli",E,"Moduli of garbler inputs in the fancy computation.",20,[[["self"]],["vec",["u16"]]]],[11,R[14],E,"Number of evaluator inputs in the fancy computation.",20,[[["self"]],["usize"]]],[11,"evaluator_input_moduli",E,"Moduli of evaluator inputs in the fancy computation.",20,[[["self"]],["vec",["u16"]]]],[11,"num_consts",E,"Number of constants in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_outputs",E,"Number of outputs in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_output_ciphertexts",E,"Number of output ciphertexts.",20,[[["self"]],["usize"]]],[11,"num_adds",E,"Number of additions in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_subs",E,"Number of subtractions in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_cmuls",E,"Number of scalar multiplications in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_muls",E,"Number of multiplications in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_projs",E,"Number of projections in the fancy computation.",20,[[["self"]],["usize"]]],[11,"num_ciphertexts",E,"Number of ciphertexts in the fancy computation.",20,[[["self"]],["usize"]]],[11,"parse",R[6],"Generates a new `Circuit` from file `filename`. The file…",3,[[["str"]],[R[9],["error"]]]],[0,"util",R[0],"Tools useful for interacting with `fancy-garbling`.",N,N],[5,"tweak","fancy_garbling::util","Tweak function for a single item.",N,[[["usize"]],["block"]]],[5,"tweak2",E,"Tweak function for two items.",N,[[["u64"],["u64"]],["block"]]],[5,"output_tweak",E,"Compute the output tweak for a garbled gate where i is the…",N,[[["usize"],["u16"]],["block"]]],[5,"base_q_add",E,"Add two base q numbers together.",N,N],[5,"base_q_add_eq",E,"Add a base q number into the first one.",N,N],[5,"as_base_q",E,R[17],N,[[["u128"],["u16"],["usize"]],["vec",["u16"]]]],[5,"digits_per_u128",E,"Determine how many `mod q` digits fit into a `u128`.",N,[[["u16"]],["usize"]]],[5,"as_base_q_u128",E,R[17],N,[[["u128"],["u16"]],["vec",["u16"]]]],[5,"as_mixed_radix",E,"Convert a `u128` into mixed radix form with the provided…",N,N],[5,"from_base_q",E,"Convert little-endian base q digits into u128.",N,N],[5,"from_mixed_radix",E,"Convert little-endian mixed radix digits into u128.",N,N],[5,"u128_to_bits",E,"Get the bits of a u128 encoded in 128 u16s, which is…",N,[[["u128"],["usize"]],["vec",["u16"]]]],[5,"u128_from_bits",E,"Convert into a u128 from the \"bits\" as u16. Assumes each…",N,N],[5,"u128_to_bytes",E,"Convert a u128 into bytes.",N,N],[5,"bytes_to_u128",E,"Convert bytes to u128.",N,N],[5,"factor",E,"Factor using the primes in the global `PRIMES` array.…",N,[[["u128"]],["vec",["u16"]]]],[5,"crt",E,R[18],N,N],[5,"crt_factor",E,R[18],N,[[["u128"],["u128"]],["vec",["u16"]]]],[5,"crt_inv",E,"Compute the value x given a list of CRT primes and residues.",N,N],[5,"crt_inv_factor",E,"Compute the value x given a composite CRT modulus.",N,N],[5,"inv",E,"Generic algorithm to invert inp_a mod inp_b. As ref so as…",N,[[["i128"],["i128"]],["i128"]]],[5,"modulus_with_nprimes",E,"Generate a CRT modulus with n primes.",N,[[["usize"]],["u128"]]],[5,"modulus_with_width",E,R[19],N,[[["u32"]],["u128"]]],[5,"primes_with_width",E,R[20],N,[[["u32"]],["vec",["u16"]]]],[5,"base_modulus_with_width",E,R[19],N,N],[5,"base_primes_with_width",E,R[20],N,N],[5,"modulus_with_width_skip2",E,R[19],N,[[["u32"]],["u128"]]],[5,"product",E,"Compute the product of some u16s as a u128.",N,N],[5,"powm",E,"Raise a u16 to a power mod some value.",N,[[["u16"],["u16"],["u16"]],["u16"]]],[5,"is_power_of_2",E,"Returns true if x is a power of 2",N,[[["u16"]],["bool"]]],[17,"NPRIMES",E,"Number of primes supported by our library.",N,N],[17,"PRIMES",E,"Primes used in fancy garbling.",N,N],[17,"PRIMES_SKIP_2",E,"Primes skipping the modulus 2, which allows certain gadgets.",N,N],[8,"RngExt",E,"Extra Rng functionality, useful for `fancy-garbling`.",N,N],[11,"gen_bool",E,E,21,[[["self"]],["bool"]]],[11,"gen_u16",E,E,21,[[["self"]],["u16"]]],[11,"gen_u32",E,E,21,[[["self"]],["u32"]]],[11,"gen_u64",E,E,21,[[["self"]],["u64"]]],[11,"gen_usize",E,E,21,[[["self"]],["usize"]]],[11,"gen_u128",E,E,21,[[["self"]],["u128"]]],[11,"gen_block",E,E,21,[[["self"]],["block"]]],[11,"gen_usable_block",E,E,21,[[["self"],["u16"]],["block"]]],[11,"gen_prime",E,E,21,[[["self"]],["u16"]]],[11,"gen_modulus",E,E,21,[[["self"]],["u16"]]],[11,"gen_usable_composite_modulus",E,E,21,[[["self"]],["u128"]]],[11,"gen_usable_factors",E,E,21,[[["self"]],["vec",["u16"]]]],[11,"digits",R[0],"Get the digits of the wire.",1,[[["self"]],["vec",["u16"]]]],[11,"from_block",E,"Get the wire represented by the `Block`.",1,[[["block"],["u16"]],["self"]]],[11,"as_block",E,"Pack the wire to a `Block`.",1,[[["self"]],["block"]]],[11,"zero",E,"The zero wire for the modulus q.",1,[[["u16"]],["self"]]],[11,"rand_delta",E,"Get a random wire label for mod q, with the first digit…",1,[[["r"],["u16"]],["self"]]],[11,"color",E,"Get the color digit of the wire.",1,[[["self"]],["u16"]]],[11,"plus",E,"Add two wires digit-wise mod q, returning a new wire.",1,[[["self"],["self"]],["self"]]],[11,"plus_eq",E,"Add another wire into this one, digit-wise mod q.",1,[[["self"],["wire"]],["wire"]]],[11,"plus_mov",E,"Add another wire into this one, consuming it for chained…",1,[[["self"],["wire"]],["wire"]]],[11,"cmul",E,"Multiply each digit by a constant c mod q, returning a new…",1,[[["self"],["u16"]],["self"]]],[11,"cmul_eq",E,"Multiply each digit by a constant c mod q.",1,[[["self"],["u16"]],["wire"]]],[11,"cmul_mov",E,"Multiply each digit by a constant c mod q, consuming it…",1,[[["self"],["u16"]],["wire"]]],[11,"negate",E,"Negate all the digits mod q, returning a new wire.",1,[[["self"]],["self"]]],[11,"negate_eq",E,"Negate all the digits mod q.",1,[[["self"]],["wire"]]],[11,"negate_mov",E,"Negate all the digits mod q, consuming it for chained…",1,[[["self"]],["wire"]]],[11,"minus",E,"Subtract two wires, returning the result.",1,[[["self"],["wire"]],["wire"]]],[11,"minus_eq",E,"Subtract a wire from this one.",1,[[["self"],["wire"]],["wire"]]],[11,"minus_mov",E,"Subtract a wire from this one, consuming it for chained…",1,[[["self"],["wire"]],["wire"]]],[11,"rand",E,"Get a random wire mod q.",1,[[["r"],["u16"]],["wire"]]],[11,"hash",E,"Compute the hash of this wire.",1,[[["self"],["block"]],["block"]]],[11,"hashback",E,"Compute the hash of this wire, converting the result back…",1,[[["self"],["block"],["u16"]],["wire"]]],[6,R[21],E,"The ciphertext created by a garbled gate.",N,N],[6,R[22],E,"Ciphertext created by the garbler for output gates.",N,N],[8,R[157],E,"Extension trait for `Fancy` providing advanced gadgets…",N,N],[11,R[55],E,R[56],22,N],[11,R[57],E,R[58],22,N],[11,R[59],E,R[60],22,[[["self"],["u128"],[R[24],["u128"]]],[R[9],[R[23]]]]],[11,R[61],E,R[62],22,[[["self"],["u128"]],[R[9],[R[23]]]]],[11,R[63],E,R[64],22,[[["self"],["usize"],[R[24],["u128"]]],[R[9],[R[23]]]]],[11,R[65],E,R[66],22,[[["self"],["usize"]],[R[9],[R[23]]]]],[11,R[67],E,R[68],22,N],[11,R[69],E,R[70],22,[[["self"],["u128"],["u128"]],[R[9],[R[23]]]]],[11,R[71],E,R[72],22,[[["self"],["u128"],["usize"]],[R[9],[R[23]]]]],[11,R[73],E,R[74],22,N],[11,R[75],E,R[76],22,N],[11,R[77],E,R[78],22,[[["self"],["u128"],["usize"],[R[24],["vec"]]],[R[9],["vec"]]]],[11,R[79],E,R[80],22,[[["self"],["u128"],["usize"]],[R[9],["vec"]]]],[11,R[81],E,R[82],22,[[["self"],[R[23]]],[R[9]]]],[11,R[83],E,R[84],22,N],[11,R[85],E,R[86],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[87],E,R[88],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[89],E,R[90],22,[[["self"],[R[23]],["u128"]],[R[9],[R[23]]]]],[11,R[91],E,R[92],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[93],E,R[94],22,[[["self"],[R[23]],["u16"]],[R[9],[R[23]]]]],[11,R[95],E,R[96],22,[[["self"],[R[23]],["u16"]],[R[9],[R[23]]]]],[11,R[97],E,R[98],22,[[["self"],[R[23]],[R[23]]],[R[9]]]],[11,R[99],E,R[100],22,N],[11,R[101],E,R[102],22,N],[11,R[103],E,R[104],22,N],[11,"relu",E,R[105],22,[[["self"],[R[23]],["str"],[R[24]]],[R[9],[R[23]]]]],[11,"sign",E,R[106],22,[[["self"],[R[23]],["str"]],[R[9]]]],[11,"sgn",E,R[107],22,[[["self"],[R[23]],["str"],[R[24]]],[R[9],[R[23]]]]],[11,"lt",E,R[108],22,[[["self"],[R[23]],[R[23]],["str"]],[R[9]]]],[11,"geq",E,R[109],22,[[["self"],[R[23]],[R[23]],["str"]],[R[9]]]],[11,"max",E,R[110],22,N],[11,R[111],E,R[112],22,[[["self"],[R[23]],[R[23]]],[R[9]]]],[11,R[113],E,R[114],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[115],E,R[116],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[117],E,R[118],22,[[["self"],[R[23]]],[R[9],[R[23]]]]],[11,R[119],E,R[120],22,[[["self"],[R[23]],[R[23]]],[R[9]]]],[11,R[121],E,R[122],22,N],[11,R[123],E,R[124],22,N],[11,"shift",E,R[125],22,[[["self"],[R[23]],["usize"]],[R[9],[R[23]]]]],[11,R[126],E,R[127],22,[[["self"],[R[23]],["u128"],["usize"]],[R[9],[R[23]]]]],[11,"abs",E,R[128],22,[[["self"],[R[23]]],[R[9],[R[23]]]]],[8,R[158],E,"An object that has some modulus. Basic object of `Fancy`…",N,N],[10,R[37],E,"The modulus of the wire.",23,[[["self"]],["u16"]]],[8,"Fancy",E,"DSL for the basic computations supported by…",N,N],[16,"Item",E,"The underlying wire datatype created by an object…",24,N],[16,"Error",E,"Errors which may be thrown by the users of Fancy.",24,N],[10,R[38],E,"Create an input for the garbler with modulus `q` and…",24,[[["self"],["u16"],[R[24],["u16"]]],[R[9]]]],[10,R[39],E,"Create an input for the evaluator with modulus `q`.",24,[[["self"],["u16"]],[R[9]]]],[10,R[41],E,"Create a constant `x` with modulus `q`.",24,[[["self"],["u16"],["u16"]],[R[9]]]],[10,"add",E,"Add `x` and `y`.",24,N],[10,"sub",E,"Subtract `x` and `y`.",24,N],[10,"cmul",E,"Multiply `x` times the constant `c`.",24,N],[10,"mul",E,"Multiply `x` and `y`.",24,N],[10,"proj",E,"Project `x` according to the truth table `tt`. Resulting…",24,N],[10,R[45],E,"Process this wire as output.",24,N],[11,R[129],E,R[130],24,N],[11,R[131],E,R[132],24,N],[11,"add_many",E,R[133],24,N],[11,"xor",E,R[134],24,N],[11,"negate",E,R[135],24,N],[11,"and",E,R[136],24,N],[11,"or",E,R[137],24,N],[11,"and_many",E,R[138],24,N],[11,"or_many",E,R[139],24,N],[11,R[140],E,R[141],24,N],[11,"adder",E,R[142],24,N],[11,"mux",E,R[143],24,N],[11,R[144],E,R[145],24,N],[11,"outputs",E,R[146],24,N],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[31],E,E,14,[[["self"]],[T]]],[11,R[32],E,E,14,N],[11,R[25],E,E,14,[[[U]],[R[9]]]],[11,R[29],E,E,14,[[["self"]],[T]]],[11,R[26],E,E,14,[[["self"]],[T]]],[11,R[27],E,E,14,[[["self"]],[R[9]]]],[11,R[28],E,E,14,[[["self"]],[R[30]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[25],E,E,18,[[[U]],[R[9]]]],[11,R[29],E,E,18,[[["self"]],[T]]],[11,R[26],E,E,18,[[["self"]],[T]]],[11,R[27],E,E,18,[[["self"]],[R[9]]]],[11,R[28],E,E,18,[[["self"]],[R[30]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[25],E,E,17,[[[U]],[R[9]]]],[11,R[29],E,E,17,[[["self"]],[T]]],[11,R[26],E,E,17,[[["self"]],[T]]],[11,R[27],E,E,17,[[["self"]],[R[9]]]],[11,R[28],E,E,17,[[["self"]],[R[30]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[25],E,E,15,[[[U]],[R[9]]]],[11,R[29],E,E,15,[[["self"]],[T]]],[11,R[26],E,E,15,[[["self"]],[T]]],[11,R[27],E,E,15,[[["self"]],[R[9]]]],[11,R[28],E,E,15,[[["self"]],[R[30]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[25],E,E,16,[[[U]],[R[9]]]],[11,R[29],E,E,16,[[["self"]],[T]]],[11,R[26],E,E,16,[[["self"]],[T]]],[11,R[27],E,E,16,[[["self"]],[R[9]]]],[11,R[28],E,E,16,[[["self"]],[R[30]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[25],E,E,19,[[[U]],[R[9]]]],[11,R[29],E,E,19,[[["self"]],[T]]],[11,R[26],E,E,19,[[["self"]],[T]]],[11,R[27],E,E,19,[[["self"]],[R[9]]]],[11,R[28],E,E,19,[[["self"]],[R[30]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[33],E,E,0,[[["self"]],[R[35]]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[31],E,E,0,[[["self"]],[T]]],[11,R[32],E,E,0,N],[11,R[25],E,E,0,[[[U]],[R[9]]]],[11,R[29],E,E,0,[[["self"]],[T]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[27],E,E,0,[[["self"]],[R[9]]]],[11,R[28],E,E,0,[[["self"]],[R[30]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[31],E,E,1,[[["self"]],[T]]],[11,R[32],E,E,1,N],[11,R[25],E,E,1,[[[U]],[R[9]]]],[11,R[29],E,E,1,[[["self"]],[T]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[27],E,E,1,[[["self"]],[R[9]]]],[11,R[28],E,E,1,[[["self"]],[R[30]]]],[11,"from",R[6],E,2,[[[T]],[T]]],[11,R[33],E,E,2,[[["self"]],[R[35]]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[31],E,E,2,[[["self"]],[T]]],[11,R[32],E,E,2,N],[11,R[25],E,E,2,[[[U]],[R[9]]]],[11,R[29],E,E,2,[[["self"]],[T]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[27],E,E,2,[[["self"]],[R[9]]]],[11,R[28],E,E,2,[[["self"]],[R[30]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[31],E,E,3,[[["self"]],[T]]],[11,R[32],E,E,3,N],[11,R[25],E,E,3,[[[U]],[R[9]]]],[11,R[29],E,E,3,[[["self"]],[T]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[27],E,E,3,[[["self"]],[R[9]]]],[11,R[28],E,E,3,[[["self"]],[R[30]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[25],E,E,5,[[[U]],[R[9]]]],[11,R[29],E,E,5,[[["self"]],[T]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[27],E,E,5,[[["self"]],[R[9]]]],[11,R[28],E,E,5,[[["self"]],[R[30]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[33],E,E,4,[[["self"]],[R[35]]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[31],E,E,4,[[["self"]],[T]]],[11,R[32],E,E,4,N],[11,R[25],E,E,4,[[[U]],[R[9]]]],[11,R[29],E,E,4,[[["self"]],[T]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[27],E,E,4,[[["self"]],[R[9]]]],[11,R[28],E,E,4,[[["self"]],[R[30]]]],[11,"from",R[34],E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[25],E,E,6,[[[U]],[R[9]]]],[11,R[29],E,E,6,[[["self"]],[T]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[27],E,E,6,[[["self"]],[R[9]]]],[11,R[28],E,E,6,[[["self"]],[R[30]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[31],E,E,25,[[["self"]],[T]]],[11,R[32],E,E,25,N],[11,R[25],E,E,25,[[[U]],[R[9]]]],[11,R[29],E,E,25,[[["self"]],[T]]],[11,R[26],E,E,25,[[["self"]],[T]]],[11,R[27],E,E,25,[[["self"]],[R[9]]]],[11,R[28],E,E,25,[[["self"]],[R[30]]]],[11,"from",R[10],E,7,[[[T]],[T]]],[11,R[33],E,E,7,[[["self"]],[R[35]]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[25],E,E,7,[[[U]],[R[9]]]],[11,R[29],E,E,7,[[["self"]],[T]]],[11,R[26],E,E,7,[[["self"]],[T]]],[11,R[27],E,E,7,[[["self"]],[R[9]]]],[11,R[28],E,E,7,[[["self"]],[R[30]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[33],E,E,8,[[["self"]],[R[35]]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[25],E,E,8,[[[U]],[R[9]]]],[11,R[29],E,E,8,[[["self"]],[T]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[27],E,E,8,[[["self"]],[R[9]]]],[11,R[28],E,E,8,[[["self"]],[R[30]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[33],E,E,9,[[["self"]],[R[35]]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[25],E,E,9,[[[U]],[R[9]]]],[11,R[29],E,E,9,[[["self"]],[T]]],[11,R[26],E,E,9,[[["self"]],[T]]],[11,R[27],E,E,9,[[["self"]],[R[9]]]],[11,R[28],E,E,9,[[["self"]],[R[30]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[33],E,E,10,[[["self"]],[R[35]]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[25],E,E,10,[[[U]],[R[9]]]],[11,R[29],E,E,10,[[["self"]],[T]]],[11,R[26],E,E,10,[[["self"]],[T]]],[11,R[27],E,E,10,[[["self"]],[R[9]]]],[11,R[28],E,E,10,[[["self"]],[R[30]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[33],E,E,11,[[["self"]],[R[35]]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[25],E,E,11,[[[U]],[R[9]]]],[11,R[29],E,E,11,[[["self"]],[T]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[27],E,E,11,[[["self"]],[R[9]]]],[11,R[28],E,E,11,[[["self"]],[R[30]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[33],E,E,12,[[["self"]],[R[35]]]],[11,"into",E,E,12,[[["self"]],[U]]],[11,R[25],E,E,12,[[[U]],[R[9]]]],[11,R[29],E,E,12,[[["self"]],[T]]],[11,R[26],E,E,12,[[["self"]],[T]]],[11,R[27],E,E,12,[[["self"]],[R[9]]]],[11,R[28],E,E,12,[[["self"]],[R[30]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[33],E,E,13,[[["self"]],[R[35]]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[25],E,E,13,[[[U]],[R[9]]]],[11,R[29],E,E,13,[[["self"]],[T]]],[11,R[26],E,E,13,[[["self"]],[T]]],[11,R[27],E,E,13,[[["self"]],[R[9]]]],[11,R[28],E,E,13,[[["self"]],[R[30]]]],[11,"from",R[36],E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[25],E,E,20,[[[U]],[R[9]]]],[11,R[29],E,E,20,[[["self"]],[T]]],[11,R[26],E,E,20,[[["self"]],[T]]],[11,R[27],E,E,20,[[["self"]],[R[9]]]],[11,R[28],E,E,20,[[["self"]],[R[30]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[31],E,E,26,[[["self"]],[T]]],[11,R[32],E,E,26,N],[11,R[25],E,E,26,[[[U]],[R[9]]]],[11,R[29],E,E,26,[[["self"]],[T]]],[11,R[26],E,E,26,[[["self"]],[T]]],[11,R[27],E,E,26,[[["self"]],[R[9]]]],[11,R[28],E,E,26,[[["self"]],[R[30]]]],[11,R[37],R[6],E,2,[[["self"]],["u16"]]],[11,R[37],R[34],E,25,[[["self"]],["u16"]]],[11,R[37],R[36],E,26,[[["self"]],["u16"]]],[11,R[37],R[0],E,1,[[["self"]],["u16"]]],[11,R[38],R[6],E,5,[[["self"],["u16"],[R[24],["u16"]]],[R[9],[R[40]]]]],[11,R[39],E,E,5,[[["self"],["u16"]],[R[9],[R[40]]]]],[11,R[41],E,E,5,[[["self"],["u16"],["u16"]],[R[9],[R[40]]]]],[11,"add",E,E,5,[[["self"],[R[40]],[R[40]]],[R[9],[R[40]]]]],[11,"sub",E,E,5,[[["self"],[R[40]],[R[40]]],[R[9],[R[40]]]]],[11,"cmul",E,E,5,[[["self"],[R[40]],["u16"]],[R[9],[R[40]]]]],[11,"proj",E,E,5,[[["self"],[R[40]],["u16"],[R[24],["vec"]]],[R[9],[R[40]]]]],[11,"mul",E,E,5,[[["self"],[R[40]],[R[40]]],[R[9],[R[40]]]]],[11,R[45],E,E,5,[[["self"],[R[40]]],[R[9]]]],[11,R[38],R[34],E,6,[[["self"],["u16"],[R[24],["u16"]]],[R[9],[R[42]]]]],[11,R[39],E,E,6,[[["self"],["u16"]],[R[9],[R[42]]]]],[11,R[41],E,E,6,[[["self"],["u16"],["u16"]],[R[9],[R[42]]]]],[11,"add",E,E,6,[[["self"],[R[42]],[R[42]]],[R[9],[R[42]]]]],[11,"sub",E,E,6,[[["self"],[R[42]],[R[42]]],[R[9],[R[42]]]]],[11,"cmul",E,E,6,[[["self"],[R[42]],["u16"]],[R[9],[R[42]]]]],[11,"mul",E,E,6,[[["self"],[R[42]],[R[42]]],[R[9],[R[42]]]]],[11,"proj",E,E,6,[[["self"],[R[42]],["u16"],[R[24],["vec"]]],[R[9],[R[42]]]]],[11,R[45],E,E,6,[[["self"],[R[42]]],[R[9]]]],[11,R[38],R[0],E,15,[[["self"],["u16"],[R[24],["u16"]]],[R[9],["wire",R[43]]]]],[11,R[39],E,E,15,[[["self"],["u16"]],[R[9],["wire",R[43]]]]],[11,R[41],E,E,15,[[["self"],["u16"],["u16"]],[R[9],["wire",R[43]]]]],[11,"add",E,E,15,[[["self"],["wire"],["wire"]],[R[9],["wire",R[43]]]]],[11,"sub",E,E,15,[[["self"],["wire"],["wire"]],[R[9],["wire",R[43]]]]],[11,"cmul",E,E,15,[[["self"],["wire"],["u16"]],[R[9],["wire",R[43]]]]],[11,"mul",E,E,15,[[["self"],["wire"],["wire"]],[R[9],["wire",R[43]]]]],[11,"proj",E,E,15,[[["self"],["wire"],["u16"],[R[24],["vec"]]],[R[9],["wire",R[43]]]]],[11,R[45],E,E,15,[[["self"],["wire"]],[R[9],[R[43]]]]],[11,R[38],E,E,19,[[["self"],["u16"],[R[24],["u16"]]],[R[9],["wire",R[44]]]]],[11,R[39],E,E,19,[[["self"],["u16"]],[R[9],["wire",R[44]]]]],[11,R[41],E,E,19,[[["self"],["u16"],["u16"]],[R[9],["wire",R[44]]]]],[11,"add",E,E,19,[[["self"],["wire"],["wire"]],[R[9],["wire",R[44]]]]],[11,"sub",E,E,19,[[["self"],["wire"],["wire"]],[R[9],["wire",R[44]]]]],[11,"cmul",E,E,19,[[["self"],["wire"],["u16"]],[R[9],["wire",R[44]]]]],[11,"mul",E,E,19,[[["self"],["wire"],["wire"]],[R[9],["wire",R[44]]]]],[11,"proj",E,E,19,[[["self"],["wire"],["u16"],[R[24],["vec"]]],[R[9],["wire",R[44]]]]],[11,R[45],E,E,19,[[["self"],["wire"]],[R[9],[R[44]]]]],[11,R[38],R[36],E,20,[[["self"],["u16"],[R[24],["u16"]]],[R[9],[R[47],R[46]]]]],[11,R[39],E,E,20,[[["self"],["u16"]],[R[9],[R[47],R[46]]]]],[11,R[41],E,E,20,[[["self"],["u16"],["u16"]],[R[9],[R[47],R[46]]]]],[11,"add",E,E,20,[[["self"],[R[47]],[R[47]]],[R[9],[R[47],R[46]]]]],[11,"sub",E,E,20,[[["self"],[R[47]],[R[47]]],[R[9],[R[47],R[46]]]]],[11,"cmul",E,E,20,[[["self"],[R[47]],["u16"]],[R[9],[R[47],R[46]]]]],[11,"mul",E,E,20,[[["self"],[R[47]],[R[47]]],[R[9],[R[47],R[46]]]]],[11,"proj",E,E,20,[[["self"],[R[47]],["u16"],[R[24],["vec"]]],[R[9],[R[47],R[46]]]]],[11,R[45],E,E,20,[[["self"],[R[47]]],[R[9],[R[46]]]]],[11,"eq",R[6],E,2,[[["self"],[R[40]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[40]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[3]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[3]]],["bool"]]],[11,"eq",E,E,4,[[["self"],["gate"]],["bool"]]],[11,"ne",E,E,4,[[["self"],["gate"]],["bool"]]],[11,"eq",R[0],E,16,[[["self"],[R[48]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[48]]],["bool"]]],[11,"eq",E,E,17,[[["self"],["encoder"]],["bool"]]],[11,"ne",E,E,17,[[["self"],["encoder"]],["bool"]]],[11,"eq",E,E,18,[[["self"],["decoder"]],["bool"]]],[11,"ne",E,E,18,[[["self"],["decoder"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[51]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[51]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["wire"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["wire"]],["bool"]]],[11,"default",E,E,1,[[],["self"]]],[11,"from",R[10],E,8,[[[R[49]]],["dummyerror"]]],[11,"from",E,E,9,[[[R[49]]],[R[43]]]],[11,"from",E,E,10,[[[R[49]]],[R[44]]]],[11,"from",E,E,11,[[[R[49]]],["circuitbuildererror"]]],[11,"from",E,E,12,[[[R[49]]],[R[46]]]],[11,"from",E,E,13,[[["error"]],[R[50]]]],[11,"from",E,E,13,[[["error"]],[R[50]]]],[11,"from",E,E,13,[[["parseinterror"]],[R[50]]]],[11,"clone",R[6],E,2,[[["self"]],[R[40]]]],[11,"clone",E,E,3,[[["self"]],[R[3]]]],[11,"clone",E,E,4,[[["self"]],["gate"]]],[11,"clone",R[34],E,25,[[["self"]],[R[42]]]],[11,"clone",R[0],E,14,[[["self"]],[R[23]]]],[11,"clone",E,E,0,[[["self"]],[R[51]]]],[11,"clone",R[36],E,26,[[["self"]],[R[47]]]],[11,"clone",R[0],E,1,[[["self"]],["wire"]]],[11,"fmt",R[6],E,2,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[10],E,7,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,8,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,9,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,10,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,11,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,12,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,13,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[0],E,0,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[6],E,2,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,3,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,4,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[34],E,25,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[10],E,7,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,8,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,9,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,10,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,11,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,12,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,13,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[0],E,16,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,17,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,18,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",E,E,0,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[36],E,26,[[["self"],[R[52]]],[R[9]]]],[11,"fmt",R[0],E,1,[[["self"],[R[52]]],[R[9]]]],[11,R[53],R[6],E,2,[[["self"],["__s"]],[R[9]]]],[11,R[53],E,E,3,[[["self"],["__s"]],[R[9]]]],[11,R[53],E,E,4,[[["self"],["__s"]],[R[9]]]],[11,R[53],R[0],E,16,[[["self"],["__s"]],[R[9]]]],[11,R[53],E,E,17,[[["self"],["__s"]],[R[9]]]],[11,R[53],E,E,18,[[["self"],["__s"]],[R[9]]]],[11,R[53],E,E,0,[[["self"],["__s"]],[R[9]]]],[11,R[53],E,E,1,[[["self"],["__s"]],[R[9]]]],[11,R[54],R[6],E,2,[[["__d"]],[R[9]]]],[11,R[54],E,E,3,[[["__d"]],[R[9]]]],[11,R[54],E,E,4,[[["__d"]],[R[9]]]],[11,R[54],R[0],E,16,[[["__d"]],[R[9]]]],[11,R[54],E,E,17,[[["__d"]],[R[9]]]],[11,R[54],E,E,18,[[["__d"]],[R[9]]]],[11,R[54],E,E,0,[[["__d"]],[R[9]]]],[11,R[54],E,E,1,[[["__d"]],[R[9]]]],[11,R[55],E,R[56],22,N],[11,R[57],E,R[58],22,N],[11,R[59],E,R[60],22,[[["self"],["u128"],[R[24],["u128"]]],[R[9],[R[23]]]]],[11,R[61],E,R[62],22,[[["self"],["u128"]],[R[9],[R[23]]]]],[11,R[63],E,R[64],22,[[["self"],["usize"],[R[24],["u128"]]],[R[9],[R[23]]]]],[11,R[65],E,R[66],22,[[["self"],["usize"]],[R[9],[R[23]]]]],[11,R[67],E,R[68],22,N],[11,R[69],E,R[70],22,[[["self"],["u128"],["u128"]],[R[9],[R[23]]]]],[11,R[71],E,R[72],22,[[["self"],["u128"],["usize"]],[R[9],[R[23]]]]],[11,R[73],E,R[74],22,N],[11,R[75],E,R[76],22,N],[11,R[77],E,R[78],22,[[["self"],["u128"],["usize"],[R[24],["vec"]]],[R[9],["vec"]]]],[11,R[79],E,R[80],22,[[["self"],["u128"],["usize"]],[R[9],["vec"]]]],[11,R[81],E,R[82],22,[[["self"],[R[23]]],[R[9]]]],[11,R[83],E,R[84],22,N],[11,R[85],E,R[86],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[87],E,R[88],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[89],E,R[90],22,[[["self"],[R[23]],["u128"]],[R[9],[R[23]]]]],[11,R[91],E,R[92],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[93],E,R[94],22,[[["self"],[R[23]],["u16"]],[R[9],[R[23]]]]],[11,R[95],E,R[96],22,[[["self"],[R[23]],["u16"]],[R[9],[R[23]]]]],[11,R[97],E,R[98],22,[[["self"],[R[23]],[R[23]]],[R[9]]]],[11,R[99],E,R[100],22,N],[11,R[101],E,R[102],22,N],[11,R[103],E,R[104],22,N],[11,"relu",E,R[105],22,[[["self"],[R[23]],["str"],[R[24]]],[R[9],[R[23]]]]],[11,"sign",E,R[106],22,[[["self"],[R[23]],["str"]],[R[9]]]],[11,"sgn",E,R[107],22,[[["self"],[R[23]],["str"],[R[24]]],[R[9],[R[23]]]]],[11,"lt",E,R[108],22,[[["self"],[R[23]],[R[23]],["str"]],[R[9]]]],[11,"geq",E,R[109],22,[[["self"],[R[23]],[R[23]],["str"]],[R[9]]]],[11,"max",E,R[110],22,N],[11,R[111],E,R[112],22,[[["self"],[R[23]],[R[23]]],[R[9]]]],[11,R[113],E,R[114],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[115],E,R[116],22,[[["self"],[R[23]],[R[23]]],[R[9],[R[23]]]]],[11,R[117],E,R[118],22,[[["self"],[R[23]]],[R[9],[R[23]]]]],[11,R[119],E,R[120],22,[[["self"],[R[23]],[R[23]]],[R[9]]]],[11,R[121],E,R[122],22,N],[11,R[123],E,R[124],22,N],[11,"shift",E,R[125],22,[[["self"],[R[23]],["usize"]],[R[9],[R[23]]]]],[11,R[126],E,R[127],22,[[["self"],[R[23]],["u128"],["usize"]],[R[9],[R[23]]]]],[11,"abs",E,R[128],22,[[["self"],[R[23]]],[R[9],[R[23]]]]],[11,R[129],E,R[130],24,N],[11,R[131],E,R[132],24,N],[11,"add_many",E,R[133],24,N],[11,"xor",E,R[134],24,N],[11,"negate",E,R[135],24,N],[11,"and",E,R[136],24,N],[11,"or",E,R[137],24,N],[11,"and_many",E,R[138],24,N],[11,"or_many",E,R[139],24,N],[11,R[140],E,R[141],24,N],[11,"adder",E,R[142],24,N],[11,"mux",E,R[143],24,N],[11,R[144],E,R[145],24,N],[11,"outputs",E,R[146],24,N]],"p":[[4,"Message"],[4,"Wire"],[3,R[147]],[3,"Circuit"],[4,"Gate"],[3,R[148]],[3,"Dummy"],[4,R[12]],[4,R[149]],[4,R[150]],[4,R[151]],[4,R[152]],[4,R[153]],[4,R[154]],[3,"Bundle"],[3,R[155]],[3,R[156]],[3,"Encoder"],[3,"Decoder"],[3,"Garbler"],[3,"Informer"],[8,"RngExt"],[8,R[157]],[8,R[158]],[8,"Fancy"],[3,"DummyVal"],[3,R[159]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);