var N=null,E="",T="t",U="u",searchIndex={};
var R=["fancy_garbling","fancy_garbling::Wire","circuit","option","result","dummyerror","informererror","usize","circuitref","Get a vec of CircuitRefs for garbler inputs.","crtbundle","binarybundle","fancy_garbling::error","fancy_garbling::error::FancyError","FancyError","NotEnoughGarblerInputs","Not enough garbler inputs provided.","NotEnoughEvaluatorInputs","Not enough evaluator inputs provided.","A fancy error has occurred.","CommunicationError","EncodingError","Encoding error.","extract","evaluatorerror","garblererror","informer","print_info","num_garbler_inputs","num_evaluator_inputs","fancy_garbling::circuit","Generate a CRT modulus that support at least n-bit…","Generate the factors of a CRT modulus that support at…","bundle","Returns 1 if `x < y`.","Returns 1 if `x >= y`.","Compute the maximum bundle in `xs`.","to_owned","clone_into","try_from","borrow_mut","try_into","into_bits","from_cast","from_bits","type_id","borrow","typeid","fancy_garbling::dummy","to_string","string","fancy_garbling::informer","fancy_garbling::static","dummyval","encode_many","receive_many","reveal","modulus","constant","output","informerval","fancyerror","circuitparsererror","formatter","bin_constant_bundle","Create a constant bundle using base 2 inputs.","bin_output","Output a binary bundle and interpret the result as a `u128`.","bin_outputs","Output a slice of binary bundles and interpret the results…","Xor the bits of two bundles together pairwise.","And the bits of two bundles together pairwise.","Or the bits of two bundles together pairwise.","bin_addition","Binary addition. Returns the result and the carry.","bin_addition_no_carry","Binary addition. Avoids creating extra gates for the final…","bin_multiplication_lower_half","Binary multiplication.","bin_twos_complement","Compute the twos complement of the input bundle (which…","bin_subtraction","Subtract two binary bundles. Returns the result and…","bin_multiplex_constant_bits","If `x=0` return `c1` as a bundle of constant bits, else…","bin_cmul","Write the constant in binary and that gives you the shift…","Compute the absolute value of a binary bundle.","bin_demux","Demux a binary bundle into a unary vector.","constant_bundle","Creates a bundle of constant wires using moduli `ps`.","output_bundle","Output the wires that make up a bundle.","output_bundles","Output a slice of bundles.","add_bundles","Add two wire bundles pairwise, zipping addition.","sub_bundles","Subtract two wire bundles, residue by residue.","mul_bundles","Multiply each wire in `x` with each wire in `y`, pairwise.","mixed_radix_addition","Mixed radix addition.","mixed_radix_addition_msb_only","Mixed radix addition only returning the MSB.","multiplex","If b=0 then return x, else return y.","If b=0 then return 0, else return x.","Shift residues, replacing them with zeros in the modulus…","eq_bundles","Compute `x == y`. Returns a wire encoding the result mod 2.","crt_constant_bundle","Creates a bundle of constant wires for the CRT…","crt_output","Output a CRT bundle and interpret it mod Q.","crt_outputs","Output a slice of CRT bundles and interpret the outputs…","Add two CRT bundles.","Subtract two CRT bundles.","Multiplies each wire in `x` by the corresponding residue…","Multiply `x` with `y`.","Exponentiate `x` by the constant `c`.","Compute the remainder with respect to modulus `p`.","crt_fractional_mixed_radix","Helper function for advanced gadgets, returns the MSB of…","Compute `max(x,0)`.","Return 0 if `x` is positive and 1 if `x` is negative.","Return `if x >= 0 then 1 else -1`, where `-1` is…","Encode a single value.","Receive a single value.","encode_bundle","Encode a bundle.","receive_bundle","Receive a bundle.","encode_bundles","Encode many input bundles.","receive_many_bundles","Receive many input bundles.","crt_encode","Encode a CRT input bundle.","crt_receive","Receive an CRT input bundle.","crt_encode_many","Encode many CRT input bundles.","crt_receive_many","Receive many CRT input bundles.","bin_encode","Encode a binary input bundle.","bin_receive","Receive an binary input bundle.","bin_encode_many","Encode many binary input bundles.","bin_receive_many","Receive many binary input bundles.","reveal_many","Reveal a slice of items to all parties.","reveal_bundle","Reveal a bundle to all parties.","reveal_many_bundles","Reveal many bundles to all parties.","crt_reveal","Reveal a CRT bundle to all parties.","crt_reveal_many","Reveal many CRT bundles to all parties.","bin_reveal","Reveal a binary bundle to all parties.","bin_reveal_many","Reveal many binary bundles to all parties.","Sum up a slice of wires.","Xor is just addition, with the requirement that `x` and…","Negate by xoring `x` with `1`.","And is just multiplication, with the requirement that `x`…","Or uses Demorgan's Rule implemented with multiplication…","Returns 1 if all wires equal 1.","Returns 1 if any wire equals 1.","mod_change","Change the modulus of `x` to `to_modulus` using a…","Binary adder. Returns the result and the carry.","If `b = 0` returns `x` else `y`.","mux_constant_bits","If `x = 0` returns the constant `b1` else return `b2`.…","Output a slice of wires.","CircuitBuilder","DummyError","EvaluatorError","GarblerError","CircuitBuilderError","InformerError","CircuitParserError","BinaryBundle","CrtBundle","Evaluator","GarbledCircuit","GarbledWriter","BinaryGadgets","BundleGadgets","CrtGadgets","FancyInput","FancyReveal","HasModulus","CircuitRef","InformerVal"];

searchIndex[R[0]]={"doc":"`fancy-garbling` provides boolean and arithmetic garbling…","i":[[3,R[190],R[0],"Bundle which is explicitly binary representation.",N,N],[3,"Bundle",E,"A collection of wires, useful for the garbled gadgets…",N,N],[3,R[191],E,"Bundle which is explicitly CRT-representation.",N,N],[3,R[192],E,"Streaming evaluator using a callback to receive…",N,N],[3,"Garbler",E,"Streams garbled circuit ciphertexts through a callback.…",N,N],[4,"Wire",E,"The core wire-label type.",N,N],[13,"Mod2",E,"Representation of a `mod-2` wire.",0,N],[12,"val",R[1],"A 128-bit value.",0,N],[13,"Mod3",R[0],"Representation of a `mod-3` wire.",0,N],[12,"lsb",R[1],"The least-significant bits of each `mod-3` element.",0,N],[12,"msb",E,"The most-significant bits of each `mod-3` element.",0,N],[13,"ModN",R[0],"Representation of a `mod-q` wire.",0,N],[12,"q",R[1],"The modulus of this wire-label.",0,N],[12,"ds",E,"A list of `mod-q` digits.",0,N],[0,R[2],R[0],"DSL for creating circuits compatible with fancy-garbling…",N,N],[3,R[201],R[30],"The index and modulus of a gate in a circuit.",N,N],[3,"Circuit",E,"Static representation of the type of computation supported…",N,N],[3,R[183],E,"CircuitBuilder is used to build circuits.",N,N],[11,"new",E,"Make a new `Circuit` object.",1,[[[R[3],[R[7]]],[R[7]]],[R[2]]]],[11,"eval",E,"Evaluate the circuit using fancy object `f`.",1,[[["f"],["self"]],[[R[3],["vec"]],[R[4],[R[3]]]]]],[11,"eval_plain",E,"Evaluate the circuit in plaintext.",1,[[["self"]],[[R[4],["vec",R[5]]],["vec",["u16"]],[R[5]]]]],[11,R[27],E,"Print circuit info.",1,[[["self"]],[[R[6]],[R[4],[R[6]]]]]],[11,R[28],E,"Return the number of garbler inputs.",1,[[["self"]],[R[7]]]],[11,R[29],E,"Return the number of evaluator inputs.",1,[[["self"]],[R[7]]]],[11,"noutputs",E,"Return the number of outputs.",1,[[["self"]],[R[7]]]],[11,R[57],E,"Return the modulus of the gate indexed by `i`.",1,[[["self"],[R[7]]],["u16"]]],[11,"garbler_input_mod",E,"Return the modulus of the garbler input indexed by `i`.",1,[[["self"],[R[7]]],["u16"]]],[11,"evaluator_input_mod",E,"Return the modulus of the evaluator input indexed by `i`.",1,[[["self"],[R[7]]],["u16"]]],[11,"new",E,"Make a new `CircuitBuilder`.",2,[[],["self"]]],[11,"finish",E,"Finish circuit building, outputting the resulting circuit.",2,[[],[R[2]]]],[11,"garbler_input",E,"Get CircuitRef for a garbler input wire.",2,[[["self"],["u16"]],[R[8]]]],[11,"evaluator_input",E,"Get CircuitRef for an evaluator input wire.",2,[[["self"],["u16"]],[R[8]]]],[11,"garbler_inputs",E,R[9],2,[[["self"]],[[R[8]],["vec",[R[8]]]]]],[11,"evaluator_inputs",E,R[9],2,[[["self"]],[[R[8]],["vec",[R[8]]]]]],[11,"crt_garbler_input",E,"Get a CrtBundle for the garbler using composite modulus Q",2,[[["self"],["u128"]],[[R[8]],[R[10],[R[8]]]]]],[11,"crt_evaluator_input",E,"Get a CrtBundle for the evaluator using composite modulus Q",2,[[["self"],["u128"]],[[R[8]],[R[10],[R[8]]]]]],[11,"bin_garbler_input",E,"Get a BinaryBundle for the garbler with n bits.",2,[[["self"],[R[7]]],[[R[8]],[R[11],[R[8]]]]]],[11,"bin_evaluator_input",E,"Get a BinaryBundle for the evaluator with n bits.",2,[[["self"],[R[7]]],[[R[8]],[R[11],[R[8]]]]]],[0,"dummy",R[0],"Dummy implementation of `Fancy`.",N,N],[3,"Dummy",R[48],"Simple struct that performs the fancy computation over…",N,N],[3,"DummyVal",E,"Wrapper around `u16`.",N,N],[11,"new",E,"Create a new DummyVal.",3,[[["u16"]],["self"]]],[11,"val",E,"Extract the value.",3,[[["self"]],["u16"]]],[11,"new",E,"Create a new Dummy.",4,[[],["dummy"]]],[0,"error",R[0],"Errors that may be output by this library.",N,N],[4,R[14],R[12],"Errors that may occur when using the `Fancy` trait. These…",N,N],[13,"UnequalModuli",E,"Unequal moduli.",5,N],[13,"InvalidArg",E,"Invalid argument.",5,N],[13,"InvalidArgNum",E,"Invalid number of arguments.",5,N],[12,"got",R[13],"Received number of arguments.",5,N],[12,"needed",E,"Expected number of arguments.",5,N],[13,"InvalidArgMod",R[12],"Invalid argument modulus.",5,N],[12,"got",R[13],"Received modulus.",5,N],[12,"needed",E,"Expected modulus.",5,N],[13,"ArgNotBinary",R[12],"Expected binary argument.",5,N],[13,"NoTruthTable",E,"Truth table expected but none given.",5,N],[13,"InvalidTruthTable",E,"Projection truth table is invalid.",5,N],[13,"UninitializedValue",E,"Uninitialized value encountered.",5,N],[4,R[184],E,"Errors from the dummy fancy object.",N,N],[13,R[15],E,R[16],6,N],[13,R[17],E,R[18],6,N],[13,R[21],E,R[22],6,N],[13,R[14],E,R[19],6,N],[4,R[185],E,"Errors from the evaluator.",N,N],[13,R[15],E,R[16],7,N],[13,R[17],E,R[18],7,N],[13,"DecodingFailed",E,"Decoding failed.",7,N],[13,R[20],E,"A communication error has occurred.",7,N],[13,R[14],E,R[19],7,N],[4,R[186],E,"Errors from the garbler.",N,N],[13,R[20],E,"An error occurred while processing a message.",8,N],[13,"AsymmetricHalfGateModuliMax8",E,"Asymmetric moduli error.",8,N],[13,"TruthTableRequired",E,"A truth table was missing.",8,N],[13,"DeltaRequired",E,"Delta required for wire reuse.",8,N],[13,R[21],E,R[22],8,N],[13,R[14],E,R[19],8,N],[4,R[187],E,"Errors emitted when building a circuit.",N,N],[13,"ReuseUndefined",E,"Reuse not supported.",9,N],[13,R[14],E,R[19],9,N],[4,R[188],E,"Errors emitted when running the informer.",N,N],[13,R[14],E,R[19],10,N],[4,R[189],E,"Errors emitted by the circuit parser.",N,N],[13,"IoError",E,"An I/O error occurred.",11,N],[13,"RegexError",E,"A regular expression parsing error occurred.",11,N],[13,"ParseIntError",E,"An error occurred parsing an integer.",11,N],[13,"ParseLineError",E,"An error occurred parsing a line.",11,N],[13,"ParseGateError",E,"An error occurred parsing a gate type.",11,N],[11,"new",R[0],"Create a new binary bundle from a vector of wires.",12,[[["vec"]],[R[11]]]],[11,R[23],E,"Extract the underlying bundle from this binary bundle.",12,[[],[R[33]]]],[11,"new",E,"Create a new bundle from some wires.",13,[[["vec"]],[R[33]]]],[11,"moduli",E,"Return the moduli of all the wires in the bundle.",13,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"wires",E,"Extract the wires from this bundle.",13,[[["self"]]]],[11,"size",E,"Get the number of wires in this bundle.",13,[[["self"]],[R[7]]]],[11,"is_binary",E,"Whether this bundle only contains residues in mod 2.",13,[[["self"]],["bool"]]],[11,"with_moduli",E,"Returns a new bundle only containing wires with matching…",13,[[["self"]],[R[33]]]],[11,"pad",E,"Pad the Bundle with val, n times.",13,[[["self"],[R[7]],["w"]]]],[11,R[23],E,"Extract a wire from the Bundle, removing it and returning…",13,[[["self"],[R[7]]],["w"]]],[11,"iter",E,"Access the underlying iterator",13,[[["self"]],["iter"]]],[11,"new",E,"Create a new CRT bundle from a vector of wires.",14,[[["vec"]],[R[10]]]],[11,R[23],E,"Extract the underlying bundle from this CRT bundle.",14,[[],[R[33]]]],[11,"composite_modulus",E,"Return the product of all the wires' moduli.",14,[[["self"]],["u128"]]],[11,"new",E,"Create a new `Evaluator`.",15,[[["c"]],["self"]]],[11,"read_wire",E,"Read a Wire from the reader.",15,[[["self"],["u16"]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,"new",E,"Create a new garbler.",16,[[["c"],["rng"]],["self"]]],[11,"delta",E,"Create a delta if it has not been created yet for this…",16,[[["self"],["u16"]],["wire"]]],[11,"get_deltas",E,"Get the deltas, consuming the Garbler.",16,[[],[["u16"],["hashmap",["u16","wire"]],["wire"]]]],[11,"send_wire",E,"Send a wire using the Sender.",16,[[["self"],["wire"]],[[R[25]],[R[4],[R[25]]]]]],[11,"encode_wire",E,"Encode a wire, producing the zero wire as well as the…",16,[[["self"],["u16"]]]],[11,"encode_many_wires",E,"Encode many wires, producing zero wires as well as encoded…",16,[[["self"]],[[R[4],[R[25]]],[R[25]]]]],[11,"crt_encode_wire",E,"Encode a CrtBundle, producing the zero wires as well as…",16,[[["self"],["u128"]],[[R[4],[R[25]]],[R[25]]]]],[11,"bin_encode_wire",E,"Encode a BinaryBundle, producing the zero wires as well as…",16,[[["self"],["u128"],[R[7]]],[[R[25]],[R[4],[R[25]]]]]],[0,R[26],E,"`Informer` runs a fancy computation and learns information…",N,N],[3,"Informer",R[51],"Implements `Fancy`. Used to learn information about a…",N,N],[3,R[202],E,"The item type used by `Informer`. It simply contains the…",N,N],[11,"new",E,"Make a new `Informer`.",17,[[],[R[26]]]],[11,R[27],E,"Print information about the fancy computation.",17,[[["self"]]]],[11,R[28],E,"Number of garbler inputs in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"garbler_input_moduli",E,"Moduli of garbler inputs in the fancy computation.",17,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,R[29],E,"Number of evaluator inputs in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"evaluator_input_moduli",E,"Moduli of evaluator inputs in the fancy computation.",17,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"num_consts",E,"Number of constants in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_outputs",E,"Number of outputs in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_output_ciphertexts",E,"Number of output ciphertexts.",17,[[["self"]],[R[7]]]],[11,"num_adds",E,"Number of additions in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_subs",E,"Number of subtractions in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_cmuls",E,"Number of scalar multiplications in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_muls",E,"Number of multiplications in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_projs",E,"Number of projections in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"num_ciphertexts",E,"Number of ciphertexts in the fancy computation.",17,[[["self"]],[R[7]]]],[11,"parse",R[30],"Generates a new `Circuit` from file `filename`. The file…",1,[[["str"]],[[R[4],["error"]],["error"]]]],[0,"static",R[0],"Provides objects and functions for statically garbling and…",N,N],[3,R[193],R[52],"Static evaluator for a circuit, created by the `garble`…",N,N],[3,"Encoder",E,"Encode inputs statically.",N,N],[3,R[194],E,"Implementation of the `Write` trait for use by `Garbler`.",N,N],[5,"garble",E,"Garble a circuit without streaming.",N,[[[R[2]]],[[R[4],[R[25]]],[R[25]]]]],[11,"new",E,"Create a new object from a vector of garbled gates and…",18,[[["block"],["vec",["block"]]],["self"]]],[11,"size",E,"The number of garbled rows and constant wires in the…",18,[[["self"]],[R[7]]]],[11,"eval",E,"Evaluate the garbled circuit.",18,[[[R[2]],["self"]],[["vec",["u16"]],[R[24]],[R[4],["vec",R[24]]]]]],[11,"new",E,"Make a new `Encoder` from lists of garbler and evaluator…",19,[[["u16"],["hashmap",["u16","wire"]],["wire"],["vec",["wire"]]],["self"]]],[11,R[28],E,"Output the number of garbler inputs.",19,[[["self"]],[R[7]]]],[11,R[29],E,"Output the number of evaluator inputs.",19,[[["self"]],[R[7]]]],[11,"encode_garbler_input",E,"Encode a single garbler input into its associated…",19,[[["u16"],["self"],[R[7]]],["wire"]]],[11,"encode_evaluator_input",E,"Encode a single evaluator input into its associated…",19,[[["u16"],["self"],[R[7]]],["wire"]]],[11,"encode_garbler_inputs",E,"Encode a slice of garbler inputs into their associated…",19,[[["self"]],[["wire"],["vec",["wire"]]]]],[11,"encode_evaluator_inputs",E,"Encode a slice of evaluator inputs into their associated…",19,[[["self"]],[["wire"],["vec",["wire"]]]]],[11,"new",E,"Make a new `GarbledWriter`.",20,[[[R[3],[R[7]]],[R[7]]],["self"]]],[0,"util",R[0],"Tools useful for interacting with `fancy-garbling`.",N,N],[5,"tweak","fancy_garbling::util","Tweak function for a single item.",N,[[[R[7]]],["block"]]],[5,"tweak2",E,"Tweak function for two items.",N,[[["u64"]],["block"]]],[5,"output_tweak",E,"Compute the output tweak for a garbled gate where i is the…",N,[[["u16"],[R[7]]],["block"]]],[5,"base_q_add_eq",E,"Add a base `q` slice `ys` into `xs`.",N,[[["u16"]]]],[5,"digits_per_u128",E,"Determine how many `mod q` digits fit into a `u128`…",N,[[["u16"]],[R[7]]]],[5,"as_base_q_u128",E,"Convert `x` into base `q`.",N,[[["u128"],["u16"]],[["vec",["u16"]],["u16"]]]],[5,"as_mixed_radix",E,"Convert `x` into mixed radix form using the provided…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"from_base_q",E,"Convert little-endian base `q` digits into `u128`.",N,[[["u16"]],["u128"]]],[5,"from_mixed_radix",E,"Convert little-endian mixed radix digits into u128.",N,[[],["u128"]]],[5,"u128_to_bits",E,"Get the bits of a u128 encoded in 128 u16s, which is…",N,[[["u128"],[R[7]]],[["vec",["u16"]],["u16"]]]],[5,"u128_from_bits",E,"Convert into a u128 from the \"bits\" as u16. Assumes each…",N,[[],["u128"]]],[5,"factor",E,"Factor using the primes in the global `PRIMES` array.…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"crt",E,"Compute the CRT representation of x with respect to the…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"crt_factor",E,"Compute the CRT representation of `x` with respect to the…",N,[[["u128"]],[["vec",["u16"]],["u16"]]]],[5,"crt_inv",E,"Compute the value x given a list of CRT primes and residues.",N,[[],["u128"]]],[5,"crt_inv_factor",E,"Compute the value `x` given a composite CRT modulus…",N,[[["u128"]],["u128"]]],[5,"inv",E,"Generic algorithm to invert inp_a mod inp_b. As ref so as…",N,[[["i128"]],["i128"]]],[5,"modulus_with_nprimes",E,"Primes skipping the modulus 2, which allows certain…",N,[[[R[7]]],["u128"]]],[5,"modulus_with_width",E,R[31],N,[[["u32"]],["u128"]]],[5,"primes_with_width",E,R[32],N,[[["u32"]],[["vec",["u16"]],["u16"]]]],[5,"base_modulus_with_width",E,R[31],N,[[["u32"]],["u128"]]],[5,"base_primes_with_width",E,R[32],N,[[["u32"]],[["vec",["u16"]],["u16"]]]],[5,"product",E,R[31],N,[[],["u128"]]],[5,"is_power_of_2",E,"Raise a u16 to a power mod some value. Returns true if x…",N,[[["u16"]],["bool"]]],[17,"NPRIMES",E,"Number of primes supported by our library.",N,N],[17,"PRIMES",E,"Primes used in fancy garbling.",N,N],[8,"RngExt",E,"Extra Rng functionality, useful for `fancy-garbling`.",N,N],[11,"gen_bool",E,"Randomly generate a `bool`.",21,[[["self"]],["bool"]]],[11,"gen_u16",E,"Randomly generate a `u16`.",21,[[["self"]],["u16"]]],[11,"gen_u32",E,"Randomly generate a `u32`.",21,[[["self"]],["u32"]]],[11,"gen_u64",E,"Randomly generate a `u64`.",21,[[["self"]],["u64"]]],[11,"gen_usize",E,"Randomly generate a `usize`.",21,[[["self"]],[R[7]]]],[11,"gen_u128",E,"Randomly generate a `u128`.",21,[[["self"]],["u128"]]],[11,"gen_block",E,"Randomly generate a `Block`.",21,[[["self"]],["block"]]],[11,"gen_usable_block",E,"Randomly generate a valid `Block`.",21,[[["self"],["u16"]],["block"]]],[11,"gen_prime",E,"Randomly generate a prime (among the set of supported…",21,[[["self"]],["u16"]]],[11,"gen_modulus",E,"Randomly generate a (supported) modulus.",21,[[["self"]],["u16"]]],[11,"gen_usable_composite_modulus",E,"Randomly generate a valid composite modulus.",21,[[["self"]],["u128"]]],[11,"gen_usable_factors",E,"Randomly generate a vector of valid factor",21,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"digits",R[0],"Get the digits of the wire.",0,[[["self"]],[["vec",["u16"]],["u16"]]]],[11,"from_block",E,"Unpack the wire represented by a `Block` with modulus `q`.…",0,[[["u16"],["block"]],["self"]]],[11,"as_block",E,"Pack the wire into a `Block`.",0,[[["self"]],["block"]]],[11,"zero",E,"The zero wire with modulus `q`.",0,[[["u16"]],["self"]]],[11,"rand_delta",E,"Get a random wire label mod `q`, with the first digit set…",0,[[["r"],["u16"]],["self"]]],[11,"color",E,"Get the color digit of the wire.",0,[[["self"]],["u16"]]],[11,"plus",E,"Add two wires digit-wise, returning a new wire.",0,[[["self"]],["self"]]],[11,"plus_eq",E,"Add another wire digit-wise into this one. Assumes that…",0,[[["wire"],["self"]],["wire"]]],[11,"plus_mov",E,"Add another wire into this one, consuming it for chained…",0,[[["wire"]],["wire"]]],[11,"cmul",E,"Multiply each digit by a constant `c mod q`, returning a…",0,[[["u16"],["self"]],["self"]]],[11,"cmul_eq",E,"Multiply each digit by a constant `c mod q`.",0,[[["self"],["u16"]],["wire"]]],[11,"cmul_mov",E,"Multiply each digit by a constant `c mod q`, consuming it…",0,[[["u16"]],["wire"]]],[11,"negate",E,"Negate all the digits `mod q`, returning a new wire.",0,[[["self"]],["self"]]],[11,"negate_eq",E,"Negate all the digits mod q.",0,[[["self"]],["wire"]]],[11,"negate_mov",E,"Negate all the digits `mod q`, consuming it for chained…",0,[[],["wire"]]],[11,"minus",E,"Subtract two wires, returning the result.",0,[[["wire"],["self"]],["wire"]]],[11,"minus_eq",E,"Subtract a wire from this one.",0,[[["wire"],["self"]],["wire"]]],[11,"minus_mov",E,"Subtract a wire from this one, consuming it for chained…",0,[[["wire"]],["wire"]]],[11,"rand",E,"Get a random wire `mod q`.",0,[[["r"],["u16"]],["wire"]]],[11,"hash",E,"Compute the hash of this wire.",0,[[["block"],["self"]],["block"]]],[11,"hashback",E,"Compute the hash of this wire, converting the result back…",0,[[["u16"],["block"],["self"]],["wire"]]],[8,R[195],E,"Extension trait for `Fancy` providing gadgets that operate…",N,N],[11,R[64],E,R[65],22,[[["self"],["u128"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[66],E,R[67],22,[[["self"],[R[11]]],[[R[3],["u128"]],[R[4],[R[3]]]]]],[11,R[68],E,R[69],22,[[["self"]],[[R[3],["vec"]],[R[4],[R[3]]]]]],[11,"bin_xor",E,R[70],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_and",E,R[71],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_or",E,R[72],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[73],E,R[74],22,[[["self"],[R[11]]],[R[4]]]],[11,R[75],E,R[76],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[77],E,R[78],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[79],E,R[80],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[81],E,R[82],22,[[["self"],[R[11]]],[R[4]]]],[11,R[83],E,R[84],22,[[["self"],["u128"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[85],E,R[86],22,[[["self"],["u128"],[R[11]],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_abs",E,R[87],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_lt",E,R[34],22,[[["self"],[R[11]]],[R[4]]]],[11,"bin_geq",E,R[35],22,[[["self"],[R[11]]],[R[4]]]],[11,"bin_max",E,R[36],22,[[["self"]],[[R[4],[R[11]]],[R[11]]]]],[11,R[88],E,R[89],22,[[["self"],[R[11]]],[[R[4],["vec"]],["vec"]]]],[8,R[196],E,"Extension trait for Fancy which provides Bundle…",N,N],[11,R[90],E,R[91],23,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[92],E,R[93],23,[[["self"],[R[33]]],[[R[4],[R[3]]],[R[3],["vec"]]]]],[11,R[94],E,R[95],23,[[["self"]],[[R[4],[R[3]]],[R[3],["vec"]]]]],[11,R[96],E,R[97],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[98],E,R[99],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[100],E,R[101],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[102],E,R[103],23,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[104],E,R[105],23,[[["self"]],[R[4]]]],[11,R[106],E,R[107],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,"mask",E,R[108],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,"shift",E,R[109],23,[[["self"],[R[33]],[R[7]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[110],E,R[111],23,[[["self"],[R[33]]],[R[4]]]],[8,R[197],E,"Extension trait for `Fancy` providing advanced CRT gadgets…",N,N],[11,R[112],E,R[113],24,[[["self"],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[114],E,R[115],24,[[["self"],[R[10]]],[[R[3],["u128"]],[R[4],[R[3]]]]]],[11,R[116],E,R[117],24,[[["self"]],[[R[3],["vec"]],[R[4],[R[3]]]]]],[11,"crt_add",E,R[118],24,[[["self"],[R[10]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_sub",E,R[119],24,[[["self"],[R[10]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_cmul",E,R[120],24,[[["self"],[R[10]],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_mul",E,R[121],24,[[["self"],[R[10]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_cexp",E,R[122],24,[[["self"],[R[10]],["u16"]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_rem",E,R[123],24,[[["self"],[R[10]],["u16"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[124],E,R[125],24,[[["self"],[R[10]]],[R[4]]]],[11,"crt_relu",E,R[126],24,[[["str"],["self"],[R[10]],[R[3]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_sign",E,R[127],24,[[["str"],["self"],[R[10]]],[R[4]]]],[11,"crt_sgn",E,R[128],24,[[["str"],["self"],[R[10]],[R[3]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_lt",E,R[34],24,[[["str"],["self"],[R[10]]],[R[4]]]],[11,"crt_geq",E,R[35],24,[[["str"],["self"],[R[10]]],[R[4]]]],[11,"crt_max",E,R[36],24,[[["str"],["self"]],[[R[4],[R[10]]],[R[10]]]]],[8,R[198],E,"Convenience functions for encoding input to Fancy objects.",N,N],[16,"Item",E,"The type that this Fancy object operates over.",25,N],[16,"Error",E,"The type of error that this Fancy object emits.",25,N],[10,R[54],E,"Encode many values where the actual input is known.",25,[[["self"]],[["vec"],[R[4],["vec"]]]]],[10,R[55],E,"Receive many values where the input is not known.",25,[[["self"]],[["vec"],[R[4],["vec"]]]]],[11,"encode",E,R[129],25,[[["self"],["u16"]],[R[4]]]],[11,"receive",E,R[130],25,[[["self"],["u16"]],[R[4]]]],[11,R[131],E,R[132],25,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[133],E,R[134],25,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[135],E,R[136],25,[[["self"]],[["vec",[R[33]]],[R[4],["vec"]]]]],[11,R[137],E,R[138],25,[[["self"]],[["vec",[R[33]]],[R[4],["vec"]]]]],[11,R[139],E,R[140],25,[[["self"],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[141],E,R[142],25,[[["self"],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[143],E,R[144],25,[[["self"],["u128"]],[[R[4],["vec"]],["vec",[R[10]]]]]],[11,R[145],E,R[146],25,[[["self"],["u128"],[R[7]]],[[R[4],["vec"]],["vec",[R[10]]]]]],[11,R[147],E,R[148],25,[[["self"],["u128"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[149],E,R[150],25,[[["self"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[151],E,R[152],25,[[["self"],[R[7]]],[[R[4],["vec"]],["vec",[R[11]]]]]],[11,R[153],E,R[154],25,[[["self"],[R[7]]],[[R[4],["vec"]],["vec",[R[11]]]]]],[8,R[199],E,"Trait to describe Fancy objects which can reveal outputs…",N,N],[10,R[56],E,"Reveal the contents of `x` to all parties.",26,[[["self"]],[["u16"],[R[4],["u16"]]]]],[11,R[155],E,R[156],26,[[["self"]],[["vec",["u16"]],[R[4],["vec"]]]]],[11,R[157],E,R[158],26,[[["self"],[R[33]]],[["vec",["u16"]],[R[4],["vec"]]]]],[11,R[159],E,R[160],26,[[["self"]],[["vec",["vec"]],[R[4],["vec"]]]]],[11,R[161],E,R[162],26,[[["self"],[R[10]]],[[R[4],["u128"]],["u128"]]]],[11,R[163],E,R[164],26,[[["self"]],[["vec",["u128"]],[R[4],["vec"]]]]],[11,R[165],E,R[166],26,[[["self"],[R[11]]],[[R[4],["u128"]],["u128"]]]],[11,R[167],E,R[168],26,[[["self"]],[["vec",["u128"]],[R[4],["vec"]]]]],[8,R[200],E,"An object that has some modulus. Basic object of `Fancy`…",N,N],[10,R[57],E,"The modulus of the wire.",27,[[["self"]],["u16"]]],[8,"Fancy",E,"DSL for the basic computations supported by…",N,N],[16,"Item",E,"The underlying wire datatype created by an object…",28,N],[16,"Error",E,"Errors which may be thrown by the users of Fancy.",28,N],[10,R[58],E,"Create a constant `x` with modulus `q`.",28,[[["self"],["u16"]],[R[4]]]],[10,"add",E,"Add `x` and `y`.",28,[[["self"]],[R[4]]]],[10,"sub",E,"Subtract `x` and `y`.",28,[[["self"]],[R[4]]]],[10,"cmul",E,"Multiply `x` times the constant `c`.",28,[[["self"],["u16"]],[R[4]]]],[10,"mul",E,"Multiply `x` and `y`.",28,[[["self"]],[R[4]]]],[10,"proj",E,"Project `x` according to the truth table `tt`. Resulting…",28,[[["self"],["vec",["u16"]],["u16"],[R[3],["vec"]]],[R[4]]]],[10,R[59],E,"Process this wire as output. Some `Fancy` implementors…",28,[[["self"]],[[R[4],[R[3]]],[R[3],["u16"]]]]],[11,"add_many",E,R[169],28,[[["self"]],[R[4]]]],[11,"xor",E,R[170],28,[[["self"]],[R[4]]]],[11,"negate",E,R[171],28,[[["self"]],[R[4]]]],[11,"and",E,R[172],28,[[["self"]],[R[4]]]],[11,"or",E,R[173],28,[[["self"]],[R[4]]]],[11,"and_many",E,R[174],28,[[["self"]],[R[4]]]],[11,"or_many",E,R[175],28,[[["self"]],[R[4]]]],[11,R[176],E,R[177],28,[[["self"],["u16"]],[R[4]]]],[11,"adder",E,R[178],28,[[["self"],[R[3]]],[R[4]]]],[11,"mux",E,R[179],28,[[["self"]],[R[4]]]],[11,R[180],E,R[181],28,[[["self"],["bool"]],[R[4]]]],[11,"outputs",E,R[182],28,[[["self"]],[[R[4],[R[3]]],[R[3],["vec"]]]]],[11,R[37],E,E,12,[[["self"]],[T]]],[11,R[38],E,E,12,[[[T],["self"]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[39],E,E,12,[[[U]],[R[4]]]],[11,R[46],E,E,12,[[["self"]],[T]]],[11,R[45],E,E,12,[[["self"]],[R[47]]]],[11,R[40],E,E,12,[[["self"]],[T]]],[11,R[41],E,E,12,[[],[R[4]]]],[11,R[42],E,E,12,[[],[U]]],[11,R[43],E,E,12,[[[T]],[T]]],[11,"cast",E,E,12,[[],[U]]],[11,R[44],E,E,12,[[[T]],[T]]],[11,R[37],E,E,13,[[["self"]],[T]]],[11,R[38],E,E,13,[[[T],["self"]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[39],E,E,13,[[[U]],[R[4]]]],[11,R[46],E,E,13,[[["self"]],[T]]],[11,R[45],E,E,13,[[["self"]],[R[47]]]],[11,R[40],E,E,13,[[["self"]],[T]]],[11,R[41],E,E,13,[[],[R[4]]]],[11,R[42],E,E,13,[[],[U]]],[11,R[43],E,E,13,[[[T]],[T]]],[11,"cast",E,E,13,[[],[U]]],[11,R[44],E,E,13,[[[T]],[T]]],[11,R[37],E,E,14,[[["self"]],[T]]],[11,R[38],E,E,14,[[[T],["self"]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[39],E,E,14,[[[U]],[R[4]]]],[11,R[46],E,E,14,[[["self"]],[T]]],[11,R[45],E,E,14,[[["self"]],[R[47]]]],[11,R[40],E,E,14,[[["self"]],[T]]],[11,R[41],E,E,14,[[],[R[4]]]],[11,R[42],E,E,14,[[],[U]]],[11,R[43],E,E,14,[[[T]],[T]]],[11,"cast",E,E,14,[[],[U]]],[11,R[44],E,E,14,[[[T]],[T]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[39],E,E,15,[[[U]],[R[4]]]],[11,R[46],E,E,15,[[["self"]],[T]]],[11,R[45],E,E,15,[[["self"]],[R[47]]]],[11,R[40],E,E,15,[[["self"]],[T]]],[11,R[41],E,E,15,[[],[R[4]]]],[11,R[42],E,E,15,[[],[U]]],[11,R[43],E,E,15,[[[T]],[T]]],[11,"cast",E,E,15,[[],[U]]],[11,R[44],E,E,15,[[[T]],[T]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[39],E,E,16,[[[U]],[R[4]]]],[11,R[46],E,E,16,[[["self"]],[T]]],[11,R[45],E,E,16,[[["self"]],[R[47]]]],[11,R[40],E,E,16,[[["self"]],[T]]],[11,R[41],E,E,16,[[],[R[4]]]],[11,R[42],E,E,16,[[],[U]]],[11,R[43],E,E,16,[[[T]],[T]]],[11,"cast",E,E,16,[[],[U]]],[11,R[44],E,E,16,[[[T]],[T]]],[11,R[37],E,E,0,[[["self"]],[T]]],[11,R[38],E,E,0,[[[T],["self"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[39],E,E,0,[[[U]],[R[4]]]],[11,R[46],E,E,0,[[["self"]],[T]]],[11,R[45],E,E,0,[[["self"]],[R[47]]]],[11,R[40],E,E,0,[[["self"]],[T]]],[11,R[41],E,E,0,[[],[R[4]]]],[11,R[42],E,E,0,[[],[U]]],[11,"clear",E,E,0,[[["self"]]]],[11,"initialize",E,E,0,[[]]],[11,R[43],E,E,0,[[[T]],[T]]],[11,"cast",E,E,0,[[],[U]]],[11,R[44],E,E,0,[[[T]],[T]]],[11,R[37],R[30],E,29,[[["self"]],[T]]],[11,R[38],E,E,29,[[[T],["self"]]]],[11,R[49],E,E,29,[[["self"]],[R[50]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,"into",E,E,29,[[],[U]]],[11,R[39],E,E,29,[[[U]],[R[4]]]],[11,R[46],E,E,29,[[["self"]],[T]]],[11,R[45],E,E,29,[[["self"]],[R[47]]]],[11,R[40],E,E,29,[[["self"]],[T]]],[11,R[41],E,E,29,[[],[R[4]]]],[11,R[42],E,E,29,[[],[U]]],[11,R[43],E,E,29,[[[T]],[T]]],[11,"cast",E,E,29,[[],[U]]],[11,R[44],E,E,29,[[[T]],[T]]],[11,R[37],E,E,1,[[["self"]],[T]]],[11,R[38],E,E,1,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[39],E,E,1,[[[U]],[R[4]]]],[11,R[46],E,E,1,[[["self"]],[T]]],[11,R[45],E,E,1,[[["self"]],[R[47]]]],[11,R[40],E,E,1,[[["self"]],[T]]],[11,R[41],E,E,1,[[],[R[4]]]],[11,R[42],E,E,1,[[],[U]]],[11,R[43],E,E,1,[[[T]],[T]]],[11,"cast",E,E,1,[[],[U]]],[11,R[44],E,E,1,[[[T]],[T]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[39],E,E,2,[[[U]],[R[4]]]],[11,R[46],E,E,2,[[["self"]],[T]]],[11,R[45],E,E,2,[[["self"]],[R[47]]]],[11,R[40],E,E,2,[[["self"]],[T]]],[11,R[41],E,E,2,[[],[R[4]]]],[11,R[42],E,E,2,[[],[U]]],[11,R[43],E,E,2,[[[T]],[T]]],[11,"cast",E,E,2,[[],[U]]],[11,R[44],E,E,2,[[[T]],[T]]],[11,"from",R[48],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[39],E,E,4,[[[U]],[R[4]]]],[11,R[46],E,E,4,[[["self"]],[T]]],[11,R[45],E,E,4,[[["self"]],[R[47]]]],[11,R[40],E,E,4,[[["self"]],[T]]],[11,R[41],E,E,4,[[],[R[4]]]],[11,R[42],E,E,4,[[],[U]]],[11,R[43],E,E,4,[[[T]],[T]]],[11,"cast",E,E,4,[[],[U]]],[11,R[44],E,E,4,[[[T]],[T]]],[11,R[37],E,E,3,[[["self"]],[T]]],[11,R[38],E,E,3,[[[T],["self"]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[39],E,E,3,[[[U]],[R[4]]]],[11,R[46],E,E,3,[[["self"]],[T]]],[11,R[45],E,E,3,[[["self"]],[R[47]]]],[11,R[40],E,E,3,[[["self"]],[T]]],[11,R[41],E,E,3,[[],[R[4]]]],[11,R[42],E,E,3,[[],[U]]],[11,R[43],E,E,3,[[[T]],[T]]],[11,"cast",E,E,3,[[],[U]]],[11,R[44],E,E,3,[[[T]],[T]]],[11,R[49],R[12],E,5,[[["self"]],[R[50]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[39],E,E,5,[[[U]],[R[4]]]],[11,R[46],E,E,5,[[["self"]],[T]]],[11,R[45],E,E,5,[[["self"]],[R[47]]]],[11,R[40],E,E,5,[[["self"]],[T]]],[11,R[41],E,E,5,[[],[R[4]]]],[11,R[42],E,E,5,[[],[U]]],[11,R[43],E,E,5,[[[T]],[T]]],[11,"cast",E,E,5,[[],[U]]],[11,R[44],E,E,5,[[[T]],[T]]],[11,R[49],E,E,6,[[["self"]],[R[50]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[39],E,E,6,[[[U]],[R[4]]]],[11,R[46],E,E,6,[[["self"]],[T]]],[11,R[45],E,E,6,[[["self"]],[R[47]]]],[11,R[40],E,E,6,[[["self"]],[T]]],[11,R[41],E,E,6,[[],[R[4]]]],[11,R[42],E,E,6,[[],[U]]],[11,R[43],E,E,6,[[[T]],[T]]],[11,"cast",E,E,6,[[],[U]]],[11,R[44],E,E,6,[[[T]],[T]]],[11,R[49],E,E,7,[[["self"]],[R[50]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[39],E,E,7,[[[U]],[R[4]]]],[11,R[46],E,E,7,[[["self"]],[T]]],[11,R[45],E,E,7,[[["self"]],[R[47]]]],[11,R[40],E,E,7,[[["self"]],[T]]],[11,R[41],E,E,7,[[],[R[4]]]],[11,R[42],E,E,7,[[],[U]]],[11,R[43],E,E,7,[[[T]],[T]]],[11,"cast",E,E,7,[[],[U]]],[11,R[44],E,E,7,[[[T]],[T]]],[11,R[49],E,E,8,[[["self"]],[R[50]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[39],E,E,8,[[[U]],[R[4]]]],[11,R[46],E,E,8,[[["self"]],[T]]],[11,R[45],E,E,8,[[["self"]],[R[47]]]],[11,R[40],E,E,8,[[["self"]],[T]]],[11,R[41],E,E,8,[[],[R[4]]]],[11,R[42],E,E,8,[[],[U]]],[11,R[43],E,E,8,[[[T]],[T]]],[11,"cast",E,E,8,[[],[U]]],[11,R[44],E,E,8,[[[T]],[T]]],[11,R[49],E,E,9,[[["self"]],[R[50]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[39],E,E,9,[[[U]],[R[4]]]],[11,R[46],E,E,9,[[["self"]],[T]]],[11,R[45],E,E,9,[[["self"]],[R[47]]]],[11,R[40],E,E,9,[[["self"]],[T]]],[11,R[41],E,E,9,[[],[R[4]]]],[11,R[42],E,E,9,[[],[U]]],[11,R[43],E,E,9,[[[T]],[T]]],[11,"cast",E,E,9,[[],[U]]],[11,R[44],E,E,9,[[[T]],[T]]],[11,R[49],E,E,10,[[["self"]],[R[50]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[39],E,E,10,[[[U]],[R[4]]]],[11,R[46],E,E,10,[[["self"]],[T]]],[11,R[45],E,E,10,[[["self"]],[R[47]]]],[11,R[40],E,E,10,[[["self"]],[T]]],[11,R[41],E,E,10,[[],[R[4]]]],[11,R[42],E,E,10,[[],[U]]],[11,R[43],E,E,10,[[[T]],[T]]],[11,"cast",E,E,10,[[],[U]]],[11,R[44],E,E,10,[[[T]],[T]]],[11,R[49],E,E,11,[[["self"]],[R[50]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[39],E,E,11,[[[U]],[R[4]]]],[11,R[46],E,E,11,[[["self"]],[T]]],[11,R[45],E,E,11,[[["self"]],[R[47]]]],[11,R[40],E,E,11,[[["self"]],[T]]],[11,R[41],E,E,11,[[],[R[4]]]],[11,R[42],E,E,11,[[],[U]]],[11,R[43],E,E,11,[[[T]],[T]]],[11,"cast",E,E,11,[[],[U]]],[11,R[44],E,E,11,[[[T]],[T]]],[11,"from",R[51],E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[39],E,E,17,[[[U]],[R[4]]]],[11,R[46],E,E,17,[[["self"]],[T]]],[11,R[45],E,E,17,[[["self"]],[R[47]]]],[11,R[40],E,E,17,[[["self"]],[T]]],[11,R[41],E,E,17,[[],[R[4]]]],[11,R[42],E,E,17,[[],[U]]],[11,R[43],E,E,17,[[[T]],[T]]],[11,"cast",E,E,17,[[],[U]]],[11,R[44],E,E,17,[[[T]],[T]]],[11,R[37],E,E,30,[[["self"]],[T]]],[11,R[38],E,E,30,[[[T],["self"]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[39],E,E,30,[[[U]],[R[4]]]],[11,R[46],E,E,30,[[["self"]],[T]]],[11,R[45],E,E,30,[[["self"]],[R[47]]]],[11,R[40],E,E,30,[[["self"]],[T]]],[11,R[41],E,E,30,[[],[R[4]]]],[11,R[42],E,E,30,[[],[U]]],[11,R[43],E,E,30,[[[T]],[T]]],[11,"cast",E,E,30,[[],[U]]],[11,R[44],E,E,30,[[[T]],[T]]],[11,"from",R[52],E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[39],E,E,18,[[[U]],[R[4]]]],[11,R[46],E,E,18,[[["self"]],[T]]],[11,R[45],E,E,18,[[["self"]],[R[47]]]],[11,R[40],E,E,18,[[["self"]],[T]]],[11,R[41],E,E,18,[[],[R[4]]]],[11,R[42],E,E,18,[[],[U]]],[11,R[43],E,E,18,[[[T]],[T]]],[11,"cast",E,E,18,[[],[U]]],[11,R[44],E,E,18,[[[T]],[T]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[39],E,E,19,[[[U]],[R[4]]]],[11,R[46],E,E,19,[[["self"]],[T]]],[11,R[45],E,E,19,[[["self"]],[R[47]]]],[11,R[40],E,E,19,[[["self"]],[T]]],[11,R[41],E,E,19,[[],[R[4]]]],[11,R[42],E,E,19,[[],[U]]],[11,R[43],E,E,19,[[[T]],[T]]],[11,"cast",E,E,19,[[],[U]]],[11,R[44],E,E,19,[[[T]],[T]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[39],E,E,20,[[[U]],[R[4]]]],[11,R[46],E,E,20,[[["self"]],[T]]],[11,R[45],E,E,20,[[["self"]],[R[47]]]],[11,R[40],E,E,20,[[["self"]],[T]]],[11,R[41],E,E,20,[[],[R[4]]]],[11,R[42],E,E,20,[[],[U]]],[11,R[43],E,E,20,[[[T]],[T]]],[11,"cast",E,E,20,[[],[U]]],[11,R[44],E,E,20,[[[T]],[T]]],[11,"encode",R[48],"Encode a single dummy value.",4,[[["self"],["u16"]],[[R[5]],[R[4],[R[53],R[5]]],[R[53]]]]],[11,R[54],E,"Encode a slice of inputs and a slice of moduli as DummyVals.",4,[[["self"]],[[R[4],["vec",R[5]]],["vec",[R[53]]],[R[5]]]]],[11,R[55],E,E,4,[[["self"]],[[R[4],["vec",R[5]]],["vec",[R[53]]],[R[5]]]]],[11,"receive",R[51],E,17,[[["self"],["u16"]],[R[4]]]],[11,"encode",E,E,17,[[["self"],["u16"]],[R[4]]]],[11,R[55],E,E,17,[[["self"]],[["vec"],[R[4],["vec"]]]]],[11,R[54],E,E,17,[[["self"]],[["vec"],[R[4],["vec"]]]]],[11,R[56],R[48],E,4,[[["self"],[R[53]]],[[R[4],["u16",R[5]]],["u16"],[R[5]]]]],[11,R[56],R[0],E,15,[[["self"],["wire"]],[[R[4],["u16",R[24]]],["u16"],[R[24]]]]],[11,R[56],E,E,16,[[["self"],["wire"]],[["u16"],[R[25]],[R[4],["u16",R[25]]]]]],[11,R[56],R[51],E,17,[[["self"],[R[60]]],[["u16"],[R[4],["u16",R[6]]],[R[6]]]]],[11,R[57],R[30],E,29,[[["self"]],["u16"]]],[11,R[57],R[48],E,3,[[["self"]],["u16"]]],[11,R[57],R[51],E,30,[[["self"]],["u16"]]],[11,R[57],R[0],E,0,[[["self"]],["u16"]]],[11,R[58],R[30],E,2,[[["self"],["u16"]],[[R[4],[R[8]]],[R[8]]]]],[11,"add",E,E,2,[[["self"],[R[8]]],[[R[4],[R[8]]],[R[8]]]]],[11,"sub",E,E,2,[[["self"],[R[8]]],[[R[4],[R[8]]],[R[8]]]]],[11,"cmul",E,E,2,[[["self"],["u16"],[R[8]]],[[R[4],[R[8]]],[R[8]]]]],[11,"proj",E,E,2,[[["self"],["vec",["u16"]],["u16"],[R[3],["vec"]],[R[8]]],[[R[4],[R[8]]],[R[8]]]]],[11,"mul",E,E,2,[[["self"],[R[8]]],[[R[4],[R[8]]],[R[8]]]]],[11,R[59],E,E,2,[[["self"],[R[8]]],[[R[4],[R[3]]],[R[3],["u16"]]]]],[11,R[58],R[48],E,4,[[["self"],["u16"]],[[R[4],[R[53]]],[R[53]]]]],[11,"add",E,E,4,[[["self"],[R[53]]],[[R[4],[R[53]]],[R[53]]]]],[11,"sub",E,E,4,[[["self"],[R[53]]],[[R[4],[R[53]]],[R[53]]]]],[11,"cmul",E,E,4,[[["self"],["u16"],[R[53]]],[[R[4],[R[53]]],[R[53]]]]],[11,"mul",E,E,4,[[["self"],[R[53]]],[[R[4],[R[53]]],[R[53]]]]],[11,"proj",E,E,4,[[["self"],["vec",["u16"]],["u16"],[R[3],["vec"]],[R[53]]],[[R[4],[R[53]]],[R[53]]]]],[11,R[59],E,E,4,[[["self"],[R[53]]],[[R[4],[R[3]]],[R[3],["u16"]]]]],[11,R[58],R[0],E,15,[[["self"],["u16"]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,"add",E,E,15,[[["self"],["wire"]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,"sub",E,E,15,[[["self"],["wire"]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,"cmul",E,E,15,[[["self"],["u16"],["wire"]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,"mul",E,E,15,[[["self"],["wire"]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,"proj",E,E,15,[[["self"],["vec",["u16"]],["u16"],["wire"],[R[3],["vec"]]],[[R[4],["wire",R[24]]],[R[24]],["wire"]]]],[11,R[59],E,E,15,[[["self"],["wire"]],[[R[4],[R[3],R[24]]],[R[24]],[R[3],["u16"]]]]],[11,R[58],E,E,16,[[["self"],["u16"]],[[R[4],["wire",R[25]]],[R[25]],["wire"]]]],[11,"add",E,E,16,[[["self"],["wire"]],[[R[4],["wire",R[25]]],[R[25]],["wire"]]]],[11,"sub",E,E,16,[[["self"],["wire"]],[[R[4],["wire",R[25]]],[R[25]],["wire"]]]],[11,"cmul",E,E,16,[[["self"],["u16"],["wire"]],[[R[4],["wire",R[25]]],[R[25]],["wire"]]]],[11,"mul",E,E,16,[[["self"],["wire"]],[[R[4],["wire",R[25]]],[R[25]],["wire"]]]],[11,"proj",E,E,16,[[["self"],["vec",["u16"]],["u16"],["wire"],[R[3],["vec"]]],[[R[4],["wire",R[25]]],[R[25]],["wire"]]]],[11,R[59],E,E,16,[[["self"],["wire"]],[[R[25]],[R[4],[R[3],R[25]]],[R[3],["u16"]]]]],[11,R[58],R[51],E,17,[[["self"],["u16"]],[[R[4],[R[60],R[6]]],[R[60]],[R[6]]]]],[11,"add",E,E,17,[[["self"],[R[60]]],[[R[4],[R[60],R[6]]],[R[60]],[R[6]]]]],[11,"sub",E,E,17,[[["self"],[R[60]]],[[R[4],[R[60],R[6]]],[R[60]],[R[6]]]]],[11,"cmul",E,E,17,[[["self"],["u16"],[R[60]]],[[R[4],[R[60],R[6]]],[R[60]],[R[6]]]]],[11,"mul",E,E,17,[[["self"],[R[60]]],[[R[4],[R[60],R[6]]],[R[60]],[R[6]]]]],[11,"proj",E,E,17,[[["self"],["vec",["u16"]],["u16"],[R[60]],[R[3],["vec"]]],[[R[4],[R[60],R[6]]],[R[60]],[R[6]]]]],[11,R[59],E,E,17,[[["self"],[R[60]]],[[R[4],[R[3],R[6]]],[R[6]],[R[3],["u16"]]]]],[11,"eq",R[30],E,29,[[["self"],[R[8]]],["bool"]]],[11,"ne",E,E,29,[[["self"],[R[8]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[2]]],["bool"]]],[11,"eq",R[0],E,0,[[["wire"],["self"]],["bool"]]],[11,"ne",E,E,0,[[["wire"],["self"]],["bool"]]],[11,"default",E,E,0,[[],["self"]]],[11,"clone",R[30],E,29,[[["self"]],[R[8]]]],[11,"clone",E,E,1,[[["self"]],[R[2]]]],[11,"clone",R[48],E,3,[[["self"]],[R[53]]]],[11,"clone",R[0],E,12,[[["self"]],[R[11]]]],[11,"clone",E,E,13,[[["self"]],[R[33]]]],[11,"clone",E,E,14,[[["self"]],[R[10]]]],[11,"clone",R[51],E,30,[[["self"]],[R[60]]]],[11,"clone",R[0],E,0,[[["self"]],["wire"]]],[11,"from",R[12],E,6,[[[R[61]]],[R[5]]]],[11,"from",E,E,7,[[[R[61]]],["self"]]],[11,"from",E,E,7,[[["error"]],["self"]]],[11,"from",E,E,7,[[["recverror"]],["self"]]],[11,"from",E,E,8,[[[R[61]]],["self"]]],[11,"from",E,E,8,[[["error"]],["self"]]],[11,"from",E,E,8,[[["senderror",["vec"]],["vec",["block"]]],["self"]]],[11,"from",E,E,9,[[[R[61]]],["self"]]],[11,"from",E,E,10,[[[R[61]]],[R[6]]]],[11,"from",E,E,11,[[["error"]],[R[62]]]],[11,"from",E,E,11,[[["error"]],[R[62]]]],[11,"from",E,E,11,[[["parseinterror"]],[R[62]]]],[11,"from",R[0],E,12,[[[R[33]]],[R[11]]]],[11,"from",E,E,14,[[[R[33]]],[R[10]]]],[11,"deref",E,E,12,[[["self"]],[R[33]]]],[11,"deref",E,E,14,[[["self"]],[R[33]]]],[11,"fmt",R[30],E,29,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",R[12],E,5,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,6,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,7,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,8,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,9,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,10,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,11,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",R[30],E,29,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,1,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",R[48],E,3,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",R[12],E,5,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,6,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,7,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,8,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,9,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,10,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,11,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",R[51],E,30,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",R[52],E,18,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,19,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",E,E,20,[[[R[63]],["self"]],[R[4]]]],[11,"fmt",R[0],E,0,[[[R[63]],["self"]],[R[4]]]],[11,"index",E,E,13,[[["self"],[R[7]]]]],[11,"write",R[52],E,20,[[["self"]],[[R[4],[R[7]]],[R[7]]]]],[11,"flush",E,E,20,[[["self"]],[R[4]]]],[11,R[64],R[0],R[65],22,[[["self"],["u128"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[66],E,R[67],22,[[["self"],[R[11]]],[[R[3],["u128"]],[R[4],[R[3]]]]]],[11,R[68],E,R[69],22,[[["self"]],[[R[3],["vec"]],[R[4],[R[3]]]]]],[11,"bin_xor",E,R[70],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_and",E,R[71],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_or",E,R[72],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[73],E,R[74],22,[[["self"],[R[11]]],[R[4]]]],[11,R[75],E,R[76],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[77],E,R[78],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[79],E,R[80],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[81],E,R[82],22,[[["self"],[R[11]]],[R[4]]]],[11,R[83],E,R[84],22,[[["self"],["u128"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[85],E,R[86],22,[[["self"],["u128"],[R[11]],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_abs",E,R[87],22,[[["self"],[R[11]]],[[R[4],[R[11]]],[R[11]]]]],[11,"bin_lt",E,R[34],22,[[["self"],[R[11]]],[R[4]]]],[11,"bin_geq",E,R[35],22,[[["self"],[R[11]]],[R[4]]]],[11,"bin_max",E,R[36],22,[[["self"]],[[R[4],[R[11]]],[R[11]]]]],[11,R[88],E,R[89],22,[[["self"],[R[11]]],[[R[4],["vec"]],["vec"]]]],[11,R[90],E,R[91],23,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[92],E,R[93],23,[[["self"],[R[33]]],[[R[4],[R[3]]],[R[3],["vec"]]]]],[11,R[94],E,R[95],23,[[["self"]],[[R[4],[R[3]]],[R[3],["vec"]]]]],[11,R[96],E,R[97],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[98],E,R[99],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[100],E,R[101],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[102],E,R[103],23,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[104],E,R[105],23,[[["self"]],[R[4]]]],[11,R[106],E,R[107],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,"mask",E,R[108],23,[[["self"],[R[33]]],[[R[4],[R[33]]],[R[33]]]]],[11,"shift",E,R[109],23,[[["self"],[R[33]],[R[7]]],[[R[4],[R[33]]],[R[33]]]]],[11,R[110],E,R[111],23,[[["self"],[R[33]]],[R[4]]]],[11,R[112],E,R[113],24,[[["self"],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[114],E,R[115],24,[[["self"],[R[10]]],[[R[3],["u128"]],[R[4],[R[3]]]]]],[11,R[116],E,R[117],24,[[["self"]],[[R[3],["vec"]],[R[4],[R[3]]]]]],[11,"crt_add",E,R[118],24,[[["self"],[R[10]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_sub",E,R[119],24,[[["self"],[R[10]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_cmul",E,R[120],24,[[["self"],[R[10]],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_mul",E,R[121],24,[[["self"],[R[10]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_cexp",E,R[122],24,[[["self"],[R[10]],["u16"]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_rem",E,R[123],24,[[["self"],[R[10]],["u16"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[124],E,R[125],24,[[["self"],[R[10]]],[R[4]]]],[11,"crt_relu",E,R[126],24,[[["str"],["self"],[R[10]],[R[3]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_sign",E,R[127],24,[[["str"],["self"],[R[10]]],[R[4]]]],[11,"crt_sgn",E,R[128],24,[[["str"],["self"],[R[10]],[R[3]]],[[R[4],[R[10]]],[R[10]]]]],[11,"crt_lt",E,R[34],24,[[["str"],["self"],[R[10]]],[R[4]]]],[11,"crt_geq",E,R[35],24,[[["str"],["self"],[R[10]]],[R[4]]]],[11,"crt_max",E,R[36],24,[[["str"],["self"]],[[R[4],[R[10]]],[R[10]]]]],[11,"encode",E,R[129],25,[[["self"],["u16"]],[R[4]]]],[11,"receive",E,R[130],25,[[["self"],["u16"]],[R[4]]]],[11,R[131],E,R[132],25,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[133],E,R[134],25,[[["self"]],[[R[4],[R[33]]],[R[33]]]]],[11,R[135],E,R[136],25,[[["self"]],[["vec",[R[33]]],[R[4],["vec"]]]]],[11,R[137],E,R[138],25,[[["self"]],[["vec",[R[33]]],[R[4],["vec"]]]]],[11,R[139],E,R[140],25,[[["self"],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[141],E,R[142],25,[[["self"],["u128"]],[[R[4],[R[10]]],[R[10]]]]],[11,R[143],E,R[144],25,[[["self"],["u128"]],[[R[4],["vec"]],["vec",[R[10]]]]]],[11,R[145],E,R[146],25,[[["self"],["u128"],[R[7]]],[[R[4],["vec"]],["vec",[R[10]]]]]],[11,R[147],E,R[148],25,[[["self"],["u128"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[149],E,R[150],25,[[["self"],[R[7]]],[[R[4],[R[11]]],[R[11]]]]],[11,R[151],E,R[152],25,[[["self"],[R[7]]],[[R[4],["vec"]],["vec",[R[11]]]]]],[11,R[153],E,R[154],25,[[["self"],[R[7]]],[[R[4],["vec"]],["vec",[R[11]]]]]],[11,R[155],E,R[156],26,[[["self"]],[["vec",["u16"]],[R[4],["vec"]]]]],[11,R[157],E,R[158],26,[[["self"],[R[33]]],[["vec",["u16"]],[R[4],["vec"]]]]],[11,R[159],E,R[160],26,[[["self"]],[["vec",["vec"]],[R[4],["vec"]]]]],[11,R[161],E,R[162],26,[[["self"],[R[10]]],[[R[4],["u128"]],["u128"]]]],[11,R[163],E,R[164],26,[[["self"]],[["vec",["u128"]],[R[4],["vec"]]]]],[11,R[165],E,R[166],26,[[["self"],[R[11]]],[[R[4],["u128"]],["u128"]]]],[11,R[167],E,R[168],26,[[["self"]],[["vec",["u128"]],[R[4],["vec"]]]]],[11,"add_many",E,R[169],28,[[["self"]],[R[4]]]],[11,"xor",E,R[170],28,[[["self"]],[R[4]]]],[11,"negate",E,R[171],28,[[["self"]],[R[4]]]],[11,"and",E,R[172],28,[[["self"]],[R[4]]]],[11,"or",E,R[173],28,[[["self"]],[R[4]]]],[11,"and_many",E,R[174],28,[[["self"]],[R[4]]]],[11,"or_many",E,R[175],28,[[["self"]],[R[4]]]],[11,R[176],E,R[177],28,[[["self"],["u16"]],[R[4]]]],[11,"adder",E,R[178],28,[[["self"],[R[3]]],[R[4]]]],[11,"mux",E,R[179],28,[[["self"]],[R[4]]]],[11,R[180],E,R[181],28,[[["self"],["bool"]],[R[4]]]],[11,"outputs",E,R[182],28,[[["self"]],[[R[4],[R[3]]],[R[3],["vec"]]]]]],"p":[[4,"Wire"],[3,"Circuit"],[3,R[183]],[3,"DummyVal"],[3,"Dummy"],[4,R[14]],[4,R[184]],[4,R[185]],[4,R[186]],[4,R[187]],[4,R[188]],[4,R[189]],[3,R[190]],[3,"Bundle"],[3,R[191]],[3,R[192]],[3,"Garbler"],[3,"Informer"],[3,R[193]],[3,"Encoder"],[3,R[194]],[8,"RngExt"],[8,R[195]],[8,R[196]],[8,R[197]],[8,R[198]],[8,R[199]],[8,R[200]],[8,"Fancy"],[3,R[201]],[3,R[202]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);