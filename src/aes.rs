pub struct Aes128 {
    round_keys: [u8; 176],
}

impl Clone for Aes128 {
    #[inline]
    fn clone(&self) -> Self {
        let mut new = Aes128 {
            round_keys: [0; 176],
        };
        new.round_keys[..176].clone_from_slice(&self.round_keys[..176]);
        new
    }
}

pub const AES: Aes128 = Aes128 {
    round_keys: [
        0x15, 0xb5, 0x32, 0xc2, 0xf1, 0x93, 0x1c, 0x94, 0xd7, 0x54, 0x87, 0x6d, 0xfe, 0x7e, 0x67,
        0x26, 0xa7, 0xeb, 0x4f, 0x98, 0x19, 0x86, 0xcf, 0xcf, 0x80, 0xe6, 0xbb, 0xed, 0xf8, 0x8d,
        0xe8, 0xc9, 0x12, 0x10, 0x4b, 0x44, 0x43, 0xd8, 0xb3, 0x5c, 0xf4, 0x67, 0x7b, 0x3c, 0x8d,
        0xcb, 0x04, 0x7b, 0x57, 0x8c, 0xdb, 0xac, 0xae, 0xd1, 0xc9, 0xdc, 0x29, 0x5d, 0x20, 0x51,
        0xcf, 0x6f, 0x5e, 0x25, 0x0c, 0xe1, 0xfd, 0x36, 0x50, 0xde, 0xff, 0xab, 0xdd, 0xfa, 0x4f,
        0xe9, 0xe2, 0xcd, 0x2d, 0x23, 0x96, 0xf6, 0x76, 0x9d, 0xaf, 0x14, 0x18, 0xd2, 0x51, 0x7e,
        0x4b, 0x1d, 0xf9, 0xf0, 0x86, 0x4a, 0x29, 0x1c, 0x77, 0xd9, 0x58, 0x93, 0xc6, 0xef, 0xbc,
        0xec, 0x74, 0xbe, 0x84, 0xc1, 0x2f, 0xbf, 0x55, 0xc2, 0xeb, 0x3c, 0x56, 0xa9, 0x92, 0x1a,
        0xb2, 0xc6, 0xf2, 0x38, 0x6e, 0x4d, 0xfb, 0xca, 0x8e, 0x07, 0x20, 0x19, 0xb9, 0x12, 0xd8,
        0xaf, 0x95, 0xe1, 0x15, 0x6e, 0xd9, 0xd1, 0xe7, 0xef, 0x4c, 0x2b, 0x34, 0x4e, 0x25, 0x1a,
        0x9a, 0x49, 0x07, 0xa5, 0x23, 0x69, 0xa7, 0x55, 0xe4, 0xaf, 0x1f, 0x44, 0xeb, 0x6e, 0xbc,
        0x0b, 0x40, 0x0c, 0x7c, 0x58, 0xb7, 0x54, 0x9a, 0xa0, 0x9b, 0x32,
    ],
};

impl Aes128 {
    #[inline]
    pub fn encrypt_u8(&self, m: &[u8; 16]) -> [u8; 16] {
        let mut c = [0; 16];
        unsafe {
            aesni_encrypt_block(10, m.as_ptr(), self.round_keys.as_ptr(), c.as_mut_ptr());
        }
        c
    }
}

extern "C" {
    fn aesni_encrypt_block(rounds: u8, input: *const u8, round_keys: *const u8, output: *mut u8);
}
